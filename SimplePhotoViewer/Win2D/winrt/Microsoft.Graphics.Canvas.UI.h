// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "impl/Microsoft.Graphics.Canvas.UI.2.h"
#include "Microsoft.Graphics.Canvas.h"

namespace winrt::impl {

template <typename D> Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason consume_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs<D>::Reason() const
{
    Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs)->get_Reason(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs<D>::TrackAsyncAction(Windows::Foundation::IAsyncAction const& action) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs)->TrackAsyncAction(get_abi(action)));
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs<D>::GetTrackedAction() const
{
    Windows::Foundation::IAsyncAction action{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs)->GetTrackedAction(put_abi(action)));
    return action;
}

template <typename D> Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs consume_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory<D>::Create(Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason const& createResourcesReason) const
{
    Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs CreateResourcesEventArgs{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory)->Create(get_abi(createResourcesReason), put_abi(CreateResourcesEventArgs)));
    return CreateResourcesEventArgs;
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs> : produce_base<D, Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs>
{
    int32_t WINRT_CALL get_Reason(Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Reason, WINRT_WRAP(Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason));
            *value = detach_from<Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL TrackAsyncAction(void* action) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrackAsyncAction, WINRT_WRAP(void), Windows::Foundation::IAsyncAction const&);
            this->shim().TrackAsyncAction(*reinterpret_cast<Windows::Foundation::IAsyncAction const*>(&action));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTrackedAction(void** action) noexcept final
    {
        try
        {
            *action = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTrackedAction, WINRT_WRAP(Windows::Foundation::IAsyncAction));
            *action = detach_from<Windows::Foundation::IAsyncAction>(this->shim().GetTrackedAction());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory> : produce_base<D, Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory>
{
    int32_t WINRT_CALL Create(Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason createResourcesReason, void** CreateResourcesEventArgs) noexcept final
    {
        try
        {
            *CreateResourcesEventArgs = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs), Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason const&);
            *CreateResourcesEventArgs = detach_from<Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason const*>(&createResourcesReason)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::UI {

inline CanvasCreateResourcesEventArgs::CanvasCreateResourcesEventArgs(Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason const& createResourcesReason) :
    CanvasCreateResourcesEventArgs(impl::call_factory<CanvasCreateResourcesEventArgs, Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory>([&](auto&& f) { return f.Create(createResourcesReason); }))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs> {};

}

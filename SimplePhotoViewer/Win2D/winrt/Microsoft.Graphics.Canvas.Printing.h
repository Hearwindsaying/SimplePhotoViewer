// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Windows.Graphics.Printing.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "impl/Microsoft.Graphics.Canvas.Printing.2.h"
#include "Microsoft.Graphics.Canvas.h"

namespace winrt::impl {

template <typename D> uint32_t consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::PageNumber() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->get_PageNumber(&value));
    return value;
}

template <typename D> Windows::Graphics::Printing::PrintTaskOptions consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::PrintTaskOptions() const
{
    Windows::Graphics::Printing::PrintTaskOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->get_PrintTaskOptions(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::GetDeferral() const
{
    Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->GetDeferral(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs<D>::DrawingSession() const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs)->get_DrawingSession(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral<D>::Complete() const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral)->Complete());
}

template <typename D> winrt::event_token consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged(Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const& value) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->add_PrintTaskOptionsChanged(get_abi(value), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged_revoker consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const& value) const
{
    return impl::make_event_revoker<D, PrintTaskOptionsChanged_revoker>(this, PrintTaskOptionsChanged(value));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::PrintTaskOptionsChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->remove_PrintTaskOptionsChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview(Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const& value) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->add_Preview(get_abi(value), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview_revoker consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const& value) const
{
    return impl::make_event_revoker<D, Preview_revoker>(this, Preview(value));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Preview(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->remove_Preview(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print(Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const& value) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->add_Print(get_abi(value), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print_revoker consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const& value) const
{
    return impl::make_event_revoker<D, Print_revoker>(this, Print(value));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::Print(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->remove_Print(get_abi(token)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::InvalidatePreview() const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->InvalidatePreview());
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::SetPageCount(uint32_t count) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->SetPageCount(count));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument<D>::SetIntermediatePageCount(uint32_t count) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument)->SetIntermediatePageCount(count));
}

template <typename D> Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory<D>::CreateWithDevice(Microsoft::Graphics::Canvas::CanvasDevice const& device) const
{
    Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory)->CreateWithDevice(get_abi(device), put_abi(value)));
    return value;
}

template <typename D> Windows::Graphics::Printing::PrintTaskOptions consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::PrintTaskOptions() const
{
    Windows::Graphics::Printing::PrintTaskOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->get_PrintTaskOptions(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::Dpi() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->get_Dpi(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::Dpi(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->put_Dpi(value));
}

template <typename D> Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::GetDeferral() const
{
    Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->GetDeferral(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs<D>::CreateDrawingSession() const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs)->CreateDrawingSession(put_abi(value)));
    return value;
}

template <typename D> uint32_t consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::CurrentPreviewPageNumber() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->get_CurrentPreviewPageNumber(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::NewPreviewPageNumber(uint32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->put_NewPreviewPageNumber(value));
}

template <typename D> uint32_t consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::NewPreviewPageNumber() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->get_NewPreviewPageNumber(&value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::GetDeferral() const
{
    Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->GetDeferral(put_abi(value)));
    return value;
}

template <typename D> Windows::Graphics::Printing::PrintTaskOptions consume_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs<D>::PrintTaskOptions() const
{
    Windows::Graphics::Printing::PrintTaskOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs)->get_PrintTaskOptions(put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs> : produce_base<D, Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs>
{
    int32_t WINRT_CALL get_PageNumber(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PageNumber, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().PageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PrintTaskOptions(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PrintTaskOptions, WINRT_WRAP(Windows::Graphics::Printing::PrintTaskOptions));
            *value = detach_from<Windows::Graphics::Printing::PrintTaskOptions>(this->shim().PrintTaskOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetDeferral(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetDeferral, WINRT_WRAP(Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral));
            *value = detach_from<Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DrawingSession(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().DrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral> : produce_base<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral>
{
    int32_t WINRT_CALL Complete() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Complete, WINRT_WRAP(void));
            this->shim().Complete();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument> : produce_base<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument>
{
    int32_t WINRT_CALL add_PrintTaskOptionsChanged(void* value, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PrintTaskOptionsChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().PrintTaskOptionsChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_PrintTaskOptionsChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(PrintTaskOptionsChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().PrintTaskOptionsChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_Preview(void* value, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Preview, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Preview(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Preview(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Preview, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Preview(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_Print(void* value, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Print, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Print(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Print(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Print, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Print(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL InvalidatePreview() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvalidatePreview, WINRT_WRAP(void));
            this->shim().InvalidatePreview();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPageCount(uint32_t count) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPageCount, WINRT_WRAP(void), uint32_t);
            this->shim().SetPageCount(count);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetIntermediatePageCount(uint32_t count) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetIntermediatePageCount, WINRT_WRAP(void), uint32_t);
            this->shim().SetIntermediatePageCount(count);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory> : produce_base<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory>
{
    int32_t WINRT_CALL CreateWithDevice(void* device, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithDevice, WINRT_WRAP(Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument), Microsoft::Graphics::Canvas::CanvasDevice const&);
            *value = detach_from<Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument>(this->shim().CreateWithDevice(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs> : produce_base<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs>
{
    int32_t WINRT_CALL get_PrintTaskOptions(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PrintTaskOptions, WINRT_WRAP(Windows::Graphics::Printing::PrintTaskOptions));
            *value = detach_from<Windows::Graphics::Printing::PrintTaskOptions>(this->shim().PrintTaskOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Dpi(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Dpi, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Dpi());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Dpi(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Dpi, WINRT_WRAP(void), float);
            this->shim().Dpi(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetDeferral(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetDeferral, WINRT_WRAP(Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral));
            *value = detach_from<Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateDrawingSession(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs> : produce_base<D, Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs>
{
    int32_t WINRT_CALL get_CurrentPreviewPageNumber(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CurrentPreviewPageNumber, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().CurrentPreviewPageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_NewPreviewPageNumber(uint32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(NewPreviewPageNumber, WINRT_WRAP(void), uint32_t);
            this->shim().NewPreviewPageNumber(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_NewPreviewPageNumber(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(NewPreviewPageNumber, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().NewPreviewPageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetDeferral(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetDeferral, WINRT_WRAP(Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral));
            *value = detach_from<Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PrintTaskOptions(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PrintTaskOptions, WINRT_WRAP(Windows::Graphics::Printing::PrintTaskOptions));
            *value = detach_from<Windows::Graphics::Printing::PrintTaskOptions>(this->shim().PrintTaskOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Printing {

inline CanvasPrintDocument::CanvasPrintDocument() :
    CanvasPrintDocument(impl::call_factory<CanvasPrintDocument>([](auto&& f) { return f.template ActivateInstance<CanvasPrintDocument>(); }))
{}

inline CanvasPrintDocument::CanvasPrintDocument(Microsoft::Graphics::Canvas::CanvasDevice const& device) :
    CanvasPrintDocument(impl::call_factory<CanvasPrintDocument, Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory>([&](auto&& f) { return f.CreateWithDevice(device); }))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDeferral> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs> {};

}

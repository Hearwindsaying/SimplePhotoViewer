// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "impl/Microsoft.Graphics.Canvas.Brushes.2.h"
#include "Microsoft.Graphics.Canvas.h"

namespace winrt::impl {

template <typename D> float consume_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush<D>::Opacity() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush)->get_Opacity(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush<D>::Opacity(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush)->put_Opacity(value));
}

template <typename D> Windows::Foundation::Numerics::float3x2 consume_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush<D>::Transform() const
{
    Windows::Foundation::Numerics::float3x2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush)->get_Transform(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush<D>::Transform(Windows::Foundation::Numerics::float3x2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush)->put_Transform(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush<D>::Device() const
{
    Microsoft::Graphics::Canvas::CanvasDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::ICanvasImage consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::Image() const
{
    Microsoft::Graphics::Canvas::ICanvasImage value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->get_Image(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::Image(Microsoft::Graphics::Canvas::ICanvasImage const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->put_Image(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasEdgeBehavior consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::ExtendX() const
{
    Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->get_ExtendX(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::ExtendX(Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->put_ExtendX(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasEdgeBehavior consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::ExtendY() const
{
    Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->get_ExtendY(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::ExtendY(Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->put_ExtendY(get_abi(value)));
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::Rect> consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::SourceRectangle() const
{
    Windows::Foundation::IReference<Windows::Foundation::Rect> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->get_SourceRectangle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::SourceRectangle(optional<Windows::Foundation::Rect> const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->put_SourceRectangle(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->get_Interpolation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush<D>::Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush)->put_Interpolation(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory<D>::Create(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush canvasImageBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory)->Create(get_abi(resourceCreator), put_abi(canvasImageBrush)));
    return canvasImageBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory<D>::CreateWithImage(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Microsoft::Graphics::Canvas::ICanvasImage const& image) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush canvasImageBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory)->CreateWithImage(get_abi(resourceCreator), get_abi(image), put_abi(canvasImageBrush)));
    return canvasImageBrush;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::StartPoint() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_StartPoint(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::StartPoint(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->put_StartPoint(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::EndPoint() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_EndPoint(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::EndPoint(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->put_EndPoint(get_abi(value)));
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop> consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::Stops() const
{
    com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_Stops(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr> consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::StopsHdr() const
{
    com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_StopsHdr(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasEdgeBehavior consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::EdgeBehavior() const
{
    Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_EdgeBehavior(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasColorSpace consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::PreInterpolationSpace() const
{
    Microsoft::Graphics::Canvas::CanvasColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_PreInterpolationSpace(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasColorSpace consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::PostInterpolationSpace() const
{
    Microsoft::Graphics::Canvas::CanvasColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_PostInterpolationSpace(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBufferPrecision consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::BufferPrecision() const
{
    Microsoft::Graphics::Canvas::CanvasBufferPrecision value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_BufferPrecision(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory<D>::CreateSimple(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Color const& startColor, Windows::UI::Color const& endColor) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory)->CreateSimple(get_abi(resourceCreator), get_abi(startColor), get_abi(endColor), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory<D>::CreateWithStops(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory)->CreateWithStops(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory<D>::CreateWithEdgeBehaviorAndAlphaMode(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory)->CreateWithEdgeBehaviorAndAlphaMode(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), get_abi(edgeBehavior), get_abi(alphaMode), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory<D>::CreateWithEdgeBehaviorAndInterpolationOptions(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory)->CreateWithEdgeBehaviorAndInterpolationOptions(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), get_abi(edgeBehavior), get_abi(alphaMode), get_abi(preInterpolationSpace), get_abi(postInterpolationSpace), get_abi(bufferPrecision), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float4 const& startColorHdr, Windows::Foundation::Numerics::float4 const& endColorHdr) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics)->CreateHdrSimple(get_abi(resourceCreator), get_abi(startColorHdr), get_abi(endColorHdr), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStopsHdr) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics)->CreateHdrWithStops(get_abi(resourceCreator), gradientStopsHdr.size(), get_abi(gradientStopsHdr), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStopsHdr, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics)->CreateHdrWithEdgeBehaviorAndAlphaMode(get_abi(resourceCreator), gradientStopsHdr.size(), get_abi(gradientStopsHdr), get_abi(edgeBehavior), get_abi(alphaMode), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStopsHdr, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics)->CreateHdrWithEdgeBehaviorAndInterpolationOptions(get_abi(resourceCreator), gradientStopsHdr.size(), get_abi(gradientStopsHdr), get_abi(edgeBehavior), get_abi(alphaMode), get_abi(preInterpolationSpace), get_abi(postInterpolationSpace), get_abi(bufferPrecision), put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics<D>::CreateRainbow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float eldritchness) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush canvasLinearGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics)->CreateRainbow(get_abi(resourceCreator), eldritchness, put_abi(canvasLinearGradientBrush)));
    return canvasLinearGradientBrush;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::Center() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_Center(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::Center(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->put_Center(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::OriginOffset() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_OriginOffset(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::OriginOffset(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->put_OriginOffset(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::RadiusX() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_RadiusX(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::RadiusX(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->put_RadiusX(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::RadiusY() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_RadiusY(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::RadiusY(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->put_RadiusY(value));
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop> consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::Stops() const
{
    com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_Stops(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr> consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::StopsHdr() const
{
    com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_StopsHdr(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasEdgeBehavior consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::EdgeBehavior() const
{
    Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_EdgeBehavior(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasColorSpace consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::PreInterpolationSpace() const
{
    Microsoft::Graphics::Canvas::CanvasColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_PreInterpolationSpace(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasColorSpace consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::PostInterpolationSpace() const
{
    Microsoft::Graphics::Canvas::CanvasColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_PostInterpolationSpace(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBufferPrecision consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::BufferPrecision() const
{
    Microsoft::Graphics::Canvas::CanvasBufferPrecision value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_BufferPrecision(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory<D>::CreateSimple(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Color const& startColor, Windows::UI::Color const& endColor) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory)->CreateSimple(get_abi(resourceCreator), get_abi(startColor), get_abi(endColor), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory<D>::CreateWithStops(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory)->CreateWithStops(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory<D>::CreateWithEdgeBehaviorAndAlphaMode(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory)->CreateWithEdgeBehaviorAndAlphaMode(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), get_abi(edgeBehavior), get_abi(alphaMode), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory<D>::CreateWithEdgeBehaviorAndInterpolationOptions(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory)->CreateWithEdgeBehaviorAndInterpolationOptions(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), get_abi(edgeBehavior), get_abi(alphaMode), get_abi(preInterpolationSpace), get_abi(postInterpolationSpace), get_abi(bufferPrecision), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float4 const& startColorHdr, Windows::Foundation::Numerics::float4 const& endColorHdr) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics)->CreateHdrSimple(get_abi(resourceCreator), get_abi(startColorHdr), get_abi(endColorHdr), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStops) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics)->CreateHdrWithStops(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics)->CreateHdrWithEdgeBehaviorAndAlphaMode(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), get_abi(edgeBehavior), get_abi(alphaMode), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics)->CreateHdrWithEdgeBehaviorAndInterpolationOptions(get_abi(resourceCreator), gradientStops.size(), get_abi(gradientStops), get_abi(edgeBehavior), get_abi(alphaMode), get_abi(preInterpolationSpace), get_abi(postInterpolationSpace), get_abi(bufferPrecision), put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics<D>::CreateRainbow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float eldritchness) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush canvasRadialGradientBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics)->CreateRainbow(get_abi(resourceCreator), eldritchness, put_abi(canvasRadialGradientBrush)));
    return canvasRadialGradientBrush;
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush)->put_Color(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush<D>::ColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush)->get_ColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush<D>::ColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush)->put_ColorHdr(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory<D>::Create(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Color const& color) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush canvasSolidColorBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory)->Create(get_abi(resourceCreator), get_abi(color), put_abi(canvasSolidColorBrush)));
    return canvasSolidColorBrush;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush consume_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics<D>::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float4 const& colorHdr) const
{
    Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush canvasSolidColorBrush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics)->CreateHdr(get_abi(resourceCreator), get_abi(colorHdr), put_abi(canvasSolidColorBrush)));
    return canvasSolidColorBrush;
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush>
{
    int32_t WINRT_CALL get_Opacity(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Opacity, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Opacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Opacity(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Opacity, WINRT_WRAP(void), float);
            this->shim().Opacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Transform(Windows::Foundation::Numerics::float3x2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Transform, WINRT_WRAP(Windows::Foundation::Numerics::float3x2));
            *value = detach_from<Windows::Foundation::Numerics::float3x2>(this->shim().Transform());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Transform(Windows::Foundation::Numerics::float3x2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Transform, WINRT_WRAP(void), Windows::Foundation::Numerics::float3x2 const&);
            this->shim().Transform(*reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush>
{
    int32_t WINRT_CALL get_Image(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Image, WINRT_WRAP(Microsoft::Graphics::Canvas::ICanvasImage));
            *value = detach_from<Microsoft::Graphics::Canvas::ICanvasImage>(this->shim().Image());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Image(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Image, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&);
            this->shim().Image(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtendX(Microsoft::Graphics::Canvas::CanvasEdgeBehavior* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendX, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasEdgeBehavior));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().ExtendX());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ExtendX(Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendX, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&);
            this->shim().ExtendX(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtendY(Microsoft::Graphics::Canvas::CanvasEdgeBehavior* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendY, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasEdgeBehavior));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().ExtendY());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ExtendY(Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendY, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&);
            this->shim().ExtendY(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceRectangle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(Windows::Foundation::IReference<Windows::Foundation::Rect>));
            *value = detach_from<Windows::Foundation::IReference<Windows::Foundation::Rect>>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceRectangle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(void), Windows::Foundation::IReference<Windows::Foundation::Rect> const&);
            this->shim().SourceRectangle(*reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Rect> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory>
{
    int32_t WINRT_CALL Create(void* resourceCreator, void** canvasImageBrush) noexcept final
    {
        try
        {
            *canvasImageBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&);
            *canvasImageBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithImage(void* resourceCreator, void* image, void** canvasImageBrush) noexcept final
    {
        try
        {
            *canvasImageBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithImage, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Microsoft::Graphics::Canvas::ICanvasImage const&);
            *canvasImageBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush>(this->shim().CreateWithImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush>
{
    int32_t WINRT_CALL get_StartPoint(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartPoint, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().StartPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_StartPoint(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartPoint, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().StartPoint(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EndPoint(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EndPoint, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().EndPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_EndPoint(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EndPoint, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().EndPoint(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Stops(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stops, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().Stops());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StopsHdr(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StopsHdr, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().StopsHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EdgeBehavior(Microsoft::Graphics::Canvas::CanvasEdgeBehavior* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EdgeBehavior, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasEdgeBehavior));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().EdgeBehavior());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreInterpolationSpace(Microsoft::Graphics::Canvas::CanvasColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreInterpolationSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasColorSpace>(this->shim().PreInterpolationSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PostInterpolationSpace(Microsoft::Graphics::Canvas::CanvasColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PostInterpolationSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasColorSpace>(this->shim().PostInterpolationSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BufferPrecision(Microsoft::Graphics::Canvas::CanvasBufferPrecision* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BufferPrecision, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBufferPrecision));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasBufferPrecision>(this->shim().BufferPrecision());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory>
{
    int32_t WINRT_CALL CreateSimple(void* resourceCreator, struct struct_Windows_UI_Color startColor, struct struct_Windows_UI_Color endColor, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSimple, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::UI::Color const&, Windows::UI::Color const&);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateSimple(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::UI::Color const*>(&startColor), *reinterpret_cast<Windows::UI::Color const*>(&endColor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithStops(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop* gradientStops, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithStops, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateWithStops(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops) + __gradientStopsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithEdgeBehaviorAndAlphaMode(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop* gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithEdgeBehaviorAndAlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateWithEdgeBehaviorAndAlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops) + __gradientStopsSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithEdgeBehaviorAndInterpolationOptions(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop* gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithEdgeBehaviorAndInterpolationOptions, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasBufferPrecision const&);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateWithEdgeBehaviorAndInterpolationOptions(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops) + __gradientStopsSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&preInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&postInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBufferPrecision const*>(&bufferPrecision)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics>
{
    int32_t WINRT_CALL CreateHdrSimple(void* resourceCreator, Windows::Foundation::Numerics::float4 startColorHdr, Windows::Foundation::Numerics::float4 endColorHdr, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Foundation::Numerics::float4 const&, Windows::Foundation::Numerics::float4 const&);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&startColorHdr), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&endColorHdr)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateHdrWithStops(void* resourceCreator, uint32_t __gradientStopsHdrSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr* gradientStopsHdr, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStopsHdr), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStopsHdr) + __gradientStopsHdrSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateHdrWithEdgeBehaviorAndAlphaMode(void* resourceCreator, uint32_t __gradientStopsHdrSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr* gradientStopsHdr, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStopsHdr), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStopsHdr) + __gradientStopsHdrSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateHdrWithEdgeBehaviorAndInterpolationOptions(void* resourceCreator, uint32_t __gradientStopsHdrSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr* gradientStopsHdr, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasBufferPrecision const&);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStopsHdr), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStopsHdr) + __gradientStopsHdrSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&preInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&postInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBufferPrecision const*>(&bufferPrecision)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateRainbow(void* resourceCreator, float eldritchness, void** canvasLinearGradientBrush) noexcept final
    {
        try
        {
            *canvasLinearGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateRainbow, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, float);
            *canvasLinearGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush>(this->shim().CreateRainbow(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), eldritchness));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush>
{
    int32_t WINRT_CALL get_Center(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Center, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().Center());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Center(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Center, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().Center(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OriginOffset(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OriginOffset, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().OriginOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OriginOffset(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OriginOffset, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().OriginOffset(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RadiusX(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RadiusX, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RadiusX());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RadiusX(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RadiusX, WINRT_WRAP(void), float);
            this->shim().RadiusX(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RadiusY(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RadiusY, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RadiusY());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RadiusY(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RadiusY, WINRT_WRAP(void), float);
            this->shim().RadiusY(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Stops(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stops, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().Stops());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StopsHdr(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StopsHdr, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().StopsHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EdgeBehavior(Microsoft::Graphics::Canvas::CanvasEdgeBehavior* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EdgeBehavior, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasEdgeBehavior));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().EdgeBehavior());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreInterpolationSpace(Microsoft::Graphics::Canvas::CanvasColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreInterpolationSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasColorSpace>(this->shim().PreInterpolationSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PostInterpolationSpace(Microsoft::Graphics::Canvas::CanvasColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PostInterpolationSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasColorSpace>(this->shim().PostInterpolationSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BufferPrecision(Microsoft::Graphics::Canvas::CanvasBufferPrecision* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BufferPrecision, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBufferPrecision));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasBufferPrecision>(this->shim().BufferPrecision());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory>
{
    int32_t WINRT_CALL CreateSimple(void* resourceCreator, struct struct_Windows_UI_Color startColor, struct struct_Windows_UI_Color endColor, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSimple, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::UI::Color const&, Windows::UI::Color const&);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateSimple(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::UI::Color const*>(&startColor), *reinterpret_cast<Windows::UI::Color const*>(&endColor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithStops(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop* gradientStops, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithStops, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateWithStops(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops) + __gradientStopsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithEdgeBehaviorAndAlphaMode(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop* gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithEdgeBehaviorAndAlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateWithEdgeBehaviorAndAlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops) + __gradientStopsSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithEdgeBehaviorAndInterpolationOptions(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStop* gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithEdgeBehaviorAndInterpolationOptions, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasBufferPrecision const&);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateWithEdgeBehaviorAndInterpolationOptions(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const *>(gradientStops) + __gradientStopsSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&preInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&postInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBufferPrecision const*>(&bufferPrecision)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics>
{
    int32_t WINRT_CALL CreateHdrSimple(void* resourceCreator, Windows::Foundation::Numerics::float4 startColorHdr, Windows::Foundation::Numerics::float4 endColorHdr, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Foundation::Numerics::float4 const&, Windows::Foundation::Numerics::float4 const&);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&startColorHdr), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&endColorHdr)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateHdrWithStops(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr* gradientStops, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStops) + __gradientStopsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateHdrWithEdgeBehaviorAndAlphaMode(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr* gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStops) + __gradientStopsSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateHdrWithEdgeBehaviorAndInterpolationOptions(void* resourceCreator, uint32_t __gradientStopsSize, struct struct_Microsoft_Graphics_Canvas_Brushes_CanvasGradientStopHdr* gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasColorSpace const&, Microsoft::Graphics::Canvas::CanvasBufferPrecision const&);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const>(reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStops), reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const *>(gradientStops) + __gradientStopsSize), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&edgeBehavior), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&preInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&postInterpolationSpace), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBufferPrecision const*>(&bufferPrecision)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateRainbow(void* resourceCreator, float eldritchness, void** canvasRadialGradientBrush) noexcept final
    {
        try
        {
            *canvasRadialGradientBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateRainbow, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, float);
            *canvasRadialGradientBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush>(this->shim().CreateRainbow(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), eldritchness));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().ColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory>
{
    int32_t WINRT_CALL Create(void* resourceCreator, struct struct_Windows_UI_Color color, void** canvasSolidColorBrush) noexcept final
    {
        try
        {
            *canvasSolidColorBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::UI::Color const&);
            *canvasSolidColorBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::UI::Color const*>(&color)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics> : produce_base<D, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics>
{
    int32_t WINRT_CALL CreateHdr(void* resourceCreator, Windows::Foundation::Numerics::float4 colorHdr, void** canvasSolidColorBrush) noexcept final
    {
        try
        {
            *canvasSolidColorBrush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateHdr, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Foundation::Numerics::float4 const&);
            *canvasSolidColorBrush = detach_from<Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush>(this->shim().CreateHdr(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&colorHdr)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Brushes {

inline CanvasImageBrush::CanvasImageBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) :
    CanvasImageBrush(impl::call_factory<CanvasImageBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory>([&](auto&& f) { return f.Create(resourceCreator); }))
{}

inline CanvasImageBrush::CanvasImageBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Microsoft::Graphics::Canvas::ICanvasImage const& image) :
    CanvasImageBrush(impl::call_factory<CanvasImageBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory>([&](auto&& f) { return f.CreateWithImage(resourceCreator, image); }))
{}

inline CanvasLinearGradientBrush::CanvasLinearGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Color const& startColor, Windows::UI::Color const& endColor) :
    CanvasLinearGradientBrush(impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory>([&](auto&& f) { return f.CreateSimple(resourceCreator, startColor, endColor); }))
{}

inline CanvasLinearGradientBrush::CanvasLinearGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops) :
    CanvasLinearGradientBrush(impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory>([&](auto&& f) { return f.CreateWithStops(resourceCreator, gradientStops); }))
{}

inline CanvasLinearGradientBrush::CanvasLinearGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) :
    CanvasLinearGradientBrush(impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory>([&](auto&& f) { return f.CreateWithEdgeBehaviorAndAlphaMode(resourceCreator, gradientStops, edgeBehavior, alphaMode); }))
{}

inline CanvasLinearGradientBrush::CanvasLinearGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) :
    CanvasLinearGradientBrush(impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory>([&](auto&& f) { return f.CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision); }))
{}

inline Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush CanvasLinearGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float4 const& startColorHdr, Windows::Foundation::Numerics::float4 const& endColorHdr)
{
    return impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, startColorHdr, endColorHdr); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush CanvasLinearGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStopsHdr)
{
    return impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, gradientStopsHdr); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush CanvasLinearGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStopsHdr, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode)
{
    return impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, gradientStopsHdr, edgeBehavior, alphaMode); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush CanvasLinearGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStopsHdr, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision)
{
    return impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, gradientStopsHdr, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush CanvasLinearGradientBrush::CreateRainbow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float eldritchness)
{
    return impl::call_factory<CanvasLinearGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics>([&](auto&& f) { return f.CreateRainbow(resourceCreator, eldritchness); });
}

inline CanvasRadialGradientBrush::CanvasRadialGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Color const& startColor, Windows::UI::Color const& endColor) :
    CanvasRadialGradientBrush(impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory>([&](auto&& f) { return f.CreateSimple(resourceCreator, startColor, endColor); }))
{}

inline CanvasRadialGradientBrush::CanvasRadialGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops) :
    CanvasRadialGradientBrush(impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory>([&](auto&& f) { return f.CreateWithStops(resourceCreator, gradientStops); }))
{}

inline CanvasRadialGradientBrush::CanvasRadialGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) :
    CanvasRadialGradientBrush(impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory>([&](auto&& f) { return f.CreateWithEdgeBehaviorAndAlphaMode(resourceCreator, gradientStops, edgeBehavior, alphaMode); }))
{}

inline CanvasRadialGradientBrush::CanvasRadialGradientBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) :
    CanvasRadialGradientBrush(impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory>([&](auto&& f) { return f.CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision); }))
{}

inline Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush CanvasRadialGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float4 const& startColorHdr, Windows::Foundation::Numerics::float4 const& endColorHdr)
{
    return impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, startColorHdr, endColorHdr); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush CanvasRadialGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStops)
{
    return impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, gradientStops); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush CanvasRadialGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode)
{
    return impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, gradientStops, edgeBehavior, alphaMode); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush CanvasRadialGradientBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr const> gradientStops, Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& edgeBehavior, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode, Microsoft::Graphics::Canvas::CanvasColorSpace const& preInterpolationSpace, Microsoft::Graphics::Canvas::CanvasColorSpace const& postInterpolationSpace, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision)
{
    return impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision); });
}

inline Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush CanvasRadialGradientBrush::CreateRainbow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float eldritchness)
{
    return impl::call_factory<CanvasRadialGradientBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics>([&](auto&& f) { return f.CreateRainbow(resourceCreator, eldritchness); });
}

inline CanvasSolidColorBrush::CanvasSolidColorBrush(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Color const& color) :
    CanvasSolidColorBrush(impl::call_factory<CanvasSolidColorBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory>([&](auto&& f) { return f.Create(resourceCreator, color); }))
{}

inline Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush CanvasSolidColorBrush::CreateHdr(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float4 const& colorHdr)
{
    return impl::call_factory<CanvasSolidColorBrush, Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics>([&](auto&& f) { return f.CreateHdr(resourceCreator, colorHdr); });
}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasImageBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasLinearGradientBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasRadialGradientBrush> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Brushes::CanvasSolidColorBrush> {};

}

// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "impl/Microsoft.Graphics.Canvas.2.h"
#include "impl/Microsoft.Graphics.Canvas.Brushes.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Text.2.h"
#include "impl/Microsoft.Graphics.Canvas.Text.2.h"
#include "Microsoft.Graphics.Canvas.h"

namespace winrt::impl {

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetRecommendedRenderingMode(float fontSize, float dpi, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const& renderingParameters) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode renderingMode{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetRecommendedRenderingMode(fontSize, dpi, get_abi(measuringMode), get_abi(renderingParameters), put_abi(renderingMode)));
    return renderingMode;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetRecommendedRenderingMode(float fontSize, float dpi, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const& renderingParameters, Windows::Foundation::Numerics::float3x2 const& transform, bool isSideways, Microsoft::Graphics::Canvas::CanvasAntialiasing const& outlineThreshold) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode renderingMode{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetRecommendedRenderingModeWithAllOptions(fontSize, dpi, get_abi(measuringMode), get_abi(renderingParameters), get_abi(transform), isSideways, get_abi(outlineThreshold), put_abi(renderingMode)));
    return renderingMode;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextGridFit consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetRecommendedGridFit(float fontSize, float dpi, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const& renderingParameters, Windows::Foundation::Numerics::float3x2 const& transform, bool isSideways, Microsoft::Graphics::Canvas::CanvasAntialiasing const& outlineThreshold) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextGridFit gridFit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetRecommendedGridFit(fontSize, dpi, get_abi(measuringMode), get_abi(renderingParameters), get_abi(transform), isSideways, get_abi(outlineThreshold), put_abi(gridFit)));
    return gridFit;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GlyphBox() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_GlyphBox(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::SubscriptPosition() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_SubscriptPosition(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::SubscriptSize() const
{
    Windows::Foundation::Size value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_SubscriptSize(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::SuperscriptPosition() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_SuperscriptPosition(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::SuperscriptSize() const
{
    Windows::Foundation::Size value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_SuperscriptSize(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::HasTypographicMetrics() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_HasTypographicMetrics(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Ascent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Ascent(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Descent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Descent(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::LineGap() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_LineGap(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::CapHeight() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_CapHeight(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::LowercaseLetterHeight() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_LowercaseLetterHeight(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::UnderlinePosition() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_UnderlinePosition(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::UnderlineThickness() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_UnderlineThickness(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::StrikethroughPosition() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_StrikethroughPosition(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::StrikethroughThickness() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_StrikethroughThickness(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::CaretSlopeRise() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_CaretSlopeRise(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::CaretSlopeRun() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_CaretSlopeRun(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::CaretOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_CaretOffset(&value));
    return value;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasUnicodeRange> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::UnicodeRanges() const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasUnicodeRange> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_UnicodeRanges(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::IsMonospaced() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_IsMonospaced(&value));
    return value;
}

template <typename D> com_array<int32_t> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetVerticalGlyphVariants(array_view<int32_t const> inputElements) const
{
    com_array<int32_t> outputElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetVerticalGlyphVariants(inputElements.size(), get_abi(inputElements), impl::put_size_abi(outputElements), put_abi(outputElements)));
    return outputElements;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::HasVerticalGlyphVariants() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_HasVerticalGlyphVariants(&value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::FileFormatType() const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_FileFormatType(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontSimulations consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Simulations() const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontSimulations value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Simulations(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::IsSymbolFont() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_IsSymbolFont(&value));
    return value;
}

template <typename D> uint32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GlyphCount() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_GlyphCount(&value));
    return value;
}

template <typename D> com_array<int32_t> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetGlyphIndices(array_view<uint32_t const> inputElements) const
{
    com_array<int32_t> outputElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetGlyphIndices(inputElements.size(), get_abi(inputElements), impl::put_size_abi(outputElements), put_abi(outputElements)));
    return outputElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetGlyphMetrics(array_view<int32_t const> inputElements, bool isSideways) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics> outputElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetGlyphMetrics(inputElements.size(), get_abi(inputElements), isSideways, impl::put_size_abi(outputElements), put_abi(outputElements)));
    return outputElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetGdiCompatibleGlyphMetrics(float fontSize, float dpi, Windows::Foundation::Numerics::float3x2 const& transform, bool useGdiNatural, array_view<int32_t const> inputElements, bool isSideways) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics> outputElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetGdiCompatibleGlyphMetrics(fontSize, dpi, get_abi(transform), useGdiNatural, inputElements.size(), get_abi(inputElements), isSideways, impl::put_size_abi(outputElements), put_abi(outputElements)));
    return outputElements;
}

template <typename D> Windows::UI::Text::FontWeight consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Weight() const
{
    Windows::UI::Text::FontWeight value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Weight(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Text::FontStretch consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Stretch() const
{
    Windows::UI::Text::FontStretch value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Stretch(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Text::FontStyle consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Style() const
{
    Windows::UI::Text::FontStyle value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Style(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IMapView<hstring, hstring> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::FamilyNames() const
{
    Windows::Foundation::Collections::IMapView<hstring, hstring> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_FamilyNames(put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IMapView<hstring, hstring> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::FaceNames() const
{
    Windows::Foundation::Collections::IMapView<hstring, hstring> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_FaceNames(put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IMapView<hstring, hstring> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetInformationalStrings(Microsoft::Graphics::Canvas::Text::CanvasFontInformation const& fontInformation) const
{
    Windows::Foundation::Collections::IMapView<hstring, hstring> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetInformationalStrings(get_abi(fontInformation), put_abi(values)));
    return values;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::HasCharacter(uint32_t unicodeValue) const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->HasCharacter(unicodeValue, &value));
    return value;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetGlyphRunBounds(Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession, Windows::Foundation::Numerics::float2 const& point, float fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphs, bool isSideways, uint32_t bidiLevel) const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetGlyphRunBounds(get_abi(drawingSession), get_abi(point), fontSize, glyphs.size(), get_abi(glyphs), isSideways, bidiLevel, put_abi(bounds)));
    return bounds;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetGlyphRunBounds(Microsoft::Graphics::Canvas::CanvasDrawingSession const& drawingSession, Windows::Foundation::Numerics::float2 const& point, float fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphs, bool isSideways, uint32_t bidiLevel, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode) const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetGlyphRunBoundsWithMeasuringMode(get_abi(drawingSession), get_abi(point), fontSize, glyphs.size(), get_abi(glyphs), isSideways, bidiLevel, get_abi(measuringMode), put_abi(bounds)));
    return bounds;
}

template <typename D> com_array<uint8_t> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::Panose() const
{
    com_array<uint8_t> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->get_Panose(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetSupportedTypographicFeatureNames(Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetSupportedTypographicFeatureNames(get_abi(script), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetSupportedTypographicFeatureNames(Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, param::hstring const& locale) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetSupportedTypographicFeatureNamesWithLocale(get_abi(script), get_abi(locale), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<bool> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetTypographicFeatureGlyphSupport(Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const& typographicFeatureName, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphsElements) const
{
    com_array<bool> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetTypographicFeatureGlyphSupport(get_abi(script), get_abi(typographicFeatureName), glyphsElements.size(), get_abi(glyphsElements), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<bool> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontFace<D>::GetTypographicFeatureGlyphSupport(Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const& typographicFeatureName, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphsElements, param::hstring const& locale) const
{
    com_array<bool> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontFace)->GetTypographicFeatureGlyphSupportWithLocale(get_abi(script), get_abi(typographicFeatureName), glyphsElements.size(), get_abi(glyphsElements), get_abi(locale), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Microsoft::Graphics::Canvas::Text::CanvasFontFace> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::Fonts() const
{
    Windows::Foundation::Collections::IVectorView<Microsoft::Graphics::Canvas::Text::CanvasFontFace> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->get_Fonts(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::TryFindFontFace(Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, int32_t& index) const
{
    bool succeeded{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->TryFindFontFace(get_abi(fontFace), &index, &succeeded));
    return succeeded;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontSet consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::GetMatchingFonts(array_view<Microsoft::Graphics::Canvas::Text::CanvasFontProperty const> propertyElements) const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontSet matchingFonts{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->GetMatchingFontsFromProperties(propertyElements.size(), get_abi(propertyElements), put_abi(matchingFonts)));
    return matchingFonts;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontSet consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::GetMatchingFonts(param::hstring const& familyName, Windows::UI::Text::FontWeight const& weight, Windows::UI::Text::FontStretch const& stretch, Windows::UI::Text::FontStyle const& style) const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontSet matchingFonts{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->GetMatchingFontsFromWwsFamily(get_abi(familyName), get_abi(weight), get_abi(stretch), get_abi(style), put_abi(matchingFonts)));
    return matchingFonts;
}

template <typename D> uint32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::CountFontsMatchingProperty(Microsoft::Graphics::Canvas::Text::CanvasFontProperty const& property) const
{
    uint32_t count{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->CountFontsMatchingProperty(get_abi(property), &count));
    return count;
}

template <typename D> Windows::Foundation::Collections::IMapView<hstring, hstring> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::GetPropertyValues(uint32_t fontIndex, Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const& propertyIdentifier) const
{
    Windows::Foundation::Collections::IMapView<hstring, hstring> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->GetPropertyValuesFromIndex(fontIndex, get_abi(propertyIdentifier), put_abi(values)));
    return values;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasFontProperty> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::GetPropertyValues(Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const& propertyIdentifier, param::hstring const& preferredLocaleNames) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasFontProperty> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->GetPropertyValuesFromIdentifier(get_abi(propertyIdentifier), get_abi(preferredLocaleNames), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasFontProperty> consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSet<D>::GetPropertyValues(Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const& propertyIdentifier) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasFontProperty> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSet)->GetPropertyValues(get_abi(propertyIdentifier), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontSet consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory<D>::Create(Windows::Foundation::Uri const& uri) const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontSet fontSet{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory)->Create(get_abi(uri), put_abi(fontSet)));
    return fontSet;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontSet consume_Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics<D>::GetSystemFontSet() const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontSet fontSet{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics)->GetSystemFontSet(put_abi(fontSet)));
    return fontSet;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution consume_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory<D>::Create(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const& method) const
{
    Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution canvasNumberSubstitution{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory)->Create(get_abi(method), put_abi(canvasNumberSubstitution)));
    return canvasNumberSubstitution;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution consume_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory<D>::CreateWithLocaleAndIgnoreOverrides(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const& method, param::hstring const& localeName, bool ignoreEnvironmentOverrides) const
{
    Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution canvasNumberSubstitution{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory)->CreateWithLocaleAndIgnoreOverrides(get_abi(method), get_abi(localeName), ignoreEnvironmentOverrides, put_abi(canvasNumberSubstitution)));
    return canvasNumberSubstitution;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasFontFace consume_Microsoft_Graphics_Canvas_Text_ICanvasScaledFont<D>::FontFace() const
{
    Microsoft::Graphics::Canvas::Text::CanvasFontFace value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasScaledFont)->get_FontFace(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasScaledFont<D>::ScaleFactor() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasScaledFont)->get_ScaleFactor(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetFonts(Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& textFormat) const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetFontsUsingSystemFontSet(get_abi(textFormat), put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetFonts(Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& textFormat, Microsoft::Graphics::Canvas::Text::CanvasFontSet const& fontSet) const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetFonts(get_abi(textFormat), get_abi(fontSet), put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetBidi() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetBidi(put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetBidi(param::hstring const& locale) const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetBidiWithLocale(get_abi(locale), put_abi(values)));
    return values;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetBreakpoints() const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetBreakpoints(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetBreakpoints(param::hstring const& locale) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetBreakpointsWithLocale(get_abi(locale), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetNumberSubstitutions() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetNumberSubstitutions(put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetScript() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetScript(put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetScript(param::hstring const& locale) const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetScriptWithLocale(get_abi(locale), put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetGlyphOrientations() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetGlyphOrientations(put_abi(values)));
    return values;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetGlyphOrientations(param::hstring const& locale) const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>> values{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetGlyphOrientationsWithLocale(get_abi(locale), put_abi(values)));
    return values;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasScriptProperties consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetScriptProperties(Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& analyzedScript) const
{
    Microsoft::Graphics::Canvas::Text::CanvasScriptProperties scriptProperties{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetScriptProperties(get_abi(analyzedScript), put_abi(scriptProperties)));
    return scriptProperties;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetGlyphs(Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const& characterRange, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, bool isSideways, bool isRightToLeft, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetGlyphs(get_abi(characterRange), get_abi(fontFace), fontSize, isSideways, isRightToLeft, get_abi(script), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetGlyphs(Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const& characterRange, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, bool isSideways, bool isRightToLeft, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, param::hstring const& locale, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const& numberSubstitution, param::vector_view<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasTypography>> const& typographyRanges, com_array<int32_t>& clusterMapIndicesElements, com_array<bool>& isShapedAloneGlyphsElements, com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping>& glyphShapingResultsElements) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetGlyphsWithAllOptions(get_abi(characterRange), get_abi(fontFace), fontSize, isSideways, isRightToLeft, get_abi(script), get_abi(locale), get_abi(numberSubstitution), get_abi(typographyRanges), impl::put_size_abi(clusterMapIndicesElements), put_abi(clusterMapIndicesElements), impl::put_size_abi(isShapedAloneGlyphsElements), put_abi(isShapedAloneGlyphsElements), impl::put_size_abi(glyphShapingResultsElements), put_abi(glyphShapingResultsElements), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::GetJustificationOpportunities(Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const& characterRange, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, array_view<int32_t const> clusterMapIndicesElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const> glyphShapingResultsElements) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->GetJustificationOpportunities(get_abi(characterRange), get_abi(fontFace), fontSize, get_abi(script), clusterMapIndicesElements.size(), get_abi(clusterMapIndicesElements), glyphShapingResultsElements.size(), get_abi(glyphShapingResultsElements), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::ApplyJustificationOpportunities(float lineWidth, array_view<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity const> justificationOpportunitiesElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> sourceGlyphsElements) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->ApplyJustificationOpportunities(lineWidth, justificationOpportunitiesElements.size(), get_abi(justificationOpportunitiesElements), sourceGlyphsElements.size(), get_abi(sourceGlyphsElements), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::AddGlyphsAfterJustification(Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, array_view<int32_t const> clusterMapIndicesElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> originalGlyphsElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> justifiedGlyphsElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const> glyphShapingResultsElements) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->AddGlyphsAfterJustification(get_abi(fontFace), fontSize, get_abi(script), clusterMapIndicesElements.size(), get_abi(clusterMapIndicesElements), originalGlyphsElements.size(), get_abi(originalGlyphsElements), justifiedGlyphsElements.size(), get_abi(justifiedGlyphsElements), glyphShapingResultsElements.size(), get_abi(glyphShapingResultsElements), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer<D>::AddGlyphsAfterJustification(Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const& script, array_view<int32_t const> clusterMapIndicesElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> originalGlyphsElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> justifiedGlyphsElements, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const> glyphShapingResultsElements, com_array<int32_t>& outputClusterMapIndicesElements) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer)->AddGlyphsAfterJustificationWithClusterMap(get_abi(fontFace), fontSize, get_abi(script), clusterMapIndicesElements.size(), get_abi(clusterMapIndicesElements), originalGlyphsElements.size(), get_abi(originalGlyphsElements), justifiedGlyphsElements.size(), get_abi(justifiedGlyphsElements), glyphShapingResultsElements.size(), get_abi(glyphShapingResultsElements), impl::put_size_abi(outputClusterMapIndicesElements), put_abi(outputClusterMapIndicesElements), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory<D>::Create(param::hstring const& text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer canvasTextAnalyzer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory)->Create(get_abi(text), get_abi(textDirection), put_abi(canvasTextAnalyzer)));
    return canvasTextAnalyzer;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory<D>::CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(param::hstring const& text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const& numberSubstitution, Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const& verticalGlyphOrientation, uint32_t bidiLevel) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer canvasTextAnalyzer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory)->CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(get_abi(text), get_abi(textDirection), get_abi(numberSubstitution), get_abi(verticalGlyphOrientation), bidiLevel, put_abi(canvasTextAnalyzer)));
    return canvasTextAnalyzer;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory<D>::CreateWithOptions(param::hstring const& text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions const& options) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer canvasTextAnalyzer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory)->CreateWithOptions(get_abi(text), get_abi(textDirection), get_abi(options), put_abi(canvasTextAnalyzer)));
    return canvasTextAnalyzer;
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions<D>::GetLocaleName(int32_t characterIndex, int32_t& characterCount) const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions)->GetLocaleName(characterIndex, &characterCount, put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions<D>::GetNumberSubstitution(int32_t characterIndex, int32_t& characterCount) const
{
    Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions)->GetNumberSubstitution(characterIndex, &characterCount, put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions<D>::GetVerticalGlyphOrientation(int32_t characterIndex, int32_t& characterCount) const
{
    Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions)->GetVerticalGlyphOrientation(characterIndex, &characterCount, put_abi(value)));
    return value;
}

template <typename D> uint32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions<D>::GetBidiLevel(int32_t characterIndex, int32_t& characterCount) const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions)->GetBidiLevel(characterIndex, &characterCount, &value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextDirection consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::Direction() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextDirection value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_Direction(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::Direction(Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_Direction(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontFamily() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontFamily(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_FontFamily(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontSize() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_FontSize(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontSize(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_FontSize(value));
}

template <typename D> Windows::UI::Text::FontStretch consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_FontStretch(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontStretch(Windows::UI::Text::FontStretch const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_FontStretch(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_FontStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontStyle(Windows::UI::Text::FontStyle const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_FontStyle(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::FontWeight(Windows::UI::Text::FontWeight const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_FontWeight(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::IncrementalTabStop() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_IncrementalTabStop(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::IncrementalTabStop(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_IncrementalTabStop(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LineSpacing() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_LineSpacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LineSpacing(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_LineSpacing(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LineSpacingBaseline() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_LineSpacingBaseline(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LineSpacingBaseline(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_LineSpacingBaseline(value));
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LocaleName() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_LocaleName(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LocaleName(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_LocaleName(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::VerticalAlignment() const
{
    Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_VerticalAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::VerticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_VerticalAlignment(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::HorizontalAlignment() const
{
    Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_HorizontalAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::HorizontalAlignment(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_HorizontalAlignment(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingGranularity() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_TrimmingGranularity(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingGranularity(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_TrimmingGranularity(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingDelimiter() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_TrimmingDelimiter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingDelimiter(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_TrimmingDelimiter(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingDelimiterCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_TrimmingDelimiterCount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingDelimiterCount(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_TrimmingDelimiterCount(value));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasWordWrapping consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::WordWrapping() const
{
    Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_WordWrapping(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::WordWrapping(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_WordWrapping(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::Options() const
{
    Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_Options(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::Options(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_Options(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::VerticalGlyphOrientation() const
{
    Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_VerticalGlyphOrientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::VerticalGlyphOrientation(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_VerticalGlyphOrientation(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::OpticalAlignment() const
{
    Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_OpticalAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::OpticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_OpticalAlignment(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LastLineWrapping() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_LastLineWrapping(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LastLineWrapping(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_LastLineWrapping(value));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LineSpacingMode() const
{
    Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_LineSpacingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::LineSpacingMode(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_LineSpacingMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingSign() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_TrimmingSign(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::TrimmingSign(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_TrimmingSign(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::CustomTrimmingSign() const
{
    Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->get_CustomTrimmingSign(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat<D>::CustomTrimmingSign(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormat)->put_CustomTrimmingSign(get_abi(value)));
}

template <typename D> com_array<hstring> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics<D>::GetSystemFontFamilies() const
{
    com_array<hstring> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics)->GetSystemFontFamilies(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<hstring> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics<D>::GetSystemFontFamilies(param::vector_view<hstring> const& localeList) const
{
    com_array<hstring> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics)->GetSystemFontFamiliesFromLocaleList(get_abi(localeList), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::Draw(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const& textRenderer, Windows::Foundation::Numerics::float2 const& point, bool isSideways, bool isRightToLeft, Windows::Foundation::IInspectable const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->Draw(get_abi(textRenderer), get_abi(point), isSideways, isRightToLeft, get_abi(brush)));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::Size() const
{
    Windows::Foundation::Size value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->get_Size(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::Baseline() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->get_Baseline(&value));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::SupportsSideways() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->get_SupportsSideways(&value));
    return value;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::DrawBounds() const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->get_DrawBounds(put_abi(bounds)));
    return bounds;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::BreakBefore() const
{
    Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->get_BreakBefore(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition consume_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject<D>::BreakAfter() const
{
    Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject)->get_BreakAfter(put_abi(value)));
    return value;
}

template <typename D> com_array<int32_t> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetFormatChangeIndices() const
{
    com_array<int32_t> stops;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetFormatChangeIndices(impl::put_size_abi(stops), put_abi(stops)));
    return stops;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextDirection consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::Direction() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextDirection value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_Direction(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::Direction(Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_Direction(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DefaultFontFamily() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DefaultFontFamily(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DefaultFontSize() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DefaultFontSize(&value));
    return value;
}

template <typename D> Windows::UI::Text::FontStretch consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DefaultFontStretch() const
{
    Windows::UI::Text::FontStretch value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DefaultFontStretch(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Text::FontStyle consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DefaultFontStyle() const
{
    Windows::UI::Text::FontStyle value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DefaultFontStyle(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Text::FontWeight consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DefaultFontWeight() const
{
    Windows::UI::Text::FontWeight value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DefaultFontWeight(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::IncrementalTabStop() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_IncrementalTabStop(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::IncrementalTabStop(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_IncrementalTabStop(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineSpacing() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LineSpacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineSpacing(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_LineSpacing(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineSpacingBaseline() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LineSpacingBaseline(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineSpacingBaseline(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_LineSpacingBaseline(value));
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DefaultLocaleName() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DefaultLocaleName(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::VerticalAlignment() const
{
    Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_VerticalAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::VerticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_VerticalAlignment(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HorizontalAlignment() const
{
    Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_HorizontalAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HorizontalAlignment(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_HorizontalAlignment(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingGranularity() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_TrimmingGranularity(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingGranularity(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_TrimmingGranularity(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingDelimiter() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_TrimmingDelimiter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingDelimiter(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_TrimmingDelimiter(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingDelimiterCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_TrimmingDelimiterCount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingDelimiterCount(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_TrimmingDelimiterCount(value));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasWordWrapping consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::WordWrapping() const
{
    Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_WordWrapping(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::WordWrapping(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_WordWrapping(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::Options() const
{
    Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_Options(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::Options(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_Options(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineSpacingMode() const
{
    Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LineSpacingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineSpacingMode(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_LineSpacingMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingSign() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_TrimmingSign(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::TrimmingSign(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_TrimmingSign(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::CustomTrimmingSign() const
{
    Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_CustomTrimmingSign(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::CustomTrimmingSign(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_CustomTrimmingSign(get_abi(value)));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::RequestedSize() const
{
    Windows::Foundation::Size value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_RequestedSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::RequestedSize(Windows::Foundation::Size const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_RequestedSize(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetMinimumLineLength() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetMinimumLineLength(&value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Brushes::ICanvasBrush consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetBrush(int32_t characterIndex) const
{
    Microsoft::Graphics::Canvas::Brushes::ICanvasBrush brush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetBrush(characterIndex, put_abi(brush)));
    return brush;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetCustomBrush(int32_t characterIndex) const
{
    Windows::Foundation::IInspectable brush{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetCustomBrush(characterIndex, put_abi(brush)));
    return brush;
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetFontFamily(int32_t characterIndex) const
{
    hstring fontFamily{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetFontFamily(characterIndex, put_abi(fontFamily)));
    return fontFamily;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetFontSize(int32_t characterIndex) const
{
    float fontSize{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetFontSize(characterIndex, &fontSize));
    return fontSize;
}

template <typename D> Windows::UI::Text::FontStretch consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetFontStretch(int32_t characterIndex) const
{
    Windows::UI::Text::FontStretch fontStretch{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetFontStretch(characterIndex, put_abi(fontStretch)));
    return fontStretch;
}

template <typename D> Windows::UI::Text::FontStyle consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetFontStyle(int32_t characterIndex) const
{
    Windows::UI::Text::FontStyle fontStyle{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetFontStyle(characterIndex, put_abi(fontStyle)));
    return fontStyle;
}

template <typename D> Windows::UI::Text::FontWeight consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetFontWeight(int32_t characterIndex) const
{
    Windows::UI::Text::FontWeight fontWeight{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetFontWeight(characterIndex, put_abi(fontWeight)));
    return fontWeight;
}

template <typename D> hstring consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetLocaleName(int32_t characterIndex) const
{
    hstring localeName{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetLocaleName(characterIndex, put_abi(localeName)));
    return localeName;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetStrikethrough(int32_t characterIndex) const
{
    bool hasStrikethrough{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetStrikethrough(characterIndex, &hasStrikethrough));
    return hasStrikethrough;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetUnderline(int32_t characterIndex) const
{
    bool hasUnderline{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetUnderline(characterIndex, &hasUnderline));
    return hasUnderline;
}

template <typename D> Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetInlineObject(int32_t characterIndex) const
{
    Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject inlineObject{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetInlineObject(characterIndex, put_abi(inlineObject)));
    return inlineObject;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetColor(int32_t characterIndex, int32_t characterCount, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetColor(characterIndex, characterCount, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetBrush(int32_t characterIndex, int32_t characterCount, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetBrush(characterIndex, characterCount, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetCustomBrush(int32_t characterIndex, int32_t characterCount, Windows::Foundation::IInspectable const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetCustomBrush(characterIndex, characterCount, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetFontFamily(int32_t characterIndex, int32_t characterCount, param::hstring const& fontFamily) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetFontFamily(characterIndex, characterCount, get_abi(fontFamily)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetFontSize(int32_t characterIndex, int32_t characterCount, float fontSize) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetFontSize(characterIndex, characterCount, fontSize));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetFontStretch(int32_t characterIndex, int32_t characterCount, Windows::UI::Text::FontStretch const& fontStretch) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetFontStretch(characterIndex, characterCount, get_abi(fontStretch)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetFontStyle(int32_t characterIndex, int32_t characterCount, Windows::UI::Text::FontStyle const& fontStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetFontStyle(characterIndex, characterCount, get_abi(fontStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetFontWeight(int32_t characterIndex, int32_t characterCount, Windows::UI::Text::FontWeight const& fontWeight) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetFontWeight(characterIndex, characterCount, get_abi(fontWeight)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetLocaleName(int32_t characterIndex, int32_t characterCount, param::hstring const& name) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetLocaleName(characterIndex, characterCount, get_abi(name)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetStrikethrough(int32_t characterIndex, int32_t characterCount, bool hasStrikethrough) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetStrikethrough(characterIndex, characterCount, hasStrikethrough));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetUnderline(int32_t characterIndex, int32_t characterCount, bool hasUnderline) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetUnderline(characterIndex, characterCount, hasUnderline));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetInlineObject(int32_t characterIndex, int32_t characterCount, Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const& inlineObject) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetInlineObject(characterIndex, characterCount, get_abi(inlineObject)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DrawToTextRenderer(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const& textRenderer, Windows::Foundation::Numerics::float2 const& position) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->DrawToTextRenderer(get_abi(textRenderer), get_abi(position)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DrawToTextRenderer(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const& textRenderer, float x, float y) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->DrawToTextRendererWithCoords(get_abi(textRenderer), x, y));
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasLineMetrics> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineMetrics() const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasLineMetrics> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LineMetrics(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasClusterMetrics> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::ClusterMetrics() const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasClusterMetrics> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_ClusterMetrics(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetTypography(int32_t characterIndex, int32_t characterCount, Microsoft::Graphics::Canvas::Text::CanvasTypography const& typography) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetTypography(characterIndex, characterCount, get_abi(typography)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTypography consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetTypography(int32_t characterIndex) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTypography typography{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetTypography(characterIndex, put_abi(typography)));
    return typography;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LayoutBounds() const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LayoutBounds(put_abi(bounds)));
    return bounds;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LayoutBoundsIncludingTrailingWhitespace() const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LayoutBoundsIncludingTrailingWhitespace(put_abi(bounds)));
    return bounds;
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LineCount() const
{
    int32_t lineCount{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LineCount(&lineCount));
    return lineCount;
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::MaximumBidiReorderingDepth() const
{
    int32_t depth{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_MaximumBidiReorderingDepth(&depth));
    return depth;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::DrawBounds() const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_DrawBounds(put_abi(bounds)));
    return bounds;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HitTest(Windows::Foundation::Numerics::float2 const& point) const
{
    bool isHit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->HitTest(get_abi(point), &isHit));
    return isHit;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HitTest(float x, float y) const
{
    bool isHit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->HitTestWithCoords(x, y, &isHit));
    return isHit;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HitTest(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion& textLayoutRegion) const
{
    bool isHit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->HitTestWithDescription(get_abi(point), put_abi(textLayoutRegion), &isHit));
    return isHit;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HitTest(float x, float y, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion& textLayoutRegion) const
{
    bool isHit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->HitTestWithDescriptionAndCoords(x, y, put_abi(textLayoutRegion), &isHit));
    return isHit;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HitTest(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion& textLayoutRegion, bool& trailingSideOfCharacter) const
{
    bool isHit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->HitTestWithDescriptionAndTrailingSide(get_abi(point), put_abi(textLayoutRegion), &trailingSideOfCharacter, &isHit));
    return isHit;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::HitTest(float x, float y, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion& textLayoutRegion, bool& trailingSideOfCharacter) const
{
    bool isHit{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->HitTestWithDescriptionAndCoordsAndTrailingSide(x, y, put_abi(textLayoutRegion), &trailingSideOfCharacter, &isHit));
    return isHit;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetCaretPosition(int32_t characterIndex, bool trailingSideOfCharacter) const
{
    Windows::Foundation::Numerics::float2 location{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetCaretPosition(characterIndex, trailingSideOfCharacter, put_abi(location)));
    return location;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetCaretPosition(int32_t characterIndex, bool trailingSideOfCharacter, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion& textLayoutRegion) const
{
    Windows::Foundation::Numerics::float2 location{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetCaretPositionWithDescription(characterIndex, trailingSideOfCharacter, put_abi(textLayoutRegion), put_abi(location)));
    return location;
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion> consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetCharacterRegions(int32_t characterIndex, int32_t characterCount) const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion> hitTestDescriptions;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetCharacterRegions(characterIndex, characterCount, impl::put_size_abi(hitTestDescriptions), put_abi(hitTestDescriptions)));
    return hitTestDescriptions;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetPairKerning(int32_t characterIndex) const
{
    bool hasPairKerning{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetPairKerning(characterIndex, &hasPairKerning));
    return hasPairKerning;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetPairKerning(int32_t characterIndex, int32_t characterCount, bool hasPairKerning) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetPairKerning(characterIndex, characterCount, hasPairKerning));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetLeadingCharacterSpacing(int32_t characterIndex) const
{
    float leadingSpacing{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetLeadingCharacterSpacing(characterIndex, &leadingSpacing));
    return leadingSpacing;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetTrailingCharacterSpacing(int32_t characterIndex) const
{
    float trailingSpacing{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetTrailingCharacterSpacing(characterIndex, &trailingSpacing));
    return trailingSpacing;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::GetMinimumCharacterAdvance(int32_t characterIndex) const
{
    float minimumAdvance{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->GetMinimumCharacterAdvance(characterIndex, &minimumAdvance));
    return minimumAdvance;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::SetCharacterSpacing(int32_t characterIndex, int32_t characterCount, float leadingSpacing, float trailingSpacing, float minimumAdvance) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->SetCharacterSpacing(characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::VerticalGlyphOrientation() const
{
    Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_VerticalGlyphOrientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::VerticalGlyphOrientation(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_VerticalGlyphOrientation(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::OpticalAlignment() const
{
    Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_OpticalAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::OpticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_OpticalAlignment(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LastLineWrapping() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_LastLineWrapping(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::LastLineWrapping(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->put_LastLineWrapping(value));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout<D>::Device() const
{
    Microsoft::Graphics::Canvas::CanvasDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayout)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextLayout consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory<D>::Create(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& textString, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& textFormat, float requestedWidth, float requestedHeight) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextLayout canvasTextLayout{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory)->Create(get_abi(resourceCreator), get_abi(textString), get_abi(textFormat), requestedWidth, requestedHeight, put_abi(canvasTextLayout)));
    return canvasTextLayout;
}

template <typename D> Windows::Foundation::Numerics::float3x2 consume_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics<D>::GetGlyphOrientationTransform(Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const& glyphOrientation, bool isSideways, Windows::Foundation::Numerics::float2 const& position) const
{
    Windows::Foundation::Numerics::float3x2 transform{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics)->GetGlyphOrientationTransform(get_abi(glyphOrientation), isSideways, get_abi(position), put_abi(transform)));
    return transform;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::DrawGlyphRun(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphs, bool isSideways, uint32_t bidiLevel, Windows::Foundation::IInspectable const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode, param::hstring const& localeName, param::hstring const& textString, array_view<int32_t const> clusterMapIndices, uint32_t characterIndex, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const& glyphOrientation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->DrawGlyphRun(get_abi(point), get_abi(fontFace), fontSize, glyphs.size(), get_abi(glyphs), isSideways, bidiLevel, get_abi(brush), get_abi(measuringMode), get_abi(localeName), get_abi(textString), clusterMapIndices.size(), get_abi(clusterMapIndices), characterIndex, get_abi(glyphOrientation)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::DrawStrikethrough(Windows::Foundation::Numerics::float2 const& point, float strikethroughWidth, float strikethroughThickness, float strikethroughOffset, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection, Windows::Foundation::IInspectable const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& textMeasuringMode, param::hstring const& localeName, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const& glyphOrientation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->DrawStrikethrough(get_abi(point), strikethroughWidth, strikethroughThickness, strikethroughOffset, get_abi(textDirection), get_abi(brush), get_abi(textMeasuringMode), get_abi(localeName), get_abi(glyphOrientation)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::DrawUnderline(Windows::Foundation::Numerics::float2 const& point, float underlineWidth, float underlineThickness, float underlineOffset, float runHeight, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection, Windows::Foundation::IInspectable const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& textMeasuringMode, param::hstring const& localeName, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const& glyphOrientation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->DrawUnderline(get_abi(point), underlineWidth, underlineThickness, underlineOffset, runHeight, get_abi(textDirection), get_abi(brush), get_abi(textMeasuringMode), get_abi(localeName), get_abi(glyphOrientation)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::DrawInlineObject(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const& inlineObject, bool isSideways, bool isRightToLeft, Windows::Foundation::IInspectable const& brush, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const& glyphOrientation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->DrawInlineObject(get_abi(point), get_abi(inlineObject), isSideways, isRightToLeft, get_abi(brush), get_abi(glyphOrientation)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::PixelSnappingDisabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->get_PixelSnappingDisabled(&value));
    return value;
}

template <typename D> Windows::Foundation::Numerics::float3x2 consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::Transform() const
{
    Windows::Foundation::Numerics::float3x2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->get_Transform(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer<D>::Dpi() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer)->get_Dpi(&value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters<D>::RenderingMode() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters)->get_RenderingMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextGridFit consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters<D>::GridFit() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextGridFit value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters)->get_GridFit(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters consume_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory<D>::Create(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode const& textRenderingMode, Microsoft::Graphics::Canvas::Text::CanvasTextGridFit const& gridFit) const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters textRenderingParameters{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory)->Create(get_abi(textRenderingMode), get_abi(gridFit), put_abi(textRenderingParameters)));
    return textRenderingParameters;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTypography<D>::AddFeature(Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature const& feature) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTypography)->AddFeature(get_abi(feature)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Text_ICanvasTypography<D>::AddFeature(Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const& name, uint32_t parameter) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTypography)->AddFeatureWithNameAndParameter(get_abi(name), parameter));
}

template <typename D> com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature> consume_Microsoft_Graphics_Canvas_Text_ICanvasTypography<D>::GetFeatures() const
{
    com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature> features;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Text::ICanvasTypography)->GetFeatures(impl::put_size_abi(features), put_abi(features)));
    return features;
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasFontFace> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasFontFace>
{
    int32_t WINRT_CALL GetRecommendedRenderingMode(float fontSize, float dpi, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode, void* renderingParameters, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode* renderingMode) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRecommendedRenderingMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode), float, float, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const&);
            *renderingMode = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode>(this->shim().GetRecommendedRenderingMode(fontSize, dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const*>(&renderingParameters)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetRecommendedRenderingModeWithAllOptions(float fontSize, float dpi, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode, void* renderingParameters, Windows::Foundation::Numerics::float3x2 transform, bool isSideways, Microsoft::Graphics::Canvas::CanvasAntialiasing outlineThreshold, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode* renderingMode) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRecommendedRenderingMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode), float, float, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const&, Windows::Foundation::Numerics::float3x2 const&, bool, Microsoft::Graphics::Canvas::CanvasAntialiasing const&);
            *renderingMode = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode>(this->shim().GetRecommendedRenderingMode(fontSize, dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const*>(&renderingParameters), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), isSideways, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAntialiasing const*>(&outlineThreshold)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetRecommendedGridFit(float fontSize, float dpi, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode, void* renderingParameters, Windows::Foundation::Numerics::float3x2 transform, bool isSideways, Microsoft::Graphics::Canvas::CanvasAntialiasing outlineThreshold, Microsoft::Graphics::Canvas::Text::CanvasTextGridFit* gridFit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRecommendedGridFit, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextGridFit), float, float, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const&, Windows::Foundation::Numerics::float3x2 const&, bool, Microsoft::Graphics::Canvas::CanvasAntialiasing const&);
            *gridFit = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextGridFit>(this->shim().GetRecommendedGridFit(fontSize, dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const*>(&renderingParameters), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), isSideways, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAntialiasing const*>(&outlineThreshold)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphBox(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphBox, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().GlyphBox());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SubscriptPosition(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SubscriptPosition, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().SubscriptPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SubscriptSize(Windows::Foundation::Size* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SubscriptSize, WINRT_WRAP(Windows::Foundation::Size));
            *value = detach_from<Windows::Foundation::Size>(this->shim().SubscriptSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SuperscriptPosition(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SuperscriptPosition, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().SuperscriptPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SuperscriptSize(Windows::Foundation::Size* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SuperscriptSize, WINRT_WRAP(Windows::Foundation::Size));
            *value = detach_from<Windows::Foundation::Size>(this->shim().SuperscriptSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasTypographicMetrics(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasTypographicMetrics, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasTypographicMetrics());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Ascent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Ascent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Ascent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Descent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Descent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Descent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineGap(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineGap, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LineGap());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CapHeight(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CapHeight, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().CapHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LowercaseLetterHeight(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LowercaseLetterHeight, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LowercaseLetterHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnderlinePosition(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnderlinePosition, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().UnderlinePosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnderlineThickness(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnderlineThickness, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().UnderlineThickness());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StrikethroughPosition(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StrikethroughPosition, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().StrikethroughPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StrikethroughThickness(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StrikethroughThickness, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().StrikethroughThickness());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CaretSlopeRise(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CaretSlopeRise, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().CaretSlopeRise());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CaretSlopeRun(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CaretSlopeRun, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().CaretSlopeRun());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CaretOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CaretOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().CaretOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnicodeRanges(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasUnicodeRange** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnicodeRanges, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasUnicodeRange>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().UnicodeRanges());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsMonospaced(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsMonospaced, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsMonospaced());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetVerticalGlyphVariants(uint32_t __inputElementsSize, int32_t* inputElements, uint32_t* __outputElementsSize, int32_t** outputElements) noexcept final
    {
        try
        {
            *__outputElementsSize = 0;
            *outputElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetVerticalGlyphVariants, WINRT_WRAP(com_array<int32_t>), array_view<int32_t const>);
            std::tie(*__outputElementsSize, *outputElements) = detach_abi(this->shim().GetVerticalGlyphVariants(array_view<int32_t const>(reinterpret_cast<int32_t const *>(inputElements), reinterpret_cast<int32_t const *>(inputElements) + __inputElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasVerticalGlyphVariants(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasVerticalGlyphVariants, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasVerticalGlyphVariants());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FileFormatType(Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FileFormatType, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType>(this->shim().FileFormatType());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Simulations(Microsoft::Graphics::Canvas::Text::CanvasFontSimulations* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Simulations, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontSimulations));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontSimulations>(this->shim().Simulations());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsSymbolFont(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSymbolFont, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSymbolFont());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphCount(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphCount, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().GlyphCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphIndices(uint32_t __inputElementsSize, uint32_t* inputElements, uint32_t* __outputElementsSize, int32_t** outputElements) noexcept final
    {
        try
        {
            *__outputElementsSize = 0;
            *outputElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphIndices, WINRT_WRAP(com_array<int32_t>), array_view<uint32_t const>);
            std::tie(*__outputElementsSize, *outputElements) = detach_abi(this->shim().GetGlyphIndices(array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(inputElements), reinterpret_cast<uint32_t const *>(inputElements) + __inputElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphMetrics(uint32_t __inputElementsSize, int32_t* inputElements, bool isSideways, uint32_t* __outputElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyphMetrics** outputElements) noexcept final
    {
        try
        {
            *__outputElementsSize = 0;
            *outputElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphMetrics, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics>), array_view<int32_t const>, bool);
            std::tie(*__outputElementsSize, *outputElements) = detach_abi(this->shim().GetGlyphMetrics(array_view<int32_t const>(reinterpret_cast<int32_t const *>(inputElements), reinterpret_cast<int32_t const *>(inputElements) + __inputElementsSize), isSideways));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGdiCompatibleGlyphMetrics(float fontSize, float dpi, Windows::Foundation::Numerics::float3x2 transform, bool useGdiNatural, uint32_t __inputElementsSize, int32_t* inputElements, bool isSideways, uint32_t* __outputElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyphMetrics** outputElements) noexcept final
    {
        try
        {
            *__outputElementsSize = 0;
            *outputElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGdiCompatibleGlyphMetrics, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics>), float, float, Windows::Foundation::Numerics::float3x2 const&, bool, array_view<int32_t const>, bool);
            std::tie(*__outputElementsSize, *outputElements) = detach_abi(this->shim().GetGdiCompatibleGlyphMetrics(fontSize, dpi, *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), useGdiNatural, array_view<int32_t const>(reinterpret_cast<int32_t const *>(inputElements), reinterpret_cast<int32_t const *>(inputElements) + __inputElementsSize), isSideways));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Weight(struct struct_Windows_UI_Text_FontWeight* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Weight, WINRT_WRAP(Windows::UI::Text::FontWeight));
            *value = detach_from<Windows::UI::Text::FontWeight>(this->shim().Weight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Stretch(Windows::UI::Text::FontStretch* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stretch, WINRT_WRAP(Windows::UI::Text::FontStretch));
            *value = detach_from<Windows::UI::Text::FontStretch>(this->shim().Stretch());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Style(Windows::UI::Text::FontStyle* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Style, WINRT_WRAP(Windows::UI::Text::FontStyle));
            *value = detach_from<Windows::UI::Text::FontStyle>(this->shim().Style());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FamilyNames(void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FamilyNames, WINRT_WRAP(Windows::Foundation::Collections::IMapView<hstring, hstring>));
            *values = detach_from<Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().FamilyNames());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FaceNames(void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FaceNames, WINRT_WRAP(Windows::Foundation::Collections::IMapView<hstring, hstring>));
            *values = detach_from<Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().FaceNames());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetInformationalStrings(Microsoft::Graphics::Canvas::Text::CanvasFontInformation fontInformation, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetInformationalStrings, WINRT_WRAP(Windows::Foundation::Collections::IMapView<hstring, hstring>), Microsoft::Graphics::Canvas::Text::CanvasFontInformation const&);
            *values = detach_from<Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().GetInformationalStrings(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontInformation const*>(&fontInformation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HasCharacter(uint32_t unicodeValue, bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasCharacter, WINRT_WRAP(bool), uint32_t);
            *value = detach_from<bool>(this->shim().HasCharacter(unicodeValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphRunBounds(void* drawingSession, Windows::Foundation::Numerics::float2 point, float fontSize, uint32_t __glyphsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphs, bool isSideways, uint32_t bidiLevel, Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphRunBounds, WINRT_WRAP(Windows::Foundation::Rect), Microsoft::Graphics::Canvas::CanvasDrawingSession const&, Windows::Foundation::Numerics::float2 const&, float, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, bool, uint32_t);
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().GetGlyphRunBounds(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&drawingSession), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs) + __glyphsSize), isSideways, bidiLevel));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphRunBoundsWithMeasuringMode(void* drawingSession, Windows::Foundation::Numerics::float2 point, float fontSize, uint32_t __glyphsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphs, bool isSideways, uint32_t bidiLevel, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode, Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphRunBounds, WINRT_WRAP(Windows::Foundation::Rect), Microsoft::Graphics::Canvas::CanvasDrawingSession const&, Windows::Foundation::Numerics::float2 const&, float, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, bool, uint32_t, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&);
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().GetGlyphRunBounds(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDrawingSession const*>(&drawingSession), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs) + __glyphsSize), isSideways, bidiLevel, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Panose(uint32_t* __valueElementsSize, uint8_t** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Panose, WINRT_WRAP(com_array<uint8_t>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().Panose());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSupportedTypographicFeatureNames(struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, uint32_t* __valueElementsSize, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSupportedTypographicFeatureNames, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName>), Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetSupportedTypographicFeatureNames(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSupportedTypographicFeatureNamesWithLocale(struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, void* locale, uint32_t* __valueElementsSize, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSupportedTypographicFeatureNames, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName>), Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, hstring const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetSupportedTypographicFeatureNames(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), *reinterpret_cast<hstring const*>(&locale)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTypographicFeatureGlyphSupport(struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName typographicFeatureName, uint32_t __glyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphsElements, uint32_t* __valueElementsSize, bool** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTypographicFeatureGlyphSupport, WINRT_WRAP(com_array<bool>), Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const&, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetTypographicFeatureGlyphSupport(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const*>(&typographicFeatureName), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphsElements) + __glyphsElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTypographicFeatureGlyphSupportWithLocale(struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName typographicFeatureName, uint32_t __glyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphsElements, void* locale, uint32_t* __valueElementsSize, bool** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTypographicFeatureGlyphSupport, WINRT_WRAP(com_array<bool>), Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const&, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, hstring const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetTypographicFeatureGlyphSupport(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const*>(&typographicFeatureName), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphsElements) + __glyphsElementsSize), *reinterpret_cast<hstring const*>(&locale)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasFontSet> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasFontSet>
{
    int32_t WINRT_CALL get_Fonts(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Fonts, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Microsoft::Graphics::Canvas::Text::CanvasFontFace>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Microsoft::Graphics::Canvas::Text::CanvasFontFace>>(this->shim().Fonts());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL TryFindFontFace(void* fontFace, int32_t* index, bool* succeeded) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TryFindFontFace, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, int32_t&);
            *succeeded = detach_from<bool>(this->shim().TryFindFontFace(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), *index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetMatchingFontsFromProperties(uint32_t __propertyElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasFontProperty* propertyElements, void** matchingFonts) noexcept final
    {
        try
        {
            *matchingFonts = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetMatchingFonts, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontSet), array_view<Microsoft::Graphics::Canvas::Text::CanvasFontProperty const>);
            *matchingFonts = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontSet>(this->shim().GetMatchingFonts(array_view<Microsoft::Graphics::Canvas::Text::CanvasFontProperty const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontProperty const *>(propertyElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontProperty const *>(propertyElements) + __propertyElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetMatchingFontsFromWwsFamily(void* familyName, struct struct_Windows_UI_Text_FontWeight weight, Windows::UI::Text::FontStretch stretch, Windows::UI::Text::FontStyle style, void** matchingFonts) noexcept final
    {
        try
        {
            *matchingFonts = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetMatchingFonts, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontSet), hstring const&, Windows::UI::Text::FontWeight const&, Windows::UI::Text::FontStretch const&, Windows::UI::Text::FontStyle const&);
            *matchingFonts = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontSet>(this->shim().GetMatchingFonts(*reinterpret_cast<hstring const*>(&familyName), *reinterpret_cast<Windows::UI::Text::FontWeight const*>(&weight), *reinterpret_cast<Windows::UI::Text::FontStretch const*>(&stretch), *reinterpret_cast<Windows::UI::Text::FontStyle const*>(&style)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CountFontsMatchingProperty(struct struct_Microsoft_Graphics_Canvas_Text_CanvasFontProperty property, uint32_t* count) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CountFontsMatchingProperty, WINRT_WRAP(uint32_t), Microsoft::Graphics::Canvas::Text::CanvasFontProperty const&);
            *count = detach_from<uint32_t>(this->shim().CountFontsMatchingProperty(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontProperty const*>(&property)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPropertyValuesFromIndex(uint32_t fontIndex, Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPropertyValues, WINRT_WRAP(Windows::Foundation::Collections::IMapView<hstring, hstring>), uint32_t, Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const&);
            *values = detach_from<Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().GetPropertyValues(fontIndex, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const*>(&propertyIdentifier)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPropertyValuesFromIdentifier(Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier, void* preferredLocaleNames, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasFontProperty** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPropertyValues, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasFontProperty>), Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const&, hstring const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetPropertyValues(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const*>(&propertyIdentifier), *reinterpret_cast<hstring const*>(&preferredLocaleNames)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPropertyValues(Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasFontProperty** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPropertyValues, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasFontProperty>), Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetPropertyValues(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier const*>(&propertyIdentifier)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory>
{
    int32_t WINRT_CALL Create(void* uri, void** fontSet) noexcept final
    {
        try
        {
            *fontSet = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontSet), Windows::Foundation::Uri const&);
            *fontSet = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontSet>(this->shim().Create(*reinterpret_cast<Windows::Foundation::Uri const*>(&uri)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics>
{
    int32_t WINRT_CALL GetSystemFontSet(void** fontSet) noexcept final
    {
        try
        {
            *fontSet = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSystemFontSet, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontSet));
            *fontSet = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontSet>(this->shim().GetSystemFontSet());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution>
{};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory>
{
    int32_t WINRT_CALL Create(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod method, void** canvasNumberSubstitution) noexcept final
    {
        try
        {
            *canvasNumberSubstitution = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution), Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const&);
            *canvasNumberSubstitution = detach_from<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const*>(&method)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithLocaleAndIgnoreOverrides(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod method, void* localeName, bool ignoreEnvironmentOverrides, void** canvasNumberSubstitution) noexcept final
    {
        try
        {
            *canvasNumberSubstitution = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithLocaleAndIgnoreOverrides, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution), Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const&, hstring const&, bool);
            *canvasNumberSubstitution = detach_from<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>(this->shim().CreateWithLocaleAndIgnoreOverrides(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const*>(&method), *reinterpret_cast<hstring const*>(&localeName), ignoreEnvironmentOverrides));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasScaledFont> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasScaledFont>
{
    int32_t WINRT_CALL get_FontFace(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontFace, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasFontFace));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasFontFace>(this->shim().FontFace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScaleFactor(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScaleFactor, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().ScaleFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer>
{
    int32_t WINRT_CALL GetFontsUsingSystemFontSet(void* textFormat, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFonts, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>>), Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>>>(this->shim().GetFonts(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&textFormat)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFonts(void* textFormat, void* fontSet, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFonts, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>>), Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&, Microsoft::Graphics::Canvas::Text::CanvasFontSet const&);
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasScaledFont>>>(this->shim().GetFonts(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&textFormat), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontSet const*>(&fontSet)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBidi(void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBidi, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>>));
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>>>(this->shim().GetBidi());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBidiWithLocale(void* locale, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBidi, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>>), hstring const&);
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>>>(this->shim().GetBidi(*reinterpret_cast<hstring const*>(&locale)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBreakpoints(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBreakpoint** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBreakpoints, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetBreakpoints());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBreakpointsWithLocale(void* locale, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBreakpoint** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBreakpoints, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>), hstring const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetBreakpoints(*reinterpret_cast<hstring const*>(&locale)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetNumberSubstitutions(void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetNumberSubstitutions, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>>));
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>>>(this->shim().GetNumberSubstitutions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetScript(void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetScript, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>>));
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>>>(this->shim().GetScript());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetScriptWithLocale(void* locale, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetScript, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>>), hstring const&);
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>>>(this->shim().GetScript(*reinterpret_cast<hstring const*>(&locale)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphOrientations(void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphOrientations, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>>));
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>>>(this->shim().GetGlyphOrientations());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphOrientationsWithLocale(void* locale, void** values) noexcept final
    {
        try
        {
            *values = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphOrientations, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>>), hstring const&);
            *values = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>>>(this->shim().GetGlyphOrientations(*reinterpret_cast<hstring const*>(&locale)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetScriptProperties(struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript analyzedScript, struct struct_Microsoft_Graphics_Canvas_Text_CanvasScriptProperties* scriptProperties) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetScriptProperties, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasScriptProperties), Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&);
            *scriptProperties = detach_from<Microsoft::Graphics::Canvas::Text::CanvasScriptProperties>(this->shim().GetScriptProperties(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&analyzedScript)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphs(struct struct_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange characterRange, void* fontFace, float fontSize, bool isSideways, bool isRightToLeft, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphs, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph>), Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, bool, bool, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetGlyphs(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const*>(&characterRange), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, isSideways, isRightToLeft, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetGlyphsWithAllOptions(struct struct_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange characterRange, void* fontFace, float fontSize, bool isSideways, bool isRightToLeft, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, void* locale, void* numberSubstitution, void* typographyRanges, uint32_t* __clusterMapIndicesElementsSize, int32_t** clusterMapIndicesElements, uint32_t* __isShapedAloneGlyphsElementsSize, bool** isShapedAloneGlyphsElements, uint32_t* __glyphShapingResultsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyphShaping** glyphShapingResultsElements, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph** valueElements) noexcept final
    {
        try
        {
            *__clusterMapIndicesElementsSize = 0;
            *clusterMapIndicesElements = nullptr;
            *__isShapedAloneGlyphsElementsSize = 0;
            *isShapedAloneGlyphsElements = nullptr;
            *__glyphShapingResultsElementsSize = 0;
            *glyphShapingResultsElements = nullptr;
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphs, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph>), Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, bool, bool, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, hstring const&, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const&, Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasTypography>> const&, com_array<int32_t>&, com_array<bool>&, com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping>&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetGlyphs(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const*>(&characterRange), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, isSideways, isRightToLeft, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), *reinterpret_cast<hstring const*>(&locale), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const*>(&numberSubstitution), *reinterpret_cast<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IKeyValuePair<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange, Microsoft::Graphics::Canvas::Text::CanvasTypography>> const*>(&typographyRanges), detach_abi<int32_t>(__clusterMapIndicesElementsSize, clusterMapIndicesElements), detach_abi<bool>(__isShapedAloneGlyphsElementsSize, isShapedAloneGlyphsElements), detach_abi<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping>(__glyphShapingResultsElementsSize, glyphShapingResultsElements)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetJustificationOpportunities(struct struct_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange characterRange, void* fontFace, float fontSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, uint32_t __clusterMapIndicesElementsSize, int32_t* clusterMapIndicesElements, uint32_t __glyphShapingResultsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyphShaping* glyphShapingResultsElements, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasJustificationOpportunity** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetJustificationOpportunities, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity>), Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, array_view<int32_t const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const>);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetJustificationOpportunities(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasCharacterRange const*>(&characterRange), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), array_view<int32_t const>(reinterpret_cast<int32_t const *>(clusterMapIndicesElements), reinterpret_cast<int32_t const *>(clusterMapIndicesElements) + __clusterMapIndicesElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const *>(glyphShapingResultsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const *>(glyphShapingResultsElements) + __glyphShapingResultsElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ApplyJustificationOpportunities(float lineWidth, uint32_t __justificationOpportunitiesElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasJustificationOpportunity* justificationOpportunitiesElements, uint32_t __sourceGlyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* sourceGlyphsElements, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ApplyJustificationOpportunities, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph>), float, array_view<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().ApplyJustificationOpportunities(lineWidth, array_view<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity const *>(justificationOpportunitiesElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity const *>(justificationOpportunitiesElements) + __justificationOpportunitiesElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(sourceGlyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(sourceGlyphsElements) + __sourceGlyphsElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL AddGlyphsAfterJustification(void* fontFace, float fontSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, uint32_t __clusterMapIndicesElementsSize, int32_t* clusterMapIndicesElements, uint32_t __originalGlyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* originalGlyphsElements, uint32_t __justifiedGlyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* justifiedGlyphsElements, uint32_t __glyphShapingResultsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyphShaping* glyphShapingResultsElements, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AddGlyphsAfterJustification, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph>), Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, array_view<int32_t const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const>);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().AddGlyphsAfterJustification(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), array_view<int32_t const>(reinterpret_cast<int32_t const *>(clusterMapIndicesElements), reinterpret_cast<int32_t const *>(clusterMapIndicesElements) + __clusterMapIndicesElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(originalGlyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(originalGlyphsElements) + __originalGlyphsElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(justifiedGlyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(justifiedGlyphsElements) + __justifiedGlyphsElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const *>(glyphShapingResultsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const *>(glyphShapingResultsElements) + __glyphShapingResultsElementsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL AddGlyphsAfterJustificationWithClusterMap(void* fontFace, float fontSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript script, uint32_t __clusterMapIndicesElementsSize, int32_t* clusterMapIndicesElements, uint32_t __originalGlyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* originalGlyphsElements, uint32_t __justifiedGlyphsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* justifiedGlyphsElements, uint32_t __glyphShapingResultsElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyphShaping* glyphShapingResultsElements, uint32_t* __outputClusterMapIndicesElementsSize, int32_t** outputClusterMapIndicesElements, uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph** valueElements) noexcept final
    {
        try
        {
            *__outputClusterMapIndicesElementsSize = 0;
            *outputClusterMapIndicesElements = nullptr;
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AddGlyphsAfterJustification, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasGlyph>), Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const&, array_view<int32_t const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const>, com_array<int32_t>&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().AddGlyphsAfterJustification(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript const*>(&script), array_view<int32_t const>(reinterpret_cast<int32_t const *>(clusterMapIndicesElements), reinterpret_cast<int32_t const *>(clusterMapIndicesElements) + __clusterMapIndicesElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(originalGlyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(originalGlyphsElements) + __originalGlyphsElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(justifiedGlyphsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(justifiedGlyphsElements) + __justifiedGlyphsElementsSize), array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const *>(glyphShapingResultsElements), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping const *>(glyphShapingResultsElements) + __glyphShapingResultsElementsSize), detach_abi<int32_t>(__outputClusterMapIndicesElementsSize, outputClusterMapIndicesElements)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory>
{
    int32_t WINRT_CALL Create(void* text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection, void** canvasTextAnalyzer) noexcept final
    {
        try
        {
            *canvasTextAnalyzer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer), hstring const&, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&);
            *canvasTextAnalyzer = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer>(this->shim().Create(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&textDirection)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(void* text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection, void* numberSubstitution, Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation verticalGlyphOrientation, uint32_t bidiLevel, void** canvasTextAnalyzer) noexcept final
    {
        try
        {
            *canvasTextAnalyzer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer), hstring const&, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const&, Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const&, uint32_t);
            *canvasTextAnalyzer = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer>(this->shim().CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&textDirection), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const*>(&numberSubstitution), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const*>(&verticalGlyphOrientation), bidiLevel));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithOptions(void* text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection, void* options, void** canvasTextAnalyzer) noexcept final
    {
        try
        {
            *canvasTextAnalyzer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithOptions, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer), hstring const&, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions const&);
            *canvasTextAnalyzer = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer>(this->shim().CreateWithOptions(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&textDirection), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions>
{
    int32_t WINRT_CALL GetLocaleName(int32_t characterIndex, int32_t* characterCount, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetLocaleName, WINRT_WRAP(hstring), int32_t, int32_t&);
            *value = detach_from<hstring>(this->shim().GetLocaleName(characterIndex, *characterCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetNumberSubstitution(int32_t characterIndex, int32_t* characterCount, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetNumberSubstitution, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution), int32_t, int32_t&);
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution>(this->shim().GetNumberSubstitution(characterIndex, *characterCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetVerticalGlyphOrientation(int32_t characterIndex, int32_t* characterCount, Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetVerticalGlyphOrientation, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation), int32_t, int32_t&);
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation>(this->shim().GetVerticalGlyphOrientation(characterIndex, *characterCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBidiLevel(int32_t characterIndex, int32_t* characterCount, uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBidiLevel, WINRT_WRAP(uint32_t), int32_t, int32_t&);
            *value = detach_from<uint32_t>(this->shim().GetBidiLevel(characterIndex, *characterCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextFormat> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextFormat>
{
    int32_t WINRT_CALL get_Direction(Microsoft::Graphics::Canvas::Text::CanvasTextDirection* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Direction, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextDirection));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextDirection>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Direction(Microsoft::Graphics::Canvas::Text::CanvasTextDirection value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Direction, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&);
            this->shim().Direction(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontFamily(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontFamily, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().FontFamily());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontFamily(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontFamily, WINRT_WRAP(void), hstring const&);
            this->shim().FontFamily(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontSize(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontSize, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().FontSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontSize(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontSize, WINRT_WRAP(void), float);
            this->shim().FontSize(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontStretch(Windows::UI::Text::FontStretch* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStretch, WINRT_WRAP(Windows::UI::Text::FontStretch));
            *value = detach_from<Windows::UI::Text::FontStretch>(this->shim().FontStretch());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontStretch(Windows::UI::Text::FontStretch value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStretch, WINRT_WRAP(void), Windows::UI::Text::FontStretch const&);
            this->shim().FontStretch(*reinterpret_cast<Windows::UI::Text::FontStretch const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStyle, WINRT_WRAP(Windows::UI::Text::FontStyle));
            *value = detach_from<Windows::UI::Text::FontStyle>(this->shim().FontStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontStyle(Windows::UI::Text::FontStyle value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStyle, WINRT_WRAP(void), Windows::UI::Text::FontStyle const&);
            this->shim().FontStyle(*reinterpret_cast<Windows::UI::Text::FontStyle const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontWeight, WINRT_WRAP(Windows::UI::Text::FontWeight));
            *value = detach_from<Windows::UI::Text::FontWeight>(this->shim().FontWeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontWeight, WINRT_WRAP(void), Windows::UI::Text::FontWeight const&);
            this->shim().FontWeight(*reinterpret_cast<Windows::UI::Text::FontWeight const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IncrementalTabStop(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IncrementalTabStop, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().IncrementalTabStop());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IncrementalTabStop(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IncrementalTabStop, WINRT_WRAP(void), float);
            this->shim().IncrementalTabStop(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineSpacing(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacing, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LineSpacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineSpacing(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacing, WINRT_WRAP(void), float);
            this->shim().LineSpacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineSpacingBaseline(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingBaseline, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LineSpacingBaseline());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineSpacingBaseline(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingBaseline, WINRT_WRAP(void), float);
            this->shim().LineSpacingBaseline(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LocaleName(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LocaleName, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().LocaleName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LocaleName(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LocaleName, WINRT_WRAP(void), hstring const&);
            this->shim().LocaleName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAlignment, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment>(this->shim().VerticalAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAlignment, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment const&);
            this->shim().VerticalAlignment(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalAlignment(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAlignment, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment>(this->shim().HorizontalAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalAlignment(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAlignment, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment const&);
            this->shim().HorizontalAlignment(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingGranularity(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingGranularity, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity>(this->shim().TrimmingGranularity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingGranularity(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingGranularity, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity const&);
            this->shim().TrimmingGranularity(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingDelimiter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiter, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().TrimmingDelimiter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingDelimiter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiter, WINRT_WRAP(void), hstring const&);
            this->shim().TrimmingDelimiter(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingDelimiterCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiterCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().TrimmingDelimiterCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingDelimiterCount(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiterCount, WINRT_WRAP(void), int32_t);
            this->shim().TrimmingDelimiterCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WordWrapping(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WordWrapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasWordWrapping>(this->shim().WordWrapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_WordWrapping(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WordWrapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasWordWrapping const&);
            this->shim().WordWrapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasWordWrapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Options(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Options, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions>(this->shim().Options());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Options(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Options, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions const&);
            this->shim().Options(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalGlyphOrientation(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalGlyphOrientation, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation>(this->shim().VerticalGlyphOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalGlyphOrientation(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalGlyphOrientation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const&);
            this->shim().VerticalGlyphOrientation(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OpticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpticalAlignment, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment>(this->shim().OpticalAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OpticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpticalAlignment, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment const&);
            this->shim().OpticalAlignment(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LastLineWrapping(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LastLineWrapping, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().LastLineWrapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LastLineWrapping(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LastLineWrapping, WINRT_WRAP(void), bool);
            this->shim().LastLineWrapping(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineSpacingMode(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode>(this->shim().LineSpacingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineSpacingMode(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode const&);
            this->shim().LineSpacingMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingSign(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingSign, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign>(this->shim().TrimmingSign());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingSign(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingSign, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign const&);
            this->shim().TrimmingSign(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CustomTrimmingSign(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CustomTrimmingSign, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject>(this->shim().CustomTrimmingSign());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CustomTrimmingSign(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CustomTrimmingSign, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const&);
            this->shim().CustomTrimmingSign(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics>
{
    int32_t WINRT_CALL GetSystemFontFamilies(uint32_t* __valueElementsSize, void*** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSystemFontFamilies, WINRT_WRAP(com_array<hstring>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetSystemFontFamilies());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSystemFontFamiliesFromLocaleList(void* localeList, uint32_t* __valueElementsSize, void*** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSystemFontFamilies, WINRT_WRAP(com_array<hstring>), Windows::Foundation::Collections::IVectorView<hstring> const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetSystemFontFamilies(*reinterpret_cast<Windows::Foundation::Collections::IVectorView<hstring> const*>(&localeList)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject>
{
    int32_t WINRT_CALL Draw(void* textRenderer, Windows::Foundation::Numerics::float2 point, bool isSideways, bool isRightToLeft, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const&, Windows::Foundation::Numerics::float2 const&, bool, bool, Windows::Foundation::IInspectable const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const*>(&textRenderer), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), isSideways, isRightToLeft, *reinterpret_cast<Windows::Foundation::IInspectable const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Size(Windows::Foundation::Size* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(Windows::Foundation::Size));
            *value = detach_from<Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Baseline(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Baseline, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Baseline());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SupportsSideways(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SupportsSideways, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().SupportsSideways());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DrawBounds(Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawBounds, WINRT_WRAP(Windows::Foundation::Rect));
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().DrawBounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BreakBefore(Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BreakBefore, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition>(this->shim().BreakBefore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BreakAfter(Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BreakAfter, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition>(this->shim().BreakAfter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextLayout> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextLayout>
{
    int32_t WINRT_CALL GetFormatChangeIndices(uint32_t* __stopsSize, int32_t** stops) noexcept final
    {
        try
        {
            *__stopsSize = 0;
            *stops = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFormatChangeIndices, WINRT_WRAP(com_array<int32_t>));
            std::tie(*__stopsSize, *stops) = detach_abi(this->shim().GetFormatChangeIndices());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Direction(Microsoft::Graphics::Canvas::Text::CanvasTextDirection* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Direction, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextDirection));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextDirection>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Direction(Microsoft::Graphics::Canvas::Text::CanvasTextDirection value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Direction, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&);
            this->shim().Direction(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DefaultFontFamily(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DefaultFontFamily, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().DefaultFontFamily());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DefaultFontSize(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DefaultFontSize, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().DefaultFontSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DefaultFontStretch(Windows::UI::Text::FontStretch* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DefaultFontStretch, WINRT_WRAP(Windows::UI::Text::FontStretch));
            *value = detach_from<Windows::UI::Text::FontStretch>(this->shim().DefaultFontStretch());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DefaultFontStyle(Windows::UI::Text::FontStyle* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DefaultFontStyle, WINRT_WRAP(Windows::UI::Text::FontStyle));
            *value = detach_from<Windows::UI::Text::FontStyle>(this->shim().DefaultFontStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DefaultFontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DefaultFontWeight, WINRT_WRAP(Windows::UI::Text::FontWeight));
            *value = detach_from<Windows::UI::Text::FontWeight>(this->shim().DefaultFontWeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IncrementalTabStop(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IncrementalTabStop, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().IncrementalTabStop());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IncrementalTabStop(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IncrementalTabStop, WINRT_WRAP(void), float);
            this->shim().IncrementalTabStop(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineSpacing(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacing, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LineSpacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineSpacing(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacing, WINRT_WRAP(void), float);
            this->shim().LineSpacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineSpacingBaseline(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingBaseline, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LineSpacingBaseline());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineSpacingBaseline(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingBaseline, WINRT_WRAP(void), float);
            this->shim().LineSpacingBaseline(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DefaultLocaleName(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DefaultLocaleName, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().DefaultLocaleName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAlignment, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment>(this->shim().VerticalAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAlignment, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment const&);
            this->shim().VerticalAlignment(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalAlignment(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAlignment, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment>(this->shim().HorizontalAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalAlignment(Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAlignment, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment const&);
            this->shim().HorizontalAlignment(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingGranularity(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingGranularity, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity>(this->shim().TrimmingGranularity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingGranularity(Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingGranularity, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity const&);
            this->shim().TrimmingGranularity(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingDelimiter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiter, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().TrimmingDelimiter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingDelimiter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiter, WINRT_WRAP(void), hstring const&);
            this->shim().TrimmingDelimiter(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingDelimiterCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiterCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().TrimmingDelimiterCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingDelimiterCount(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingDelimiterCount, WINRT_WRAP(void), int32_t);
            this->shim().TrimmingDelimiterCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WordWrapping(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WordWrapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasWordWrapping>(this->shim().WordWrapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_WordWrapping(Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WordWrapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasWordWrapping const&);
            this->shim().WordWrapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasWordWrapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Options(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Options, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions>(this->shim().Options());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Options(Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Options, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions const&);
            this->shim().Options(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineSpacingMode(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode>(this->shim().LineSpacingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineSpacingMode(Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineSpacingMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode const&);
            this->shim().LineSpacingMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TrimmingSign(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingSign, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign>(this->shim().TrimmingSign());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TrimmingSign(Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TrimmingSign, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign const&);
            this->shim().TrimmingSign(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CustomTrimmingSign(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CustomTrimmingSign, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject>(this->shim().CustomTrimmingSign());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CustomTrimmingSign(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CustomTrimmingSign, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const&);
            this->shim().CustomTrimmingSign(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RequestedSize(Windows::Foundation::Size* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RequestedSize, WINRT_WRAP(Windows::Foundation::Size));
            *value = detach_from<Windows::Foundation::Size>(this->shim().RequestedSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RequestedSize(Windows::Foundation::Size value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RequestedSize, WINRT_WRAP(void), Windows::Foundation::Size const&);
            this->shim().RequestedSize(*reinterpret_cast<Windows::Foundation::Size const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetMinimumLineLength(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetMinimumLineLength, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().GetMinimumLineLength());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBrush(int32_t characterIndex, void** brush) noexcept final
    {
        try
        {
            *brush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBrush, WINRT_WRAP(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush), int32_t);
            *brush = detach_from<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush>(this->shim().GetBrush(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetCustomBrush(int32_t characterIndex, void** brush) noexcept final
    {
        try
        {
            *brush = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCustomBrush, WINRT_WRAP(Windows::Foundation::IInspectable), int32_t);
            *brush = detach_from<Windows::Foundation::IInspectable>(this->shim().GetCustomBrush(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFontFamily(int32_t characterIndex, void** fontFamily) noexcept final
    {
        try
        {
            *fontFamily = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFontFamily, WINRT_WRAP(hstring), int32_t);
            *fontFamily = detach_from<hstring>(this->shim().GetFontFamily(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFontSize(int32_t characterIndex, float* fontSize) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFontSize, WINRT_WRAP(float), int32_t);
            *fontSize = detach_from<float>(this->shim().GetFontSize(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFontStretch(int32_t characterIndex, Windows::UI::Text::FontStretch* fontStretch) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFontStretch, WINRT_WRAP(Windows::UI::Text::FontStretch), int32_t);
            *fontStretch = detach_from<Windows::UI::Text::FontStretch>(this->shim().GetFontStretch(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFontStyle(int32_t characterIndex, Windows::UI::Text::FontStyle* fontStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFontStyle, WINRT_WRAP(Windows::UI::Text::FontStyle), int32_t);
            *fontStyle = detach_from<Windows::UI::Text::FontStyle>(this->shim().GetFontStyle(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFontWeight(int32_t characterIndex, struct struct_Windows_UI_Text_FontWeight* fontWeight) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFontWeight, WINRT_WRAP(Windows::UI::Text::FontWeight), int32_t);
            *fontWeight = detach_from<Windows::UI::Text::FontWeight>(this->shim().GetFontWeight(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetLocaleName(int32_t characterIndex, void** localeName) noexcept final
    {
        try
        {
            *localeName = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetLocaleName, WINRT_WRAP(hstring), int32_t);
            *localeName = detach_from<hstring>(this->shim().GetLocaleName(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetStrikethrough(int32_t characterIndex, bool* hasStrikethrough) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetStrikethrough, WINRT_WRAP(bool), int32_t);
            *hasStrikethrough = detach_from<bool>(this->shim().GetStrikethrough(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetUnderline(int32_t characterIndex, bool* hasUnderline) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetUnderline, WINRT_WRAP(bool), int32_t);
            *hasUnderline = detach_from<bool>(this->shim().GetUnderline(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetInlineObject(int32_t characterIndex, void** inlineObject) noexcept final
    {
        try
        {
            *inlineObject = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetInlineObject, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject), int32_t);
            *inlineObject = detach_from<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject>(this->shim().GetInlineObject(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetColor(int32_t characterIndex, int32_t characterCount, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetColor, WINRT_WRAP(void), int32_t, int32_t, Windows::UI::Color const&);
            this->shim().SetColor(characterIndex, characterCount, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetBrush(int32_t characterIndex, int32_t characterCount, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetBrush, WINRT_WRAP(void), int32_t, int32_t, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().SetBrush(characterIndex, characterCount, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetCustomBrush(int32_t characterIndex, int32_t characterCount, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetCustomBrush, WINRT_WRAP(void), int32_t, int32_t, Windows::Foundation::IInspectable const&);
            this->shim().SetCustomBrush(characterIndex, characterCount, *reinterpret_cast<Windows::Foundation::IInspectable const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFontFamily(int32_t characterIndex, int32_t characterCount, void* fontFamily) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFontFamily, WINRT_WRAP(void), int32_t, int32_t, hstring const&);
            this->shim().SetFontFamily(characterIndex, characterCount, *reinterpret_cast<hstring const*>(&fontFamily));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFontSize(int32_t characterIndex, int32_t characterCount, float fontSize) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFontSize, WINRT_WRAP(void), int32_t, int32_t, float);
            this->shim().SetFontSize(characterIndex, characterCount, fontSize);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFontStretch(int32_t characterIndex, int32_t characterCount, Windows::UI::Text::FontStretch fontStretch) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFontStretch, WINRT_WRAP(void), int32_t, int32_t, Windows::UI::Text::FontStretch const&);
            this->shim().SetFontStretch(characterIndex, characterCount, *reinterpret_cast<Windows::UI::Text::FontStretch const*>(&fontStretch));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFontStyle(int32_t characterIndex, int32_t characterCount, Windows::UI::Text::FontStyle fontStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFontStyle, WINRT_WRAP(void), int32_t, int32_t, Windows::UI::Text::FontStyle const&);
            this->shim().SetFontStyle(characterIndex, characterCount, *reinterpret_cast<Windows::UI::Text::FontStyle const*>(&fontStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetFontWeight(int32_t characterIndex, int32_t characterCount, struct struct_Windows_UI_Text_FontWeight fontWeight) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetFontWeight, WINRT_WRAP(void), int32_t, int32_t, Windows::UI::Text::FontWeight const&);
            this->shim().SetFontWeight(characterIndex, characterCount, *reinterpret_cast<Windows::UI::Text::FontWeight const*>(&fontWeight));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetLocaleName(int32_t characterIndex, int32_t characterCount, void* name) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetLocaleName, WINRT_WRAP(void), int32_t, int32_t, hstring const&);
            this->shim().SetLocaleName(characterIndex, characterCount, *reinterpret_cast<hstring const*>(&name));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetStrikethrough(int32_t characterIndex, int32_t characterCount, bool hasStrikethrough) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetStrikethrough, WINRT_WRAP(void), int32_t, int32_t, bool);
            this->shim().SetStrikethrough(characterIndex, characterCount, hasStrikethrough);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetUnderline(int32_t characterIndex, int32_t characterCount, bool hasUnderline) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetUnderline, WINRT_WRAP(void), int32_t, int32_t, bool);
            this->shim().SetUnderline(characterIndex, characterCount, hasUnderline);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetInlineObject(int32_t characterIndex, int32_t characterCount, void* inlineObject) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetInlineObject, WINRT_WRAP(void), int32_t, int32_t, Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const&);
            this->shim().SetInlineObject(characterIndex, characterCount, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const*>(&inlineObject));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawToTextRenderer(void* textRenderer, Windows::Foundation::Numerics::float2 position) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawToTextRenderer, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const&, Windows::Foundation::Numerics::float2 const&);
            this->shim().DrawToTextRenderer(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const*>(&textRenderer), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&position));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawToTextRendererWithCoords(void* textRenderer, float x, float y) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawToTextRenderer, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const&, float, float);
            this->shim().DrawToTextRenderer(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer const*>(&textRenderer), x, y);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineMetrics(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasLineMetrics** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineMetrics, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasLineMetrics>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().LineMetrics());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClusterMetrics(uint32_t* __valueElementsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasClusterMetrics** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClusterMetrics, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasClusterMetrics>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().ClusterMetrics());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetTypography(int32_t characterIndex, int32_t characterCount, void* typography) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetTypography, WINRT_WRAP(void), int32_t, int32_t, Microsoft::Graphics::Canvas::Text::CanvasTypography const&);
            this->shim().SetTypography(characterIndex, characterCount, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTypography const*>(&typography));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTypography(int32_t characterIndex, void** typography) noexcept final
    {
        try
        {
            *typography = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTypography, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTypography), int32_t);
            *typography = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTypography>(this->shim().GetTypography(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LayoutBounds(Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutBounds, WINRT_WRAP(Windows::Foundation::Rect));
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().LayoutBounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LayoutBoundsIncludingTrailingWhitespace(Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutBoundsIncludingTrailingWhitespace, WINRT_WRAP(Windows::Foundation::Rect));
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().LayoutBoundsIncludingTrailingWhitespace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineCount(int32_t* lineCount) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineCount, WINRT_WRAP(int32_t));
            *lineCount = detach_from<int32_t>(this->shim().LineCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaximumBidiReorderingDepth(int32_t* depth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumBidiReorderingDepth, WINRT_WRAP(int32_t));
            *depth = detach_from<int32_t>(this->shim().MaximumBidiReorderingDepth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DrawBounds(Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawBounds, WINRT_WRAP(Windows::Foundation::Rect));
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().DrawBounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HitTest(Windows::Foundation::Numerics::float2 point, bool* isHit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HitTest, WINRT_WRAP(bool), Windows::Foundation::Numerics::float2 const&);
            *isHit = detach_from<bool>(this->shim().HitTest(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HitTestWithCoords(float x, float y, bool* isHit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HitTest, WINRT_WRAP(bool), float, float);
            *isHit = detach_from<bool>(this->shim().HitTest(x, y));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HitTestWithDescription(Windows::Foundation::Numerics::float2 point, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTextLayoutRegion* textLayoutRegion, bool* isHit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HitTest, WINRT_WRAP(bool), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion&);
            *isHit = detach_from<bool>(this->shim().HitTest(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion*>(textLayoutRegion)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HitTestWithDescriptionAndCoords(float x, float y, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTextLayoutRegion* textLayoutRegion, bool* isHit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HitTest, WINRT_WRAP(bool), float, float, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion&);
            *isHit = detach_from<bool>(this->shim().HitTest(x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion*>(textLayoutRegion)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HitTestWithDescriptionAndTrailingSide(Windows::Foundation::Numerics::float2 point, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTextLayoutRegion* textLayoutRegion, bool* trailingSideOfCharacter, bool* isHit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HitTest, WINRT_WRAP(bool), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion&, bool&);
            *isHit = detach_from<bool>(this->shim().HitTest(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion*>(textLayoutRegion), *trailingSideOfCharacter));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HitTestWithDescriptionAndCoordsAndTrailingSide(float x, float y, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTextLayoutRegion* textLayoutRegion, bool* trailingSideOfCharacter, bool* isHit) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HitTest, WINRT_WRAP(bool), float, float, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion&, bool&);
            *isHit = detach_from<bool>(this->shim().HitTest(x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion*>(textLayoutRegion), *trailingSideOfCharacter));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetCaretPosition(int32_t characterIndex, bool trailingSideOfCharacter, Windows::Foundation::Numerics::float2* location) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCaretPosition, WINRT_WRAP(Windows::Foundation::Numerics::float2), int32_t, bool);
            *location = detach_from<Windows::Foundation::Numerics::float2>(this->shim().GetCaretPosition(characterIndex, trailingSideOfCharacter));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetCaretPositionWithDescription(int32_t characterIndex, bool trailingSideOfCharacter, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTextLayoutRegion* textLayoutRegion, Windows::Foundation::Numerics::float2* location) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCaretPosition, WINRT_WRAP(Windows::Foundation::Numerics::float2), int32_t, bool, Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion&);
            *location = detach_from<Windows::Foundation::Numerics::float2>(this->shim().GetCaretPosition(characterIndex, trailingSideOfCharacter, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion*>(textLayoutRegion)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetCharacterRegions(int32_t characterIndex, int32_t characterCount, uint32_t* __hitTestDescriptionsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTextLayoutRegion** hitTestDescriptions) noexcept final
    {
        try
        {
            *__hitTestDescriptionsSize = 0;
            *hitTestDescriptions = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCharacterRegions, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion>), int32_t, int32_t);
            std::tie(*__hitTestDescriptionsSize, *hitTestDescriptions) = detach_abi(this->shim().GetCharacterRegions(characterIndex, characterCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPairKerning(int32_t characterIndex, bool* hasPairKerning) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPairKerning, WINRT_WRAP(bool), int32_t);
            *hasPairKerning = detach_from<bool>(this->shim().GetPairKerning(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPairKerning(int32_t characterIndex, int32_t characterCount, bool hasPairKerning) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPairKerning, WINRT_WRAP(void), int32_t, int32_t, bool);
            this->shim().SetPairKerning(characterIndex, characterCount, hasPairKerning);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetLeadingCharacterSpacing(int32_t characterIndex, float* leadingSpacing) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetLeadingCharacterSpacing, WINRT_WRAP(float), int32_t);
            *leadingSpacing = detach_from<float>(this->shim().GetLeadingCharacterSpacing(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetTrailingCharacterSpacing(int32_t characterIndex, float* trailingSpacing) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetTrailingCharacterSpacing, WINRT_WRAP(float), int32_t);
            *trailingSpacing = detach_from<float>(this->shim().GetTrailingCharacterSpacing(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetMinimumCharacterAdvance(int32_t characterIndex, float* minimumAdvance) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetMinimumCharacterAdvance, WINRT_WRAP(float), int32_t);
            *minimumAdvance = detach_from<float>(this->shim().GetMinimumCharacterAdvance(characterIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetCharacterSpacing(int32_t characterIndex, int32_t characterCount, float leadingSpacing, float trailingSpacing, float minimumAdvance) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetCharacterSpacing, WINRT_WRAP(void), int32_t, int32_t, float, float, float);
            this->shim().SetCharacterSpacing(characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalGlyphOrientation(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalGlyphOrientation, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation>(this->shim().VerticalGlyphOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalGlyphOrientation(Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalGlyphOrientation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const&);
            this->shim().VerticalGlyphOrientation(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OpticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpticalAlignment, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment>(this->shim().OpticalAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OpticalAlignment(Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpticalAlignment, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment const&);
            this->shim().OpticalAlignment(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LastLineWrapping(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LastLineWrapping, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().LastLineWrapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LastLineWrapping(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LastLineWrapping, WINRT_WRAP(void), bool);
            this->shim().LastLineWrapping(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory>
{
    int32_t WINRT_CALL Create(void* resourceCreator, void* textString, void* textFormat, float requestedWidth, float requestedHeight, void** canvasTextLayout) noexcept final
    {
        try
        {
            *canvasTextLayout = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextLayout), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, hstring const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&, float, float);
            *canvasTextLayout = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextLayout>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&textString), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&textFormat), requestedWidth, requestedHeight));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics>
{
    int32_t WINRT_CALL GetGlyphOrientationTransform(Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation, bool isSideways, Windows::Foundation::Numerics::float2 position, Windows::Foundation::Numerics::float3x2* transform) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetGlyphOrientationTransform, WINRT_WRAP(Windows::Foundation::Numerics::float3x2), Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const&, bool, Windows::Foundation::Numerics::float2 const&);
            *transform = detach_from<Windows::Foundation::Numerics::float3x2>(this->shim().GetGlyphOrientationTransform(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const*>(&glyphOrientation), isSideways, *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&position)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer>
{
    int32_t WINRT_CALL DrawGlyphRun(Windows::Foundation::Numerics::float2 point, void* fontFace, float fontSize, uint32_t __glyphsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphs, bool isSideways, uint32_t bidiLevel, void* brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode, void* localeName, void* textString, uint32_t __clusterMapIndicesSize, int32_t* clusterMapIndices, uint32_t characterIndex, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGlyphRun, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, bool, uint32_t, Windows::Foundation::IInspectable const&, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, hstring const&, hstring const&, array_view<int32_t const>, uint32_t, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const&);
            this->shim().DrawGlyphRun(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs) + __glyphsSize), isSideways, bidiLevel, *reinterpret_cast<Windows::Foundation::IInspectable const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode), *reinterpret_cast<hstring const*>(&localeName), *reinterpret_cast<hstring const*>(&textString), array_view<int32_t const>(reinterpret_cast<int32_t const *>(clusterMapIndices), reinterpret_cast<int32_t const *>(clusterMapIndices) + __clusterMapIndicesSize), characterIndex, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const*>(&glyphOrientation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawStrikethrough(Windows::Foundation::Numerics::float2 point, float strikethroughWidth, float strikethroughThickness, float strikethroughOffset, Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection, void* brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode textMeasuringMode, void* localeName, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawStrikethrough, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, float, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&, Windows::Foundation::IInspectable const&, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, hstring const&, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const&);
            this->shim().DrawStrikethrough(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), strikethroughWidth, strikethroughThickness, strikethroughOffset, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&textDirection), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&textMeasuringMode), *reinterpret_cast<hstring const*>(&localeName), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const*>(&glyphOrientation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawUnderline(Windows::Foundation::Numerics::float2 point, float underlineWidth, float underlineThickness, float underlineOffset, float runHeight, Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection, void* brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode textMeasuringMode, void* localeName, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawUnderline, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, float, float, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const&, Windows::Foundation::IInspectable const&, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, hstring const&, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const&);
            this->shim().DrawUnderline(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), underlineWidth, underlineThickness, underlineOffset, runHeight, *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextDirection const*>(&textDirection), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&textMeasuringMode), *reinterpret_cast<hstring const*>(&localeName), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const*>(&glyphOrientation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawInlineObject(Windows::Foundation::Numerics::float2 point, void* inlineObject, bool isSideways, bool isRightToLeft, void* brush, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawInlineObject, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const&, bool, bool, Windows::Foundation::IInspectable const&, Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const&);
            this->shim().DrawInlineObject(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject const*>(&inlineObject), isSideways, isRightToLeft, *reinterpret_cast<Windows::Foundation::IInspectable const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const*>(&glyphOrientation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PixelSnappingDisabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PixelSnappingDisabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().PixelSnappingDisabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Transform(Windows::Foundation::Numerics::float3x2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Transform, WINRT_WRAP(Windows::Foundation::Numerics::float3x2));
            *value = detach_from<Windows::Foundation::Numerics::float3x2>(this->shim().Transform());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Dpi(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Dpi, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Dpi());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters>
{
    int32_t WINRT_CALL get_RenderingMode(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RenderingMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode>(this->shim().RenderingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GridFit(Microsoft::Graphics::Canvas::Text::CanvasTextGridFit* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GridFit, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextGridFit));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextGridFit>(this->shim().GridFit());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory>
{
    int32_t WINRT_CALL Create(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode textRenderingMode, Microsoft::Graphics::Canvas::Text::CanvasTextGridFit gridFit, void** textRenderingParameters) noexcept final
    {
        try
        {
            *textRenderingParameters = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters), Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode const&, Microsoft::Graphics::Canvas::Text::CanvasTextGridFit const&);
            *textRenderingParameters = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode const*>(&textRenderingMode), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextGridFit const*>(&gridFit)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Text::ICanvasTypography> : produce_base<D, Microsoft::Graphics::Canvas::Text::ICanvasTypography>
{
    int32_t WINRT_CALL AddFeature(struct struct_Microsoft_Graphics_Canvas_Text_CanvasTypographyFeature feature) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AddFeature, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature const&);
            this->shim().AddFeature(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature const*>(&feature));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL AddFeatureWithNameAndParameter(Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName name, uint32_t parameter) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AddFeature, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const&, uint32_t);
            this->shim().AddFeature(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName const*>(&name), parameter);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetFeatures(uint32_t* __featuresSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasTypographyFeature** features) noexcept final
    {
        try
        {
            *__featuresSize = 0;
            *features = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetFeatures, WINRT_WRAP(com_array<Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature>));
            std::tie(*__featuresSize, *features) = detach_abi(this->shim().GetFeatures());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Text {

inline CanvasFontSet::CanvasFontSet(Windows::Foundation::Uri const& uri) :
    CanvasFontSet(impl::call_factory<CanvasFontSet, Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory>([&](auto&& f) { return f.Create(uri); }))
{}

inline Microsoft::Graphics::Canvas::Text::CanvasFontSet CanvasFontSet::GetSystemFontSet()
{
    return impl::call_factory<CanvasFontSet, Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics>([&](auto&& f) { return f.GetSystemFontSet(); });
}

inline CanvasNumberSubstitution::CanvasNumberSubstitution(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const& method) :
    CanvasNumberSubstitution(impl::call_factory<CanvasNumberSubstitution, Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory>([&](auto&& f) { return f.Create(method); }))
{}

inline CanvasNumberSubstitution::CanvasNumberSubstitution(Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod const& method, param::hstring const& localeName, bool ignoreEnvironmentOverrides) :
    CanvasNumberSubstitution(impl::call_factory<CanvasNumberSubstitution, Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory>([&](auto&& f) { return f.CreateWithLocaleAndIgnoreOverrides(method, localeName, ignoreEnvironmentOverrides); }))
{}

inline CanvasTextAnalyzer::CanvasTextAnalyzer(param::hstring const& text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection) :
    CanvasTextAnalyzer(impl::call_factory<CanvasTextAnalyzer, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory>([&](auto&& f) { return f.Create(text, textDirection); }))
{}

inline CanvasTextAnalyzer::CanvasTextAnalyzer(param::hstring const& text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection, Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution const& numberSubstitution, Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation const& verticalGlyphOrientation, uint32_t bidiLevel) :
    CanvasTextAnalyzer(impl::call_factory<CanvasTextAnalyzer, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory>([&](auto&& f) { return f.CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(text, textDirection, numberSubstitution, verticalGlyphOrientation, bidiLevel); }))
{}

inline CanvasTextAnalyzer::CanvasTextAnalyzer(param::hstring const& text, Microsoft::Graphics::Canvas::Text::CanvasTextDirection const& textDirection, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions const& options) :
    CanvasTextAnalyzer(impl::call_factory<CanvasTextAnalyzer, Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory>([&](auto&& f) { return f.CreateWithOptions(text, textDirection, options); }))
{}

inline CanvasTextFormat::CanvasTextFormat() :
    CanvasTextFormat(impl::call_factory<CanvasTextFormat>([](auto&& f) { return f.template ActivateInstance<CanvasTextFormat>(); }))
{}

inline com_array<hstring> CanvasTextFormat::GetSystemFontFamilies()
{
    return impl::call_factory<CanvasTextFormat, Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics>([&](auto&& f) { return f.GetSystemFontFamilies(); });
}

inline com_array<hstring> CanvasTextFormat::GetSystemFontFamilies(param::vector_view<hstring> const& localeList)
{
    return impl::call_factory<CanvasTextFormat, Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics>([&](auto&& f) { return f.GetSystemFontFamilies(localeList); });
}

inline CanvasTextLayout::CanvasTextLayout(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& textString, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& textFormat, float requestedWidth, float requestedHeight) :
    CanvasTextLayout(impl::call_factory<CanvasTextLayout, Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory>([&](auto&& f) { return f.Create(resourceCreator, textString, textFormat, requestedWidth, requestedHeight); }))
{}

inline Windows::Foundation::Numerics::float3x2 CanvasTextLayout::GetGlyphOrientationTransform(Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation const& glyphOrientation, bool isSideways, Windows::Foundation::Numerics::float2 const& position)
{
    return impl::call_factory<CanvasTextLayout, Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics>([&](auto&& f) { return f.GetGlyphOrientationTransform(glyphOrientation, isSideways, position); });
}

inline CanvasTextRenderingParameters::CanvasTextRenderingParameters(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode const& textRenderingMode, Microsoft::Graphics::Canvas::Text::CanvasTextGridFit const& gridFit) :
    CanvasTextRenderingParameters(impl::call_factory<CanvasTextRenderingParameters, Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory>([&](auto&& f) { return f.Create(textRenderingMode, gridFit); }))
{}

inline CanvasTypography::CanvasTypography() :
    CanvasTypography(impl::call_factory<CanvasTypography>([](auto&& f) { return f.template ActivateInstance<CanvasTypography>(); }))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontFace> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontFace> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontSet> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontSet> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTypography> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::ICanvasTypography> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasFontFace> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasFontFace> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasFontSet> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasFontSet> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasScaledFont> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasScaledFont> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextAnalyzer> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextFormat> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextFormat> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextLayout> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextLayout> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Text::CanvasTypography> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Text::CanvasTypography> {};

}

// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "impl/Microsoft.Graphics.Canvas.UI.Composition.2.h"
#include "Microsoft.Graphics.Canvas.UI.h"

namespace winrt::impl {

template <typename D> Windows::UI::Composition::CompositionGraphicsDevice consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::CreateCompositionGraphicsDevice(Windows::UI::Composition::Compositor const& compositor, Microsoft::Graphics::Canvas::CanvasDevice const& canvasDevice) const
{
    Windows::UI::Composition::CompositionGraphicsDevice graphicsDevice{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->CreateCompositionGraphicsDevice(get_abi(compositor), get_abi(canvasDevice), put_abi(graphicsDevice)));
    return graphicsDevice;
}

template <typename D> Windows::UI::Composition::ICompositionSurface consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::CreateCompositionSurfaceForSwapChain(Windows::UI::Composition::Compositor const& compositor, Microsoft::Graphics::Canvas::CanvasSwapChain const& swapChain) const
{
    Windows::UI::Composition::ICompositionSurface compositionSurface{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->CreateCompositionSurfaceForSwapChain(get_abi(compositor), get_abi(swapChain), put_abi(compositionSurface)));
    return compositionSurface;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::GetCanvasDevice(Windows::UI::Composition::CompositionGraphicsDevice const& graphicsDevice) const
{
    Microsoft::Graphics::Canvas::CanvasDevice canvasDevice{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->GetCanvasDevice(get_abi(graphicsDevice), put_abi(canvasDevice)));
    return canvasDevice;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::SetCanvasDevice(Windows::UI::Composition::CompositionGraphicsDevice const& graphicsDevice, Microsoft::Graphics::Canvas::CanvasDevice const& canvasDevice) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->SetCanvasDevice(get_abi(graphicsDevice), get_abi(canvasDevice)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::CreateDrawingSession(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface) const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession drawingSession{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->CreateDrawingSession(get_abi(drawingSurface), put_abi(drawingSession)));
    return drawingSession;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::CreateDrawingSession(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface, Windows::Foundation::Rect const& updateRect) const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession drawingSession{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->CreateDrawingSessionWithUpdateRect(get_abi(drawingSurface), get_abi(updateRect), put_abi(drawingSession)));
    return drawingSession;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::CreateDrawingSession(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface, Windows::Foundation::Rect const& updateRectInPixels, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession drawingSession{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->CreateDrawingSessionWithUpdateRectAndDpi(get_abi(drawingSurface), get_abi(updateRectInPixels), dpi, put_abi(drawingSession)));
    return drawingSession;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics<D>::Resize(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface, Windows::Foundation::Size const& sizeInPixels) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics)->Resize(get_abi(drawingSurface), get_abi(sizeInPixels)));
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics> : produce_base<D, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>
{
    int32_t WINRT_CALL CreateCompositionGraphicsDevice(void* compositor, void* canvasDevice, void** graphicsDevice) noexcept final
    {
        try
        {
            *graphicsDevice = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateCompositionGraphicsDevice, WINRT_WRAP(Windows::UI::Composition::CompositionGraphicsDevice), Windows::UI::Composition::Compositor const&, Microsoft::Graphics::Canvas::CanvasDevice const&);
            *graphicsDevice = detach_from<Windows::UI::Composition::CompositionGraphicsDevice>(this->shim().CreateCompositionGraphicsDevice(*reinterpret_cast<Windows::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&canvasDevice)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateCompositionSurfaceForSwapChain(void* compositor, void* swapChain, void** compositionSurface) noexcept final
    {
        try
        {
            *compositionSurface = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateCompositionSurfaceForSwapChain, WINRT_WRAP(Windows::UI::Composition::ICompositionSurface), Windows::UI::Composition::Compositor const&, Microsoft::Graphics::Canvas::CanvasSwapChain const&);
            *compositionSurface = detach_from<Windows::UI::Composition::ICompositionSurface>(this->shim().CreateCompositionSurfaceForSwapChain(*reinterpret_cast<Windows::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSwapChain const*>(&swapChain)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetCanvasDevice(void* graphicsDevice, void** canvasDevice) noexcept final
    {
        try
        {
            *canvasDevice = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetCanvasDevice, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice), Windows::UI::Composition::CompositionGraphicsDevice const&);
            *canvasDevice = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().GetCanvasDevice(*reinterpret_cast<Windows::UI::Composition::CompositionGraphicsDevice const*>(&graphicsDevice)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetCanvasDevice(void* graphicsDevice, void* canvasDevice) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetCanvasDevice, WINRT_WRAP(void), Windows::UI::Composition::CompositionGraphicsDevice const&, Microsoft::Graphics::Canvas::CanvasDevice const&);
            this->shim().SetCanvasDevice(*reinterpret_cast<Windows::UI::Composition::CompositionGraphicsDevice const*>(&graphicsDevice), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&canvasDevice));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateDrawingSession(void* drawingSurface, void** drawingSession) noexcept final
    {
        try
        {
            *drawingSession = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession), Windows::UI::Composition::CompositionDrawingSurface const&);
            *drawingSession = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<Windows::UI::Composition::CompositionDrawingSurface const*>(&drawingSurface)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateDrawingSessionWithUpdateRect(void* drawingSurface, Windows::Foundation::Rect updateRect, void** drawingSession) noexcept final
    {
        try
        {
            *drawingSession = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession), Windows::UI::Composition::CompositionDrawingSurface const&, Windows::Foundation::Rect const&);
            *drawingSession = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<Windows::UI::Composition::CompositionDrawingSurface const*>(&drawingSurface), *reinterpret_cast<Windows::Foundation::Rect const*>(&updateRect)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateDrawingSessionWithUpdateRectAndDpi(void* drawingSurface, Windows::Foundation::Rect updateRectInPixels, float dpi, void** drawingSession) noexcept final
    {
        try
        {
            *drawingSession = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession), Windows::UI::Composition::CompositionDrawingSurface const&, Windows::Foundation::Rect const&, float);
            *drawingSession = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<Windows::UI::Composition::CompositionDrawingSurface const*>(&drawingSurface), *reinterpret_cast<Windows::Foundation::Rect const*>(&updateRectInPixels), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Resize(void* drawingSurface, Windows::Foundation::Size sizeInPixels) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Resize, WINRT_WRAP(void), Windows::UI::Composition::CompositionDrawingSurface const&, Windows::Foundation::Size const&);
            this->shim().Resize(*reinterpret_cast<Windows::UI::Composition::CompositionDrawingSurface const*>(&drawingSurface), *reinterpret_cast<Windows::Foundation::Size const*>(&sizeInPixels));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::UI::Composition {

inline Windows::UI::Composition::CompositionGraphicsDevice CanvasComposition::CreateCompositionGraphicsDevice(Windows::UI::Composition::Compositor const& compositor, Microsoft::Graphics::Canvas::CanvasDevice const& canvasDevice)
{
    return impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.CreateCompositionGraphicsDevice(compositor, canvasDevice); });
}

inline Windows::UI::Composition::ICompositionSurface CanvasComposition::CreateCompositionSurfaceForSwapChain(Windows::UI::Composition::Compositor const& compositor, Microsoft::Graphics::Canvas::CanvasSwapChain const& swapChain)
{
    return impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.CreateCompositionSurfaceForSwapChain(compositor, swapChain); });
}

inline Microsoft::Graphics::Canvas::CanvasDevice CanvasComposition::GetCanvasDevice(Windows::UI::Composition::CompositionGraphicsDevice const& graphicsDevice)
{
    return impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.GetCanvasDevice(graphicsDevice); });
}

inline void CanvasComposition::SetCanvasDevice(Windows::UI::Composition::CompositionGraphicsDevice const& graphicsDevice, Microsoft::Graphics::Canvas::CanvasDevice const& canvasDevice)
{
    impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.SetCanvasDevice(graphicsDevice, canvasDevice); });
}

inline Microsoft::Graphics::Canvas::CanvasDrawingSession CanvasComposition::CreateDrawingSession(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface)
{
    return impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.CreateDrawingSession(drawingSurface); });
}

inline Microsoft::Graphics::Canvas::CanvasDrawingSession CanvasComposition::CreateDrawingSession(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface, Windows::Foundation::Rect const& updateRect)
{
    return impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.CreateDrawingSession(drawingSurface, updateRect); });
}

inline Microsoft::Graphics::Canvas::CanvasDrawingSession CanvasComposition::CreateDrawingSession(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface, Windows::Foundation::Rect const& updateRectInPixels, float dpi)
{
    return impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.CreateDrawingSession(drawingSurface, updateRectInPixels, dpi); });
}

inline void CanvasComposition::Resize(Windows::UI::Composition::CompositionDrawingSurface const& drawingSurface, Windows::Foundation::Size const& sizeInPixels)
{
    impl::call_factory<CanvasComposition, Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics>([&](auto&& f) { return f.Resize(drawingSurface, sizeInPixels); });
}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::UI::Composition::CanvasComposition> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::UI::Composition::CanvasComposition> {};

}

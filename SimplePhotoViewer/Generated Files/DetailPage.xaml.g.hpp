//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "DetailPage.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::SimplePhotoViewer::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void DetailPageT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///DetailPage.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void DetailPageT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 2:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->Display(targetElement);
            }
            break;
        case 3:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->Tooler(targetElement);
            }
            break;
        case 4:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ContentDialog>();
                this->ImageContentDialog(targetElement);
            }
            break;
        case 5:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->SlidePlay(targetElement);
            }
            break;
        case 6:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->ZoomInAppBarButton(targetElement);
            }
            break;
        case 7:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->ZoomOutAppBarButton(targetElement);
            }
            break;
        case 8:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->RotateAppBarButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Counterclockwise_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 9:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->CancelAppBarButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Cancel_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 10:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->EditAppBarButton(targetElement);
            }
            break;
        case 11:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->InformationAppBarButton(targetElement);
            }
            break;
        case 12:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->SaveAppBarButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Save_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 13:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::FlipView>();
                this->DetailPageFlipView(targetElement);
            }
            break;
        case 16:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ScrollViewer>();
                this->ThumbnailScrollViewer(targetElement);
            }
            break;
        case 17:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                this->ThumbnailListView(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.ItemClick([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Controls::ItemClickEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ImageGridView_ItemClick(p0, p1);
                    }
                });
            }
            break;
        case 19:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->FolderPath(targetElement);
            }
            break;
        case 20:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AppBarButton>();
                this->Thumbnail(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->GoBack_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void DetailPageT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void DetailPageT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector DetailPageT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::winrt::SimplePhotoViewer::implementation::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // DetailPage.xaml line 1
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<DetailPage_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::winrt::SimplePhotoViewer::implementation::XamlBindings::Loading});
                }
                break;
            case 14: // DetailPage.xaml line 140
                {
                    auto element14 = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    auto objBindings = std::make_unique<DetailPage_obj14_Bindings>();
                    objBindings->SetDataRoot(element14.DataContext());
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element14);
                    DataTemplate::SetExtensionInstance(element14, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element14, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
            case 18: // DetailPage.xaml line 98
                {
                    auto element18 = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    auto objBindings = std::make_unique<DetailPage_obj18_Bindings>();
                    objBindings->SetDataRoot(element18.DataContext());
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element18);
                    DataTemplate::SetExtensionInstance(element18, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element18, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    struct DetailPageT<D, I...>::DetailPage_obj14_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::ImageSku, ::winrt::SimplePhotoViewer::implementation::XamlBindingTrackingBase>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        DetailPage_obj14_Bindings()
        {
            InitializeTracking(this);
        }

        ~DetailPage_obj14_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 14: // DetailPage.xaml line 140
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    obj14 = targetElement;
                }
                break;
            case 15: // DetailPage.xaml line 144
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Media::RotateTransform>();
                    obj15 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj14.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SimplePhotoViewer::ImageSku>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::Image> obj14;
        ::winrt::Windows::UI::Xaml::Media::RotateTransform obj15 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::event_token tokenPC_ {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::ImageSku obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ImageContent(obj.ImageContent(), phase);
                    Update_RenderRotation(obj.RenderRotation(), phase);
                }
            }
        }

        void Update_ImageContent(::winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // DetailPage.xaml line 140
                if (obj14)
                {
                    Set_Windows_UI_Xaml_Controls_Image_Source(this->obj14.get(), obj, std::nullopt);
                }
            }
        }

        void Update_RenderRotation(double obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // DetailPage.xaml line 144
                Set_Windows_UI_Xaml_Media_RotateTransform_Angle(obj15, obj);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SimplePhotoViewer::ImageSku>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ImageContent(obj.ImageContent(), DATA_CHANGED);
                        Update_RenderRotation(obj.RenderRotation(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageContent")
                {
                    if (obj)
                    {
                        Update_ImageContent(obj.ImageContent(), DATA_CHANGED);
                    }
                }
                else if (propName == L"RenderRotation")
                {
                    if (obj)
                    {
                        Update_RenderRotation(obj.RenderRotation(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_Image_Source(::winrt::Windows::UI::Xaml::Controls::Image const& obj, ::winrt::Windows::UI::Xaml::Media::ImageSource value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::UI::Xaml::Media::ImageSource>();
            }
            obj.Source(value);
        }

        static void Set_Windows_UI_Xaml_Media_RotateTransform_Angle(::winrt::Windows::UI::Xaml::Media::RotateTransform const& obj, double const& value)
        {
            obj.Angle(value);
        }
    }; 

    template <typename D, typename ... I>
    struct DetailPageT<D, I...>::DetailPage_obj18_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::ImageSku, ::winrt::SimplePhotoViewer::implementation::XamlBindingTrackingBase>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        DetailPage_obj18_Bindings()
        {
            InitializeTracking(this);
        }

        ~DetailPage_obj18_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 18: // DetailPage.xaml line 98
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    obj18 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj18.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SimplePhotoViewer::ImageSku>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::Image> obj18;

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::event_token tokenPC_ {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::ImageSku obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ImageThumbnail(obj.ImageThumbnail(), phase);
                }
            }
        }

        void Update_ImageThumbnail(::winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // DetailPage.xaml line 98
                if (obj18)
                {
                    Set_Windows_UI_Xaml_Controls_Image_Source(this->obj18.get(), obj, std::nullopt);
                }
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SimplePhotoViewer::ImageSku>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ImageThumbnail(obj.ImageThumbnail(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageThumbnail")
                {
                    if (obj)
                    {
                        Update_ImageThumbnail(obj.ImageThumbnail(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_Image_Source(::winrt::Windows::UI::Xaml::Controls::Image const& obj, ::winrt::Windows::UI::Xaml::Media::ImageSource value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::UI::Xaml::Media::ImageSource>();
            }
            obj.Source(value);
        }
    }; 

    struct DetailPage_obj1_BindingsTracking : public XamlBindingTrackingBase
    {
        DetailPage_obj1_BindingsTracking()
        {}

        // Event handlers

        void VectorChanged_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& sender,
            ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e)
        {
            VectorChanged(sender, e);
        }

        // Listener update functions

        void UpdateVectorChangedListener_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& obj,
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> & cache,
            ::winrt::event_token token)
        {
            if (cache && cache != obj)
            {
                cache.VectorChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.VectorChanged({this, &DetailPage_obj1_BindingsTracking::VectorChanged_Object});
            }
        }
    };

    template <typename D, typename ... I>
    struct DetailPageT<D, I...>::DetailPage_obj1_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::DetailPage, DetailPage_obj1_BindingsTracking>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        DetailPage_obj1_Bindings()
        {
            InitializeTracking(this);
        }

        ~DetailPage_obj1_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 13: // DetailPage.xaml line 135
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::FlipView>();
                    obj13 = targetElement;
                }
                break;
            case 17: // DetailPage.xaml line 91
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                    obj17 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::FlipView obj13 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::ListView obj17 { nullptr };

        // Fields for binding tracking.
        ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> cacheVC_ImageSkus{nullptr};
        ::winrt::event_token tokenVC_ImageSkus {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::DetailPage obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ImageSkus(obj.ImageSkus(), phase);
                }
            }
        }

        void Update_ImageSkus(::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(obj, cacheVC_ImageSkus, tokenVC_ImageSkus);
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // DetailPage.xaml line 135
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(obj13, obj, std::nullopt);
                // DetailPage.xaml line 91
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(obj17, obj, std::nullopt);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(nullptr, cacheVC_ImageSkus, tokenVC_ImageSkus);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
            if (cacheVC_ImageSkus && cacheVC_ImageSkus == sender)
            {
                ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj = sender.as<::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable>>();
            }
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::winrt::Windows::UI::Xaml::Controls::ItemsControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }
    }; 

    template struct DetailPageT<struct DetailPage>;
}


#pragma warning(pop)



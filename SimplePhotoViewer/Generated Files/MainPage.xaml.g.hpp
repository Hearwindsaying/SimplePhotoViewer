//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "MainPage.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::SimplePhotoViewer::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void MainPageT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///MainPage.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 2:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::SplitView>();
                this->splitView(targetElement);
            }
            break;
        case 3:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->TopLeftGrid(targetElement);
            }
            break;
        case 4:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->TreeView_Grid(targetElement);
            }
            break;
        case 5:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                this->ListView2(targetElement);
            }
            break;
        case 6:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TreeView>();
                this->DirectoryTreeView(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Expanding([weakThis](::winrt::Windows::UI::Xaml::Controls::TreeView const& p0, ::winrt::Windows::UI::Xaml::Controls::TreeViewExpandingEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->DirectoryItem_Expanding(p0, p1);
                    }
                });
                targetElement.Collapsed([weakThis](::winrt::Windows::UI::Xaml::Controls::TreeView const& p0, ::winrt::Windows::UI::Xaml::Controls::TreeViewCollapsedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->DirectoryItem_Collapsed(p0, p1);
                    }
                });
                targetElement.ItemInvoked([weakThis](::winrt::Windows::UI::Xaml::Controls::TreeView const& p0, ::winrt::Windows::UI::Xaml::Controls::TreeViewItemInvokedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->DirectoryItem_Invoked(p0, p1);
                    }
                });
            }
            break;
        case 9:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                this->ListView1(targetElement);
            }
            break;
        case 10:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->SplitView_Button(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->SplitViewButton_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 11:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                this->SimplePhotoViewer_TextBlock(targetElement);
            }
            break;
        case 12:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::RelativePanel>();
                this->Windows_RelativePanel(targetElement);
            }
            break;
        case 13:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->PointerDetectedGrid(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.PointerPressed([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Windows_MouseDown(p0, p1);
                    }
                });
                targetElement.PointerMoved([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Windows_MouseHold(p0, p1);
                    }
                });
                targetElement.PointerReleased([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Windows_MouseUp(p0, p1);
                    }
                });
            }
            break;
        case 14:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Canvas>();
                this->dragSelectionCanvas(targetElement);
            }
            break;
        case 15:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Border>();
                this->dragSelectionBorder(targetElement);
            }
            break;
        case 16:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->TitleGrid(targetElement);
            }
            break;
        case 17:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->DisplayGrid(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.PointerPressed([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Windows_MouseDown(p0, p1);
                    }
                });
                targetElement.PointerMoved([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Windows_MouseHold(p0, p1);
                    }
                });
                targetElement.PointerReleased([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::Input::PointerRoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Windows_MouseUp(p0, p1);
                    }
                });
            }
            break;
        case 18:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                this->Deleteme_StackPanel(targetElement);
            }
            break;
        case 21:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->SlidePlay(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->SlidePlay_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 22:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->ThePreviousPicture(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->ThePreviousPicture_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 23:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->TheLatterPicture(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->TheLatterPicture_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 24:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Copy(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Copy_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 25:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Shear(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Shear_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 26:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Paste(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Paste_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 27:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->DeleteButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Delete_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 28:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Cancel(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Cancel_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 29:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->RenameButton(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Rename_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 30:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->OpenFile(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->OpenFile_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 31:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBox>();
                this->nameInput(targetElement);
            }
            break;
        case 32:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Rename(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.Click([weakThis](::winrt::Windows::Foundation::IInspectable const& p0, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->Rename_ClickHandler(p0, p1);
                    }
                });
            }
            break;
        case 33:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::GridView>();
                this->ImageGridView(targetElement);
            }
            break;
        case 38:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::AutoSuggestBox>();
                this->SearchAutoSuggetsBox(targetElement);
                auto weakThis = ::winrt::make_weak<class_type>(*this);
                targetElement.SuggestionChosen([weakThis](::winrt::Windows::UI::Xaml::Controls::AutoSuggestBox const& p0, ::winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->SearchBox_SuggestionChosen(p0, p1);
                    }
                });
                targetElement.TextChanged([weakThis](::winrt::Windows::UI::Xaml::Controls::AutoSuggestBox const& p0, ::winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->SearchBox_TextChanged(p0, p1);
                    }
                });
                targetElement.QuerySubmitted([weakThis](::winrt::Windows::UI::Xaml::Controls::AutoSuggestBox const& p0, ::winrt::Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs const& p1){
                    if (auto t = weakThis.get())
                    {
                        ::winrt::get_self<D>(t)->SearchBox_QuerySubmitted(p0, p1);
                    }
                });
            }
            break;
        case 40:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->RealFolderPath_Grid(targetElement);
            }
            break;
        case 41:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Grid>();
                this->FolderPath(targetElement);
            }
            break;
        case 44:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Forward(targetElement);
            }
            break;
        case 45:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                this->Back(targetElement);
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector MainPageT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::winrt::SimplePhotoViewer::implementation::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // MainPage.xaml line 1
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<MainPage_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::winrt::SimplePhotoViewer::implementation::XamlBindings::Loading});
                }
                break;
            case 7: // MainPage.xaml line 77
                {
                    auto element7 = target.as<::winrt::Windows::UI::Xaml::Controls::TreeViewItem>();
                    auto objBindings = std::make_unique<MainPage_obj7_Bindings>();
                    objBindings->SetDataRoot(element7.DataContext());
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element7);
                    DataTemplate::SetExtensionInstance(element7, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element7, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
            case 34: // MainPage.xaml line 215
                {
                    auto element34 = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                    auto objBindings = std::make_unique<MainPage_obj34_Bindings>();
                    objBindings->SetDataRoot(element34.DataContext());
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element34);
                    DataTemplate::SetExtensionInstance(element34, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element34, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
            case 39: // MainPage.xaml line 186
                {
                    auto element39 = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    auto objBindings = std::make_unique<MainPage_obj39_Bindings>();
                    objBindings->SetDataRoot(element39.DataContext());
                    bindings = ::winrt::make_self<::winrt::SimplePhotoViewer::implementation::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element39);
                    DataTemplate::SetExtensionInstance(element39, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element39, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    struct MainPage_obj7_BindingsTracking : public XamlBindingTrackingBase
    {
        MainPage_obj7_BindingsTracking()
        {}

        // Event handlers

        void VectorChanged_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& sender,
            ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e)
        {
            VectorChanged(sender, e);
        }

        // Listener update functions

        void UpdateVectorChangedListener_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& obj,
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> & cache,
            ::winrt::event_token token)
        {
            if (cache && cache != obj)
            {
                cache.VectorChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.VectorChanged({this, &MainPage_obj7_BindingsTracking::VectorChanged_Object});
            }
        }
    };

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj7_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::DirectoryItem, MainPage_obj7_BindingsTracking>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        MainPage_obj7_Bindings()
        {
            InitializeTracking(this);
        }

        ~MainPage_obj7_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 7: // MainPage.xaml line 77
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TreeViewItem>();
                    obj7 = targetElement;
                }
                break;
            case 8: // MainPage.xaml line 85
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj8 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj7.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SimplePhotoViewer::DirectoryItem>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::TreeViewItem> obj7;
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj8 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> cacheVC_SubItems{nullptr};
        ::winrt::event_token tokenPC_ {};
        ::winrt::event_token tokenVC_SubItems {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::DirectoryItem obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_SubItems(obj.SubItems(), phase);
                }
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    Update_Item(obj.Item(), phase);
                }
            }
        }

        void Update_SubItems(::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(obj, cacheVC_SubItems, tokenVC_SubItems);
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 77
                if (obj7)
                {
                    Set_Windows_UI_Xaml_Controls_TreeViewItem_ItemsSource(this->obj7.get(), obj, std::nullopt);
                }
            }
        }

        void Update_Item(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED )) != 0)
            {
                // MainPage.xaml line 85
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj8, obj);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
            _bindingsTracking->UpdateVectorChangedListener_Object(nullptr, cacheVC_SubItems, tokenVC_SubItems);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SimplePhotoViewer::DirectoryItem>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_SubItems(obj.SubItems(), DATA_CHANGED);
                    }
                }
                else if (propName == L"SubItems")
                {
                    if (obj)
                    {
                        Update_SubItems(obj.SubItems(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
            if (cacheVC_SubItems && cacheVC_SubItems == sender)
            {
                ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj = sender.as<::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable>>();
            }
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_TreeViewItem_ItemsSource(::winrt::Windows::UI::Xaml::Controls::TreeViewItem const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj34_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::ImageSku, ::winrt::SimplePhotoViewer::implementation::XamlBindingTrackingBase>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        MainPage_obj34_Bindings()
        {
            InitializeTracking(this);
        }

        ~MainPage_obj34_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 34: // MainPage.xaml line 215
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                    obj34 = targetElement;
                }
                break;
            case 35: // MainPage.xaml line 216
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Image>();
                    obj35 = targetElement;
                }
                break;
            case 36: // MainPage.xaml line 223
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj36 = targetElement;
                }
                break;
            case 37: // MainPage.xaml line 220
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ToolTip>();
                    obj37 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj34.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SimplePhotoViewer::ImageSku>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::StackPanel> obj34;
        ::winrt::Windows::UI::Xaml::Controls::Image obj35 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj36 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::ToolTip obj37 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::event_token tokenPC_ {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::ImageSku obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ImageThumbnail(obj.ImageThumbnail(), phase);
                    Update_ImageNameWithType(obj.ImageNameWithType(), phase);
                    Update_ImageName(obj.ImageName(), phase);
                }
            }
        }

        void Update_ImageThumbnail(::winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 216
                Set_Windows_UI_Xaml_Controls_Image_Source(obj35, obj, std::nullopt);
            }
        }

        void Update_ImageNameWithType(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 223
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj36, obj);
            }
        }

        void Update_ImageName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 220
                Set_Windows_UI_Xaml_Controls_ContentControl_Content(obj37, ::winrt::box_value(obj), std::nullopt);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SimplePhotoViewer::ImageSku>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ImageThumbnail(obj.ImageThumbnail(), DATA_CHANGED);
                        Update_ImageNameWithType(obj.ImageNameWithType(), DATA_CHANGED);
                        Update_ImageName(obj.ImageName(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageThumbnail")
                {
                    if (obj)
                    {
                        Update_ImageThumbnail(obj.ImageThumbnail(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageNameWithType")
                {
                    if (obj)
                    {
                        Update_ImageNameWithType(obj.ImageNameWithType(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageName")
                {
                    if (obj)
                    {
                        Update_ImageName(obj.ImageName(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_Image_Source(::winrt::Windows::UI::Xaml::Controls::Image const& obj, ::winrt::Windows::UI::Xaml::Media::ImageSource value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::UI::Xaml::Media::ImageSource>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::UI::Xaml::Media::ImageSource>();
            }
            obj.Source(value);
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }

        static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(::winrt::Windows::UI::Xaml::Controls::ContentControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.Content(value);
        }
    }; 

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj39_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::ImageSku, ::winrt::SimplePhotoViewer::implementation::XamlBindingTrackingBase>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        MainPage_obj39_Bindings()
        {
            InitializeTracking(this);
        }

        ~MainPage_obj39_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 39: // MainPage.xaml line 186
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj39 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj39.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::SimplePhotoViewer::ImageSku>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::TextBlock> obj39;

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::event_token tokenPC_ {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::ImageSku obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ImageNameWithType(obj.ImageNameWithType(), phase);
                }
            }
        }

        void Update_ImageNameWithType(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 186
                if (obj39)
                {
                    Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj39.get(), obj);
                }
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SimplePhotoViewer::ImageSku>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ImageNameWithType(obj.ImageNameWithType(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageNameWithType")
                {
                    if (obj)
                    {
                        Update_ImageNameWithType(obj.ImageNameWithType(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    struct MainPage_obj1_BindingsTracking : public XamlBindingTrackingBase
    {
        MainPage_obj1_BindingsTracking()
        {}

        // Event handlers

        void VectorChanged_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& sender,
            ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e)
        {
            VectorChanged(sender, e);
        }

        // Listener update functions

        void UpdateVectorChangedListener_Object(
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> const& obj,
            ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> & cache,
            ::winrt::event_token token)
        {
            if (cache && cache != obj)
            {
                cache.VectorChanged(token);
                cache = nullptr;
            }
            if (!cache && obj)
            {
                cache = obj;
                token = obj.VectorChanged({this, &MainPage_obj1_BindingsTracking::VectorChanged_Object});
            }
        }
    };

    template <typename D, typename ... I>
    struct MainPageT<D, I...>::MainPage_obj1_Bindings
        : public ::winrt::SimplePhotoViewer::implementation::ReferenceTypeXamlBindings<::winrt::SimplePhotoViewer::MainPage, MainPage_obj1_BindingsTracking>
        , public ::winrt::SimplePhotoViewer::implementation::IXamlBindingTracking
{
        MainPage_obj1_Bindings()
        {
            InitializeTracking(this);
        }

        ~MainPage_obj1_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 6: // MainPage.xaml line 66
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TreeView>();
                    obj6 = targetElement;
                }
                break;
            case 19: // MainPage.xaml line 302
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj19 = targetElement;
                }
                break;
            case 20: // MainPage.xaml line 303
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj20 = targetElement;
                }
                break;
            case 33: // MainPage.xaml line 207
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::GridView>();
                    obj33 = targetElement;
                }
                break;
            case 42: // MainPage.xaml line 174
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj42 = targetElement;
                }
                break;
            case 43: // MainPage.xaml line 170
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj43 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::TreeView obj6 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj19 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj20 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::GridView obj33 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj42 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj43 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> cacheVC_TreeViewFolders{nullptr};
        ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> cacheVC_ImageSkus{nullptr};
        ::winrt::event_token tokenPC_ {};
        ::winrt::event_token tokenVC_TreeViewFolders {};
        ::winrt::event_token tokenVC_ImageSkus {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::SimplePhotoViewer::MainPage obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_TreeViewFolders(obj.TreeViewFolders(), phase);
                    Update_CurrentFolderSelectedImageNumber(obj.CurrentFolderSelectedImageNumber(), phase);
                    Update_CurrentFolderImageNumber(obj.CurrentFolderImageNumber(), phase);
                    Update_ImageSkus(obj.ImageSkus(), phase);
                    Update_CurrentSelectedFolder(obj.CurrentSelectedFolder(), phase);
                }
            }
        }

        void Update_TreeViewFolders(::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(obj, cacheVC_TreeViewFolders, tokenVC_TreeViewFolders);
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 66
                Set_Windows_UI_Xaml_Controls_TreeView_ItemsSource(obj6, obj, std::nullopt);
            }
        }

        void Update_CurrentFolderSelectedImageNumber(uint32_t obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 302
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj19, ::winrt::to_hstring(obj));
            }
        }

        void Update_CurrentFolderImageNumber(uint32_t obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 303
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj20, ::winrt::to_hstring(obj));
            }
        }

        void Update_ImageSkus(::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            _bindingsTracking->UpdateVectorChangedListener_Object(obj, cacheVC_ImageSkus, tokenVC_ImageSkus);
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 207
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(obj33, obj, std::nullopt);
            }
        }

        void Update_CurrentSelectedFolder(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 174
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj42, obj);
                // MainPage.xaml line 170
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj43, obj);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
            _bindingsTracking->UpdateVectorChangedListener_Object(nullptr, cacheVC_TreeViewFolders, tokenVC_TreeViewFolders);
            _bindingsTracking->UpdateVectorChangedListener_Object(nullptr, cacheVC_ImageSkus, tokenVC_ImageSkus);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::SimplePhotoViewer::MainPage>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_TreeViewFolders(obj.TreeViewFolders(), DATA_CHANGED);
                        Update_CurrentFolderSelectedImageNumber(obj.CurrentFolderSelectedImageNumber(), DATA_CHANGED);
                        Update_CurrentFolderImageNumber(obj.CurrentFolderImageNumber(), DATA_CHANGED);
                        Update_ImageSkus(obj.ImageSkus(), DATA_CHANGED);
                        Update_CurrentSelectedFolder(obj.CurrentSelectedFolder(), DATA_CHANGED);
                    }
                }
                else if (propName == L"TreeViewFolders")
                {
                    if (obj)
                    {
                        Update_TreeViewFolders(obj.TreeViewFolders(), DATA_CHANGED);
                    }
                }
                else if (propName == L"CurrentFolderSelectedImageNumber")
                {
                    if (obj)
                    {
                        Update_CurrentFolderSelectedImageNumber(obj.CurrentFolderSelectedImageNumber(), DATA_CHANGED);
                    }
                }
                else if (propName == L"CurrentFolderImageNumber")
                {
                    if (obj)
                    {
                        Update_CurrentFolderImageNumber(obj.CurrentFolderImageNumber(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ImageSkus")
                {
                    if (obj)
                    {
                        Update_ImageSkus(obj.ImageSkus(), DATA_CHANGED);
                    }
                }
                else if (propName == L"CurrentSelectedFolder")
                {
                    if (obj)
                    {
                        Update_CurrentSelectedFolder(obj.CurrentSelectedFolder(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
            if (cacheVC_TreeViewFolders && cacheVC_TreeViewFolders == sender)
            {
                ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj = sender.as<::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable>>();
            }
            if (cacheVC_ImageSkus && cacheVC_ImageSkus == sender)
            {
                ::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable> obj = sender.as<::winrt::Windows::Foundation::Collections::IObservableVector<::winrt::Windows::Foundation::IInspectable>>();
            }
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }


        static void Set_Windows_UI_Xaml_Controls_TreeView_ItemsSource(::winrt::Windows::UI::Xaml::Controls::TreeView const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }

        static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::winrt::Windows::UI::Xaml::Controls::ItemsControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }
    }; 

    template struct MainPageT<struct MainPage>;
}


#pragma warning(pop)



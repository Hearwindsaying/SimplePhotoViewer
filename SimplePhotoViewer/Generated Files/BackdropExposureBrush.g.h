// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/Windows.Storage.h"
#include "winrt/Windows.Storage.FileProperties.h"
#include "winrt/Windows.UI.Xaml.h"
#include "winrt/Windows.UI.Xaml.Data.h"
#include "winrt/Windows.UI.Xaml.Interop.h"
#include "winrt/Windows.UI.Xaml.Markup.h"
#include "winrt/Windows.UI.Xaml.Media.Imaging.h"
#include "winrt/Windows.UI.Composition.h"
#include "winrt/Windows.UI.Xaml.Controls.h"
#include "winrt/Windows.UI.Xaml.Media.h"
#include "winrt/SimplePhotoViewer.h"

namespace winrt::SimplePhotoViewer::implementation {

template <typename D, typename... I>
struct WINRT_EBO BackdropExposureBrush_base : implements<D, SimplePhotoViewer::IBackdropExposureBrush, Windows::UI::Xaml::Media::IBrushOverrides2, Windows::UI::Xaml::Media::IXamlCompositionBrushBaseOverrides, composing, I...>,
    impl::require<D, Windows::UI::Composition::IAnimationObject, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::Media::IXamlCompositionBrushBase, Windows::UI::Xaml::Media::IXamlCompositionBrushBaseProtected>,
    impl::base<D, Windows::UI::Xaml::Media::XamlCompositionBrushBase, Windows::UI::Xaml::Media::Brush, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Media::IBrushOverrides2T<D>, Windows::UI::Xaml::Media::IXamlCompositionBrushBaseOverridesT<D>
{
    using base_type = BackdropExposureBrush_base;
    using class_type = SimplePhotoViewer::BackdropExposureBrush;
    using implements_type = typename BackdropExposureBrush_base::implements_type;
    using implements_type::implements_type;
    using composable_base = Windows::UI::Xaml::Media::XamlCompositionBrushBase;
#if _MSC_VER < 1914
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, default_interface<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<default_interface<class_type>>(*this)));
        return result;
    }
#else
    operator impl::producer_ref<class_type> const() const noexcept
    {
        return { to_abi<default_interface<class_type>>(this) };
    }
#endif

    hstring GetRuntimeClassName() const
    {
        return L"SimplePhotoViewer.BackdropExposureBrush";
    }
    BackdropExposureBrush_base()
    {
        impl::call_factory<Windows::UI::Xaml::Media::XamlCompositionBrushBase, Windows::UI::Xaml::Media::IXamlCompositionBrushBaseFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

}

namespace winrt::SimplePhotoViewer::factory_implementation {

template <typename D, typename T, typename... I>
struct WINRT_EBO BackdropExposureBrushT : implements<D, Windows::Foundation::IActivationFactory, SimplePhotoViewer::IBackdropExposureBrushStatics, I...>
{
    using instance_type = SimplePhotoViewer::BackdropExposureBrush;

    hstring GetRuntimeClassName() const
    {
        return L"SimplePhotoViewer.BackdropExposureBrush";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        return make<T>();
    }

    Windows::UI::Xaml::DependencyProperty ExposureProperty()
    {
        return T::ExposureProperty();
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_BACKDROPEXPOSUREBRUSH_XAML_G_H) || __has_include("BackdropExposureBrush.xaml.g.h")

#include "BackdropExposureBrush.xaml.g.h"

#else

namespace winrt::SimplePhotoViewer::implementation
{
    template <typename D, typename... I>
    using BackdropExposureBrushT = BackdropExposureBrush_base<D, I...>;
}

#endif

// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.2.h"
#include "winrt/impl/Windows.Graphics.DirectX.2.h"
#include "winrt/impl/Windows.Graphics.Effects.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Effects.2.h"
#include "winrt/Microsoft.Graphics.Canvas.h"

namespace winrt::impl {

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::AlphaMask() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->get_AlphaMask(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect<D>::AlphaMask(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect)->put_AlphaMask(get_abi(source)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics<D>::IsSupported() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics)->get_IsSupported(&value));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_ClampOutput(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::MultiplyAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_MultiplyAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::MultiplyAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_MultiplyAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source1Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source1Amount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source2Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source2Amount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Offset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Offset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Offset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Offset(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source1(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source1(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source1(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->get_Source2(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect<D>::Source2(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect)->put_Source2(get_abi(source)));
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::SourceRectangle() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->get_SourceRectangle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::SourceRectangle(Windows::Foundation::Rect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->put_SourceRectangle(get_abi(value)));
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::PaddingRectangle() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->get_PaddingRectangle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::PaddingRectangle(Windows::Foundation::Rect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->put_PaddingRectangle(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IAtlasEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IAtlasEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::BlendEffectMode consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Mode() const
{
    Microsoft::Graphics::Canvas::Effects::BlendEffectMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBlendEffect)->get_Mode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Mode(Microsoft::Graphics::Canvas::Effects::BlendEffectMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBlendEffect)->put_Mode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Background() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBlendEffect)->get_Background(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Background(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBlendEffect)->put_Background(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Foreground() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBlendEffect)->get_Foreground(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBlendEffect<D>::Foreground(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBlendEffect)->put_Foreground(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasEdgeBehavior consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendX() const
{
    Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBorderEffect)->get_ExtendX(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendX(Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBorderEffect)->put_ExtendX(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasEdgeBehavior consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendY() const
{
    Microsoft::Graphics::Canvas::CanvasEdgeBehavior value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBorderEffect)->get_ExtendY(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::ExtendY(Microsoft::Graphics::Canvas::CanvasEdgeBehavior const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBorderEffect)->put_ExtendY(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBorderEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBorderEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBorderEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::WhitePoint() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->get_WhitePoint(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::WhitePoint(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->put_WhitePoint(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::BlackPoint() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->get_BlackPoint(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::BlackPoint(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->put_BlackPoint(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IBrightnessEffect)->put_Source(get_abi(source)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::CacheOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->get_CacheOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::CacheOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->put_CacheOutput(value));
}

template <typename D> Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::BufferPrecision() const
{
    Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->get_BufferPrecision(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::BufferPrecision(optional<Microsoft::Graphics::Canvas::CanvasBufferPrecision> const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->put_BufferPrecision(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::InvalidateSourceRectangle(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, uint32_t sourceIndex, Windows::Foundation::Rect const& invalidRectangle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->InvalidateSourceRectangle(get_abi(resourceCreator), sourceIndex, get_abi(invalidRectangle)));
}

template <typename D> com_array<Windows::Foundation::Rect> consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::GetInvalidRectangles(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator) const
{
    com_array<Windows::Foundation::Rect> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->GetInvalidRectangles(get_abi(resourceCreator), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::GetRequiredSourceRectangle(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, Windows::Foundation::Rect const& outputRectangle, Microsoft::Graphics::Canvas::Effects::ICanvasEffect const& sourceEffect, uint32_t sourceIndex, Windows::Foundation::Rect const& sourceBounds) const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->GetRequiredSourceRectangle(get_abi(resourceCreator), get_abi(outputRectangle), get_abi(sourceEffect), sourceIndex, get_abi(sourceBounds), put_abi(value)));
    return value;
}

template <typename D> com_array<Windows::Foundation::Rect> consume_Microsoft_Graphics_Canvas_Effects_ICanvasEffect<D>::GetRequiredSourceRectangles(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, Windows::Foundation::Rect const& outputRectangle, array_view<Microsoft::Graphics::Canvas::Effects::ICanvasEffect const> sourceEffects, array_view<uint32_t const> sourceIndices, array_view<Windows::Foundation::Rect const> sourceBounds) const
{
    com_array<Windows::Foundation::Rect> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICanvasEffect)->GetRequiredSourceRectangles(get_abi(resourceCreator), get_abi(outputRectangle), sourceEffects.size(), get_abi(sourceEffects), sourceIndices.size(), get_abi(sourceIndices), sourceBounds.size(), get_abi(sourceBounds), impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Color(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Tolerance() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Tolerance(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Tolerance(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Tolerance(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::InvertAlpha() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_InvertAlpha(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::InvertAlpha(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_InvertAlpha(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Feather() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Feather(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Feather(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Feather(value));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::ColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_ColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::ColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_ColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfile consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceColorProfile() const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfile value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_SourceColorProfile(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceColorProfile(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_SourceColorProfile(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceRenderingIntent() const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_SourceRenderingIntent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::SourceRenderingIntent(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_SourceRenderingIntent(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfile consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputColorProfile() const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfile value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_OutputColorProfile(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputColorProfile(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_OutputColorProfile(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputRenderingIntent() const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_OutputRenderingIntent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::OutputRenderingIntent(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_OutputRenderingIntent(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_AlphaMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Quality() const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_Quality(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Quality(Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_Quality(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffect)->put_Source(get_abi(source)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics<D>::IsBestQualitySupported(Microsoft::Graphics::Canvas::CanvasDevice const& device) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics)->IsBestQualitySupported(get_abi(device), &result));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasColorSpace consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::ColorSpace() const
{
    Microsoft::Graphics::Canvas::CanvasColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_ColorSpace(put_abi(value)));
    return value;
}

template <typename D> com_array<uint8_t> consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::IccProfile() const
{
    com_array<uint8_t> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_IccProfile(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::Type() const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_Type(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IReference<Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::SimpleProfile() const
{
    Windows::Foundation::IReference<Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_SimpleProfile(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile<D>::ExtendedColorSpace() const
{
    Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfile)->get_ExtendedColorSpace(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfile consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory<D>::Create(Microsoft::Graphics::Canvas::CanvasColorSpace const& colorSpace) const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfile result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory)->Create(get_abi(colorSpace), put_abi(result)));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfile consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::CreateCustom(array_view<uint8_t const> iccProfile) const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfile result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->CreateCustom(iccProfile.size(), get_abi(iccProfile), put_abi(result)));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfile consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::CreateSimple(Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const& simpleProfile) const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfile result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->CreateSimple(get_abi(simpleProfile), put_abi(result)));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::ColorManagementProfile consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::CreateExtended(Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const& colorSpace) const
{
    Microsoft::Graphics::Canvas::Effects::ColorManagementProfile result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->CreateExtended(get_abi(colorSpace), put_abi(result)));
    return result;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics<D>::IsSupported(Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const& type, Microsoft::Graphics::Canvas::CanvasDevice const& device) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics)->IsSupported(get_abi(type), get_abi(device), &result));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::Matrix5x4 consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ColorMatrix() const
{
    Microsoft::Graphics::Canvas::Effects::Matrix5x4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_ColorMatrix(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ColorMatrix(Microsoft::Graphics::Canvas::Effects::Matrix5x4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_ColorMatrix(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_AlphaMode(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->put_Color(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::ColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->get_ColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect<D>::ColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IColorSourceEffect)->put_ColorHdr(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasComposite consume_Microsoft_Graphics_Canvas_Effects_ICompositeEffect<D>::Mode() const
{
    Microsoft::Graphics::Canvas::CanvasComposite value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICompositeEffect)->get_Mode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICompositeEffect<D>::Mode(Microsoft::Graphics::Canvas::CanvasComposite const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICompositeEffect)->put_Mode(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Graphics::Effects::IGraphicsEffectSource> consume_Microsoft_Graphics_Canvas_Effects_ICompositeEffect<D>::Sources() const
{
    Windows::Foundation::Collections::IVector<Windows::Graphics::Effects::IGraphicsEffectSource> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICompositeEffect)->get_Sources(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Contrast() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IContrastEffect)->get_Contrast(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Contrast(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IContrastEffect)->put_Contrast(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::ClampSource() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IContrastEffect)->get_ClampSource(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::ClampSource(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IContrastEffect)->put_ClampSource(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IContrastEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IContrastEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IContrastEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelScale() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelScale(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelScale(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelScale(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::InterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_InterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_InterpolationMode(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelWidth() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelWidth(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelWidth(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelWidth(value));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelHeight() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelHeight(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelHeight(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelHeight(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelMatrix() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelMatrix(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelMatrix(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelMatrix(valueElements.size(), get_abi(valueElements)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Divisor() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_Divisor(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Divisor(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_Divisor(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Offset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_Offset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Offset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_Offset(value));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelOffset() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_KernelOffset(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::KernelOffset(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_KernelOffset(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::PreserveAlpha() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_PreserveAlpha(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::PreserveAlpha(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_PreserveAlpha(value));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::SourceRectangle() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICropEffect)->get_SourceRectangle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::SourceRectangle(Windows::Foundation::Rect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICropEffect)->put_SourceRectangle(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICropEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICropEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICropEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICropEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICropEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::CrossFade() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->get_CrossFade(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::CrossFade(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->put_CrossFade(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source2() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->get_Source2(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source2(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->put_Source2(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source1() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->get_Source1(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect<D>::Source1(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect)->put_Source1(get_abi(source)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics<D>::IsSupported() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics)->get_IsSupported(&value));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BlurAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_BlurAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BlurAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_BlurAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Angle() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_Angle(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Angle(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_Angle(value));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectOptimization consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Optimization() const
{
    Microsoft::Graphics::Canvas::Effects::EffectOptimization value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_Optimization(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_Optimization(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect)->put_Source(get_abi(source)));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_RedTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_RedTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_RedDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::RedDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_RedDisable(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_GreenTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_GreenTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_GreenDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::GreenDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_GreenDisable(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_BlueTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_BlueTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_BlueDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::BlueDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_BlueDisable(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_AlphaTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_AlphaTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_AlphaDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::AlphaDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_AlphaDisable(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_Amount(value));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectChannelSelect consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::XChannelSelect() const
{
    Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_XChannelSelect(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::XChannelSelect(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_XChannelSelect(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectChannelSelect consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::YChannelSelect() const
{
    Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_YChannelSelect(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::YChannelSelect(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_YChannelSelect(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Displacement() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->get_Displacement(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect<D>::Displacement(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect)->put_Displacement(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Azimuth() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_Azimuth(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Azimuth(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_Azimuth(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Elevation() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_Elevation(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Elevation(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_Elevation(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::DiffuseAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_DiffuseAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::DiffuseAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_DiffuseAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapScale() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_HeightMapScale(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapScale(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_HeightMapScale(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_LightColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_LightColor(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapKernelSize() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_HeightMapKernelSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapKernelSize(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_HeightMapKernelSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapInterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_HeightMapInterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_HeightMapInterpolationMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_LightColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::LightColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_LightColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Azimuth() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_Azimuth(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Azimuth(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_Azimuth(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Elevation() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_Elevation(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Elevation(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_Elevation(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_SpecularExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_SpecularExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_SpecularAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::SpecularAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_SpecularAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapScale() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_HeightMapScale(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapScale(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_HeightMapScale(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_LightColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_LightColor(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapKernelSize() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_HeightMapKernelSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapKernelSize(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_HeightMapKernelSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapInterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_HeightMapInterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_HeightMapInterpolationMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_LightColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::LightColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_LightColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::InterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_InterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_InterpolationMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::SourceDpi() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_SourceDpi(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::SourceDpi(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_SourceDpi(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_Amount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::BlurAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_BlurAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::BlurAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_BlurAmount(value));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Mode() const
{
    Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_Mode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Mode(Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_Mode(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::OverlayEdges() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_OverlayEdges(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::OverlayEdges(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_OverlayEdges(value));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_AlphaMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D<D>::Device() const
{
    Microsoft::Graphics::Canvas::CanvasDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D consume_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics<D>::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t sizeB, int32_t sizeG, int32_t sizeR) const
{
    Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics)->CreateFromColors(get_abi(resourceCreator), colors.size(), get_abi(colors), sizeB, sizeG, sizeR, put_abi(result)));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D consume_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t sizeB, int32_t sizeG, int32_t sizeR, Windows::Graphics::DirectX::DirectXPixelFormat const& format) const
{
    Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics)->CreateFromBytes(get_abi(resourceCreator), bytes.size(), get_abi(bytes), sizeB, sizeG, sizeR, get_abi(format), put_abi(result)));
    return result;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->get_Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->put_Amount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Angle() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->get_Angle(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Angle(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->put_Angle(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IEmbossEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IEmbossEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Exposure() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IExposureEffect)->get_Exposure(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Exposure(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IExposureEffect)->put_Exposure(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IExposureEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IExposureEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IExposureEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedAmplitude() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedAmplitude(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedAmplitude(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedAmplitude(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedOffset(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_RedDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::RedDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_RedDisable(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenAmplitude() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenAmplitude(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenAmplitude(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenAmplitude(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenOffset(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_GreenDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::GreenDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_GreenDisable(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueAmplitude() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueAmplitude(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueAmplitude(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueAmplitude(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueOffset(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_BlueDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::BlueDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_BlueDisable(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaAmplitude() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaAmplitude(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaAmplitude(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaAmplitude(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaOffset(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_AlphaDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::AlphaDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_AlphaDisable(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BlurAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_BlurAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BlurAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_BlurAmount(value));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectOptimization consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Optimization() const
{
    Microsoft::Graphics::Canvas::Effects::EffectOptimization value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_Optimization(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_Optimization(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Highlights() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Highlights(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Highlights(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Highlights(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Shadows() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Shadows(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Shadows(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Shadows(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Clarity() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Clarity(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Clarity(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Clarity(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::MaskBlurAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_MaskBlurAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::MaskBlurAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_MaskBlurAmount(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::SourceIsLinearGamma() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_SourceIsLinearGamma(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::SourceIsLinearGamma(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_SourceIsLinearGamma(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Angle() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->get_Angle(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Angle(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->put_Angle(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueRotationEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::SourceColorSpace() const
{
    Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->get_SourceColorSpace(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::SourceColorSpace(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->put_SourceColorSpace(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IInvertEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IInvertEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IInvertEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IInvertEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_RedOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_RedOffset(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedSlope() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_RedSlope(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedSlope(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_RedSlope(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_RedDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::RedDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_RedDisable(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_GreenOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_GreenOffset(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenSlope() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_GreenSlope(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenSlope(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_GreenSlope(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_GreenDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::GreenDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_GreenDisable(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_BlueOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_BlueOffset(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueSlope() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_BlueSlope(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueSlope(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_BlueSlope(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_BlueDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::BlueDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_BlueDisable(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaOffset() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_AlphaOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaOffset(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_AlphaOffset(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaSlope() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_AlphaSlope(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaSlope(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_AlphaSlope(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_AlphaDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::AlphaDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_AlphaDisable(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Mode() const
{
    Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Mode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Mode(Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Mode(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Width() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Width(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Width(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Width(value));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Height() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Height(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Height(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Height(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IMorphologyEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Opacity() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->get_Opacity(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Opacity(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->put_Opacity(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityEffect)->put_Source(get_abi(source)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics<D>::IsSupported() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics)->get_IsSupported(&value));
    return value;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::OpaqueRectangle() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->get_OpaqueRectangle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::OpaqueRectangle(Windows::Foundation::Rect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->put_OpaqueRectangle(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable> consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Properties() const
{
    Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Properties(put_abi(value)));
    return value;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7(put_abi(source)));
    return source;
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7(get_abi(source)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7Mapping(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Mapping() const
{
    Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8Mapping(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7Mapping(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8Mapping(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7BorderMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7BorderMode(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8BorderMode(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::MaxSamplerOffset() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_MaxSamplerOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::MaxSamplerOffset(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_MaxSamplerOffset(value));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source1Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source2Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source3Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source4Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source5Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source6Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source7Interpolation(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Interpolation() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->get_Source8Interpolation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source1Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source1Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source2Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source2Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source3Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source3Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source4Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source4Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source5Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source5Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source6Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source6Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source7Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source7Interpolation(get_abi(value)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::Source8Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->put_Source8Interpolation(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect<D>::IsSupported(Microsoft::Graphics::Canvas::CanvasDevice const& device) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect)->IsSupported(get_abi(device), &result));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::Effects::PixelShaderEffect consume_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory<D>::Create(array_view<uint8_t const> shaderCode) const
{
    Microsoft::Graphics::Canvas::Effects::PixelShaderEffect effect{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory)->Create(shaderCode.size(), get_abi(shaderCode), put_abi(effect)));
    return effect;
}

template <typename D> Windows::Foundation::Numerics::float3 consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightPosition() const
{
    Windows::Foundation::Numerics::float3 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_LightPosition(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightPosition(Windows::Foundation::Numerics::float3 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_LightPosition(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::DiffuseAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_DiffuseAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::DiffuseAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_DiffuseAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapScale() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_HeightMapScale(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapScale(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_HeightMapScale(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_LightColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_LightColor(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapKernelSize() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_HeightMapKernelSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapKernelSize(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_HeightMapKernelSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapInterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_HeightMapInterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_HeightMapInterpolationMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_LightColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::LightColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_LightColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float3 consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightPosition() const
{
    Windows::Foundation::Numerics::float3 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_LightPosition(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightPosition(Windows::Foundation::Numerics::float3 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_LightPosition(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_SpecularExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_SpecularExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_SpecularAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::SpecularAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_SpecularAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapScale() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_HeightMapScale(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapScale(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_HeightMapScale(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_LightColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_LightColor(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapKernelSize() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_HeightMapKernelSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapKernelSize(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_HeightMapKernelSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapInterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_HeightMapInterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_HeightMapInterpolationMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_LightColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::LightColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_LightColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect)->put_Source(get_abi(source)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::RedValueCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_RedValueCount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::RedValueCount(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_RedValueCount(value));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::GreenValueCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_GreenValueCount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::GreenValueCount(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_GreenValueCount(value));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::BlueValueCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_BlueValueCount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::BlueValueCount(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_BlueValueCount(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPosterizeEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::OutputColorSpace() const
{
    Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->get_OutputColorSpace(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::OutputColorSpace(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->put_OutputColorSpace(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Saturation() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->get_Saturation(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Saturation(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->put_Saturation(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISaturationEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISaturationEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Scale() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_Scale(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Scale(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_Scale(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::CenterPoint() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_CenterPoint(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::CenterPoint(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_CenterPoint(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::InterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_InterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_InterpolationMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Sharpness() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_Sharpness(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Sharpness(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_Sharpness(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IScaleEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IScaleEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Intensity() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->get_Intensity(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Intensity(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->put_Intensity(value));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->put_AlphaMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISepiaEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISepiaEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::BlurAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_BlurAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::BlurAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_BlurAmount(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_ShadowColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_ShadowColor(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectOptimization consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Optimization() const
{
    Microsoft::Graphics::Canvas::Effects::EffectOptimization value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_Optimization(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_Optimization(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_ShadowColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::ShadowColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_ShadowColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IShadowEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IShadowEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->get_Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->put_Amount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Threshold() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->get_Threshold(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Threshold(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->put_Threshold(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISharpenEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISharpenEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float3 consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightPosition() const
{
    Windows::Foundation::Numerics::float3 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightPosition(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightPosition(Windows::Foundation::Numerics::float3 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightPosition(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float3 consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightTarget() const
{
    Windows::Foundation::Numerics::float3 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightTarget(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightTarget(Windows::Foundation::Numerics::float3 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightTarget(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Focus() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_Focus(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Focus(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_Focus(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LimitingConeAngle() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LimitingConeAngle(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LimitingConeAngle(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LimitingConeAngle(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::DiffuseAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_DiffuseAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::DiffuseAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_DiffuseAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapScale() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_HeightMapScale(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapScale(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_HeightMapScale(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightColor(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapKernelSize() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_HeightMapKernelSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapKernelSize(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_HeightMapKernelSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapInterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_HeightMapInterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_HeightMapInterpolationMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_LightColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::LightColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_LightColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float3 consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightPosition() const
{
    Windows::Foundation::Numerics::float3 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightPosition(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightPosition(Windows::Foundation::Numerics::float3 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightPosition(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float3 consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightTarget() const
{
    Windows::Foundation::Numerics::float3 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightTarget(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightTarget(Windows::Foundation::Numerics::float3 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightTarget(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Focus() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_Focus(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Focus(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_Focus(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LimitingConeAngle() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LimitingConeAngle(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LimitingConeAngle(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LimitingConeAngle(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularExponent() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_SpecularExponent(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularExponent(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_SpecularExponent(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularAmount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_SpecularAmount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::SpecularAmount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_SpecularAmount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapScale() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_HeightMapScale(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapScale(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_HeightMapScale(value));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColor(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightColor(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapKernelSize() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_HeightMapKernelSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapKernelSize(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_HeightMapKernelSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapInterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_HeightMapInterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_HeightMapInterpolationMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_LightColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::LightColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_LightColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Angle() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_Angle(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Angle(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_Angle(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::MaintainSize() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_MaintainSize(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::MaintainSize(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_MaintainSize(value));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::InterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_InterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_InterpolationMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IStraightenEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IStraightenEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Table() const
{
    Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->get_Table(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Table(Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->put_Table(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->put_AlphaMode(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect)->put_Source(get_abi(source)));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_RedTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_RedTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_RedDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::RedDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_RedDisable(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_GreenTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_GreenTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_GreenDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::GreenDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_GreenDisable(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_BlueTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_BlueTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_BlueDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::BlueDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_BlueDisable(value));
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaTable() const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_AlphaTable(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaTable(array_view<float const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_AlphaTable(valueElements.size(), get_abi(valueElements)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaDisable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_AlphaDisable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::AlphaDisable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_AlphaDisable(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITableTransferEffect)->put_Source(get_abi(source)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Temperature() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->get_Temperature(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Temperature(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->put_Temperature(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Tint() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->get_Tint(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Tint(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->put_Tint(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::SourceRectangle() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITileEffect)->get_SourceRectangle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::SourceRectangle(Windows::Foundation::Rect const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITileEffect)->put_SourceRectangle(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITileEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITileEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITileEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_Color(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ClampOutput() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_ClampOutput(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ClampOutput(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_ClampOutput(value));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_ColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::ColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_ColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITintEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffect)->put_Source(get_abi(source)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITintEffectStatics<D>::IsSupported() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITintEffectStatics)->get_IsSupported(&value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::InterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_InterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_InterpolationMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float3x2 consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::TransformMatrix() const
{
    Windows::Foundation::Numerics::float3x2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_TransformMatrix(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::TransformMatrix(Windows::Foundation::Numerics::float3x2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_TransformMatrix(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Sharpness() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_Sharpness(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Sharpness(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_Sharpness(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform2DEffect)->put_Source(get_abi(source)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasImageInterpolation consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::InterpolationMode() const
{
    Microsoft::Graphics::Canvas::CanvasImageInterpolation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_InterpolationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_InterpolationMode(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::EffectBorderMode consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::BorderMode() const
{
    Microsoft::Graphics::Canvas::Effects::EffectBorderMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_BorderMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_BorderMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4x4 consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::TransformMatrix() const
{
    Windows::Foundation::Numerics::float4x4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_TransformMatrix(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::TransformMatrix(Windows::Foundation::Numerics::float4x4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_TransformMatrix(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITransform3DEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Offset() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Offset(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Offset(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Offset(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Size() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Size(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Size(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Size(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Frequency() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Frequency(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Frequency(Windows::Foundation::Numerics::float2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Frequency(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Octaves() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Octaves(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Octaves(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Octaves(value));
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Seed() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Seed(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Seed(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Seed(value));
}

template <typename D> Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Noise() const
{
    Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Noise(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Noise(Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Noise(get_abi(value)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Tileable() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->get_Tileable(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect<D>::Tileable(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect)->put_Tileable(value));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect)->put_Source(get_abi(source)));
}

template <typename D> Windows::UI::Color consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Color(get_abi(value)));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Amount() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Amount(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Amount(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Amount(value));
}

template <typename D> float consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Curve() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Curve(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Curve(float value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Curve(value));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::ColorHdr() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_ColorHdr(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::ColorHdr(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_ColorHdr(get_abi(value)));
}

template <typename D> Windows::Graphics::Effects::IGraphicsEffectSource consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Source() const
{
    Windows::Graphics::Effects::IGraphicsEffectSource source{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->get_Source(put_abi(source)));
    return source;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_Effects_IVignetteEffect<D>::Source(Windows::Graphics::Effects::IGraphicsEffectSource const& source) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::Effects::IVignetteEffect)->put_Source(get_abi(source)));
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect>
{
    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMask(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMask, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().AlphaMask());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaMask(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMask, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().AlphaMask(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics>
{
    int32_t WINRT_CALL get_IsSupported(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect>
{
    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MultiplyAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MultiplyAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().MultiplyAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MultiplyAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MultiplyAmount, WINRT_WRAP(void), float);
            this->shim().MultiplyAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Source1Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1Amount, WINRT_WRAP(void), float);
            this->shim().Source1Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Source2Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2Amount, WINRT_WRAP(void), float);
            this->shim().Source2Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Offset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Offset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(void), float);
            this->shim().Offset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source1());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source1(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source2());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source2(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IAtlasEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IAtlasEffect>
{
    int32_t WINRT_CALL get_SourceRectangle(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceRectangle(Windows::Foundation::Rect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&);
            this->shim().SourceRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaddingRectangle(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaddingRectangle, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().PaddingRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaddingRectangle(Windows::Foundation::Rect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaddingRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&);
            this->shim().PaddingRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IBlendEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IBlendEffect>
{
    int32_t WINRT_CALL get_Mode(Microsoft::Graphics::Canvas::Effects::BlendEffectMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::BlendEffectMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::BlendEffectMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Mode(Microsoft::Graphics::Canvas::Effects::BlendEffectMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::BlendEffectMode const&);
            this->shim().Mode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::BlendEffectMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Background(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Background());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Background(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Background(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Foreground(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Foreground, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Foreground());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Foreground(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Foreground, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Foreground(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IBorderEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IBorderEffect>
{
    int32_t WINRT_CALL get_ExtendX(Microsoft::Graphics::Canvas::CanvasEdgeBehavior* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendX, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasEdgeBehavior));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().ExtendX());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ExtendX(Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendX, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&);
            this->shim().ExtendX(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtendY(Microsoft::Graphics::Canvas::CanvasEdgeBehavior* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendY, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasEdgeBehavior));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasEdgeBehavior>(this->shim().ExtendY());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ExtendY(Microsoft::Graphics::Canvas::CanvasEdgeBehavior value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendY, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasEdgeBehavior const&);
            this->shim().ExtendY(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasEdgeBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IBrightnessEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IBrightnessEffect>
{
    int32_t WINRT_CALL get_WhitePoint(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WhitePoint, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().WhitePoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_WhitePoint(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WhitePoint, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().WhitePoint(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlackPoint(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlackPoint, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().BlackPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlackPoint(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlackPoint, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().BlackPoint(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ICanvasEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ICanvasEffect>
{
    int32_t WINRT_CALL get_CacheOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CacheOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().CacheOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CacheOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CacheOutput, WINRT_WRAP(void), bool);
            this->shim().CacheOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BufferPrecision(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BufferPrecision, WINRT_WRAP(Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision>));
            *value = detach_from<Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision>>(this->shim().BufferPrecision());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BufferPrecision(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BufferPrecision, WINRT_WRAP(void), Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> const&);
            this->shim().BufferPrecision(*reinterpret_cast<Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL InvalidateSourceRectangle(void* resourceCreator, uint32_t sourceIndex, Windows::Foundation::Rect invalidRectangle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvalidateSourceRectangle, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, uint32_t, Windows::Foundation::Rect const&);
            this->shim().InvalidateSourceRectangle(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), sourceIndex, *reinterpret_cast<Windows::Foundation::Rect const*>(&invalidRectangle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetInvalidRectangles(void* resourceCreator, uint32_t* __valueElementsSize, Windows::Foundation::Rect** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetInvalidRectangles, WINRT_WRAP(com_array<Windows::Foundation::Rect>), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetInvalidRectangles(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetRequiredSourceRectangle(void* resourceCreator, Windows::Foundation::Rect outputRectangle, void* sourceEffect, uint32_t sourceIndex, Windows::Foundation::Rect sourceBounds, Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRequiredSourceRectangle, WINRT_WRAP(Windows::Foundation::Rect), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Effects::ICanvasEffect const&, uint32_t, Windows::Foundation::Rect const&);
            *value = detach_from<Windows::Foundation::Rect>(this->shim().GetRequiredSourceRectangle(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Rect const*>(&outputRectangle), *reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ICanvasEffect const*>(&sourceEffect), sourceIndex, *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceBounds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetRequiredSourceRectangles(void* resourceCreator, Windows::Foundation::Rect outputRectangle, uint32_t __sourceEffectsSize, void** sourceEffects, uint32_t __sourceIndicesSize, uint32_t* sourceIndices, uint32_t __sourceBoundsSize, Windows::Foundation::Rect* sourceBounds, uint32_t* __valueElementsSize, Windows::Foundation::Rect** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetRequiredSourceRectangles, WINRT_WRAP(com_array<Windows::Foundation::Rect>), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, Windows::Foundation::Rect const&, array_view<Microsoft::Graphics::Canvas::Effects::ICanvasEffect const>, array_view<uint32_t const>, array_view<Windows::Foundation::Rect const>);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetRequiredSourceRectangles(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Rect const*>(&outputRectangle), array_view<Microsoft::Graphics::Canvas::Effects::ICanvasEffect const>(reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ICanvasEffect const *>(sourceEffects), reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ICanvasEffect const *>(sourceEffects) + __sourceEffectsSize), array_view<uint32_t const>(reinterpret_cast<uint32_t const *>(sourceIndices), reinterpret_cast<uint32_t const *>(sourceIndices) + __sourceIndicesSize), array_view<Windows::Foundation::Rect const>(reinterpret_cast<Windows::Foundation::Rect const *>(sourceBounds), reinterpret_cast<Windows::Foundation::Rect const *>(sourceBounds) + __sourceBoundsSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Tolerance(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Tolerance, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Tolerance());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Tolerance(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Tolerance, WINRT_WRAP(void), float);
            this->shim().Tolerance(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InvertAlpha(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvertAlpha, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().InvertAlpha());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InvertAlpha(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvertAlpha, WINRT_WRAP(void), bool);
            this->shim().InvertAlpha(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Feather(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Feather, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Feather());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Feather(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Feather, WINRT_WRAP(void), bool);
            this->shim().Feather(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().ColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorManagementEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorManagementEffect>
{
    int32_t WINRT_CALL get_SourceColorProfile(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceColorProfile, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().SourceColorProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceColorProfile(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceColorProfile, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const&);
            this->shim().SourceColorProfile(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceRenderingIntent(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRenderingIntent, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent>(this->shim().SourceRenderingIntent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceRenderingIntent(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRenderingIntent, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const&);
            this->shim().SourceRenderingIntent(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OutputColorProfile(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputColorProfile, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().OutputColorProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OutputColorProfile(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputColorProfile, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const&);
            this->shim().OutputColorProfile(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OutputRenderingIntent(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputRenderingIntent, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent>(this->shim().OutputRenderingIntent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OutputRenderingIntent(Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputRenderingIntent, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const&);
            this->shim().OutputRenderingIntent(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            this->shim().AlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Quality(Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Quality, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality>(this->shim().Quality());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Quality(Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Quality, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality const&);
            this->shim().Quality(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics>
{
    int32_t WINRT_CALL IsBestQualitySupported(void* device, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBestQualitySupported, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::CanvasDevice const&);
            *result = detach_from<bool>(this->shim().IsBestQualitySupported(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorManagementProfile> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorManagementProfile>
{
    int32_t WINRT_CALL get_ColorSpace(Microsoft::Graphics::Canvas::CanvasColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasColorSpace>(this->shim().ColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IccProfile(uint32_t* __valueElementsSize, uint8_t** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IccProfile, WINRT_WRAP(com_array<uint8_t>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().IccProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Type(Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Type, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType>(this->shim().Type());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SimpleProfile(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SimpleProfile, WINRT_WRAP(Windows::Foundation::IReference<Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile>));
            *value = detach_from<Windows::Foundation::IReference<Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile>>(this->shim().SimpleProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtendedColorSpace(Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtendedColorSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace>(this->shim().ExtendedColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory>
{
    int32_t WINRT_CALL Create(Microsoft::Graphics::Canvas::CanvasColorSpace colorSpace, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile), Microsoft::Graphics::Canvas::CanvasColorSpace const&);
            *result = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasColorSpace const*>(&colorSpace)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics>
{
    int32_t WINRT_CALL CreateCustom(uint32_t __iccProfileSize, uint8_t* iccProfile, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateCustom, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile), array_view<uint8_t const>);
            *result = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().CreateCustom(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(iccProfile), reinterpret_cast<uint8_t const *>(iccProfile) + __iccProfileSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSimple(struct struct_Microsoft_Graphics_Canvas_Effects_ColorManagementSimpleProfile simpleProfile, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSimple, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile), Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const&);
            *result = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().CreateSimple(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const*>(&simpleProfile)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateExtended(Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace colorSpace, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateExtended, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::ColorManagementProfile), Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const&);
            *result = detach_from<Microsoft::Graphics::Canvas::Effects::ColorManagementProfile>(this->shim().CreateExtended(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const*>(&colorSpace)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsSupported(Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType type, void* device, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const&, Microsoft::Graphics::Canvas::CanvasDevice const&);
            *result = detach_from<bool>(this->shim().IsSupported(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const*>(&type), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect>
{
    int32_t WINRT_CALL get_ColorMatrix(struct struct_Microsoft_Graphics_Canvas_Effects_Matrix5x4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorMatrix, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::Matrix5x4));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::Matrix5x4>(this->shim().ColorMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorMatrix(struct struct_Microsoft_Graphics_Canvas_Effects_Matrix5x4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorMatrix, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::Matrix5x4 const&);
            this->shim().ColorMatrix(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::Matrix5x4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            this->shim().AlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IColorSourceEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IColorSourceEffect>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().ColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ICompositeEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ICompositeEffect>
{
    int32_t WINRT_CALL get_Mode(Microsoft::Graphics::Canvas::CanvasComposite* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasComposite));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasComposite>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Mode(Microsoft::Graphics::Canvas::CanvasComposite value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasComposite const&);
            this->shim().Mode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasComposite const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Sources(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Sources, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::Graphics::Effects::IGraphicsEffectSource>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::Graphics::Effects::IGraphicsEffectSource>>(this->shim().Sources());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IContrastEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IContrastEffect>
{
    int32_t WINRT_CALL get_Contrast(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Contrast, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Contrast());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Contrast(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Contrast, WINRT_WRAP(void), float);
            this->shim().Contrast(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampSource(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampSource, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampSource(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampSource, WINRT_WRAP(void), bool);
            this->shim().ClampSource(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect>
{
    int32_t WINRT_CALL get_KernelScale(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelScale, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().KernelScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_KernelScale(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelScale, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().KernelScale(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().InterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_KernelWidth(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelWidth, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().KernelWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_KernelWidth(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelWidth, WINRT_WRAP(void), int32_t);
            this->shim().KernelWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_KernelHeight(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelHeight, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().KernelHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_KernelHeight(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelHeight, WINRT_WRAP(void), int32_t);
            this->shim().KernelHeight(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_KernelMatrix(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelMatrix, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().KernelMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_KernelMatrix(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelMatrix, WINRT_WRAP(void), array_view<float const>);
            this->shim().KernelMatrix(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Divisor(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Divisor, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Divisor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Divisor(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Divisor, WINRT_WRAP(void), float);
            this->shim().Divisor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Offset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Offset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(void), float);
            this->shim().Offset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_KernelOffset(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelOffset, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().KernelOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_KernelOffset(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KernelOffset, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().KernelOffset(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreserveAlpha(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreserveAlpha, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().PreserveAlpha());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PreserveAlpha(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreserveAlpha, WINRT_WRAP(void), bool);
            this->shim().PreserveAlpha(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ICropEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ICropEffect>
{
    int32_t WINRT_CALL get_SourceRectangle(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceRectangle(Windows::Foundation::Rect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&);
            this->shim().SourceRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect>
{
    int32_t WINRT_CALL get_CrossFade(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CrossFade, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().CrossFade());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CrossFade(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CrossFade, WINRT_WRAP(void), float);
            this->shim().CrossFade(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source2());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source2(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source1());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source1(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics>
{
    int32_t WINRT_CALL get_IsSupported(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect>
{
    int32_t WINRT_CALL get_BlurAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlurAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(void), float);
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Angle(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Angle(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(void), float);
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Optimization, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectOptimization));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectOptimization>(this->shim().Optimization());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Optimization, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectOptimization const&);
            this->shim().Optimization(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectOptimization const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect>
{
    int32_t WINRT_CALL get_RedTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().RedTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().RedTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(void), bool);
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GreenTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().GreenTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(void), bool);
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().BlueTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().BlueTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(void), bool);
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().AlphaTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().AlphaTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(void), bool);
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect>
{
    int32_t WINRT_CALL get_Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(void), float);
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_XChannelSelect(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(XChannelSelect, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectChannelSelect>(this->shim().XChannelSelect());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_XChannelSelect(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(XChannelSelect, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const&);
            this->shim().XChannelSelect(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_YChannelSelect(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(YChannelSelect, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectChannelSelect>(this->shim().YChannelSelect());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_YChannelSelect(Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(YChannelSelect, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const&);
            this->shim().YChannelSelect(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Displacement(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Displacement, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Displacement());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Displacement(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Displacement, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Displacement(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect>
{
    int32_t WINRT_CALL get_Azimuth(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Azimuth, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Azimuth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Azimuth(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Azimuth, WINRT_WRAP(void), float);
            this->shim().Azimuth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Elevation(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Elevation, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Elevation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Elevation(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Elevation, WINRT_WRAP(void), float);
            this->shim().Elevation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DiffuseAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiffuseAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().DiffuseAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DiffuseAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiffuseAmount, WINRT_WRAP(void), float);
            this->shim().DiffuseAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapScale(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapScale(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(void), float);
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().LightColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapKernelSize(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapKernelSize(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().HeightMapKernelSize(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().LightColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect>
{
    int32_t WINRT_CALL get_Azimuth(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Azimuth, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Azimuth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Azimuth(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Azimuth, WINRT_WRAP(void), float);
            this->shim().Azimuth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Elevation(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Elevation, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Elevation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Elevation(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Elevation, WINRT_WRAP(void), float);
            this->shim().Elevation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpecularExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().SpecularExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SpecularExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularExponent, WINRT_WRAP(void), float);
            this->shim().SpecularExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpecularAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().SpecularAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SpecularAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularAmount, WINRT_WRAP(void), float);
            this->shim().SpecularAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapScale(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapScale(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(void), float);
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().LightColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapKernelSize(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapKernelSize(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().HeightMapKernelSize(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().LightColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect>
{
    int32_t WINRT_CALL get_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().InterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceDpi(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceDpi, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().SourceDpi());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceDpi(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceDpi, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().SourceDpi(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect>
{
    int32_t WINRT_CALL get_Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(void), float);
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlurAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlurAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(void), float);
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Mode(Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Mode(Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode const&);
            this->shim().Mode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OverlayEdges(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverlayEdges, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().OverlayEdges());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OverlayEdges(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverlayEdges, WINRT_WRAP(void), bool);
            this->shim().OverlayEdges(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            this->shim().AlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D>
{
    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics>
{
    int32_t WINRT_CALL CreateFromColors(void* resourceCreator, uint32_t __colorsSize, struct struct_Windows_UI_Color* colors, int32_t sizeB, int32_t sizeG, int32_t sizeR, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromColors, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Windows::UI::Color const>, int32_t, int32_t, int32_t);
            *result = detach_from<Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D>(this->shim().CreateFromColors(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Windows::UI::Color const>(reinterpret_cast<Windows::UI::Color const *>(colors), reinterpret_cast<Windows::UI::Color const *>(colors) + __colorsSize), sizeB, sizeG, sizeR));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytes(void* resourceCreator, uint32_t __bytesSize, uint8_t* bytes, int32_t sizeB, int32_t sizeG, int32_t sizeR, Windows::Graphics::DirectX::DirectXPixelFormat format, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<uint8_t const>, int32_t, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&);
            *result = detach_from<Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(bytes), reinterpret_cast<uint8_t const *>(bytes) + __bytesSize), sizeB, sizeG, sizeR, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IEmbossEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IEmbossEffect>
{
    int32_t WINRT_CALL get_Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(void), float);
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Angle(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Angle(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(void), float);
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IExposureEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IExposureEffect>
{
    int32_t WINRT_CALL get_Exposure(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Exposure, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Exposure());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Exposure(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Exposure, WINRT_WRAP(void), float);
            this->shim().Exposure(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect>
{
    int32_t WINRT_CALL get_RedAmplitude(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedAmplitude, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RedAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedAmplitude(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedAmplitude, WINRT_WRAP(void), float);
            this->shim().RedAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RedExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedExponent, WINRT_WRAP(void), float);
            this->shim().RedExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RedOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedOffset, WINRT_WRAP(void), float);
            this->shim().RedOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(void), bool);
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenAmplitude(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenAmplitude, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().GreenAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenAmplitude(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenAmplitude, WINRT_WRAP(void), float);
            this->shim().GreenAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().GreenExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenExponent, WINRT_WRAP(void), float);
            this->shim().GreenExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().GreenOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenOffset, WINRT_WRAP(void), float);
            this->shim().GreenOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(void), bool);
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueAmplitude(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueAmplitude, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlueAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueAmplitude(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueAmplitude, WINRT_WRAP(void), float);
            this->shim().BlueAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlueExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueExponent, WINRT_WRAP(void), float);
            this->shim().BlueExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlueOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueOffset, WINRT_WRAP(void), float);
            this->shim().BlueOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(void), bool);
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaAmplitude(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaAmplitude, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().AlphaAmplitude());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaAmplitude(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaAmplitude, WINRT_WRAP(void), float);
            this->shim().AlphaAmplitude(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().AlphaExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaExponent, WINRT_WRAP(void), float);
            this->shim().AlphaExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().AlphaOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaOffset, WINRT_WRAP(void), float);
            this->shim().AlphaOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(void), bool);
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect>
{
    int32_t WINRT_CALL get_BlurAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlurAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(void), float);
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Optimization, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectOptimization));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectOptimization>(this->shim().Optimization());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Optimization, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectOptimization const&);
            this->shim().Optimization(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectOptimization const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect>
{
    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect>
{
    int32_t WINRT_CALL get_Highlights(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Highlights, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Highlights());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Highlights(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Highlights, WINRT_WRAP(void), float);
            this->shim().Highlights(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Shadows(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Shadows, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Shadows());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Shadows(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Shadows, WINRT_WRAP(void), float);
            this->shim().Shadows(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Clarity(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Clarity, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Clarity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Clarity(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Clarity, WINRT_WRAP(void), float);
            this->shim().Clarity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaskBlurAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaskBlurAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().MaskBlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaskBlurAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaskBlurAmount, WINRT_WRAP(void), float);
            this->shim().MaskBlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceIsLinearGamma(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceIsLinearGamma, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().SourceIsLinearGamma());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceIsLinearGamma(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceIsLinearGamma, WINRT_WRAP(void), bool);
            this->shim().SourceIsLinearGamma(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IHueRotationEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IHueRotationEffect>
{
    int32_t WINRT_CALL get_Angle(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Angle(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(void), float);
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect>
{
    int32_t WINRT_CALL get_SourceColorSpace(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceColorSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace>(this->shim().SourceColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceColorSpace(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceColorSpace, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const&);
            this->shim().SourceColorSpace(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IInvertEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IInvertEffect>
{
    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect>
{
    int32_t WINRT_CALL get_RedOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RedOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedOffset, WINRT_WRAP(void), float);
            this->shim().RedOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedSlope(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedSlope, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().RedSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedSlope(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedSlope, WINRT_WRAP(void), float);
            this->shim().RedSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(void), bool);
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().GreenOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenOffset, WINRT_WRAP(void), float);
            this->shim().GreenOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenSlope(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenSlope, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().GreenSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenSlope(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenSlope, WINRT_WRAP(void), float);
            this->shim().GreenSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(void), bool);
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlueOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueOffset, WINRT_WRAP(void), float);
            this->shim().BlueOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueSlope(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueSlope, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlueSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueSlope(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueSlope, WINRT_WRAP(void), float);
            this->shim().BlueSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(void), bool);
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaOffset(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaOffset, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().AlphaOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaOffset(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaOffset, WINRT_WRAP(void), float);
            this->shim().AlphaOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaSlope(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaSlope, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().AlphaSlope());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaSlope(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaSlope, WINRT_WRAP(void), float);
            this->shim().AlphaSlope(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(void), bool);
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect>
{
    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IMorphologyEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IMorphologyEffect>
{
    int32_t WINRT_CALL get_Mode(Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Mode(Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode const&);
            this->shim().Mode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Width(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Width, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Width());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Width(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Width, WINRT_WRAP(void), int32_t);
            this->shim().Width(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Height(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Height, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Height());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Height(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Height, WINRT_WRAP(void), int32_t);
            this->shim().Height(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IOpacityEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IOpacityEffect>
{
    int32_t WINRT_CALL get_Opacity(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Opacity, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Opacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Opacity(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Opacity, WINRT_WRAP(void), float);
            this->shim().Opacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics>
{
    int32_t WINRT_CALL get_IsSupported(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect>
{
    int32_t WINRT_CALL get_OpaqueRectangle(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpaqueRectangle, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().OpaqueRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OpaqueRectangle(Windows::Foundation::Rect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpaqueRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&);
            this->shim().OpaqueRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect>
{
    int32_t WINRT_CALL get_Properties(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Properties, WINRT_WRAP(Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>>(this->shim().Properties());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source1());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source2());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source3(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source3());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source4(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source4());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source5(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source5());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source6(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source6());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source7(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source7());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source8(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source8());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source1(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source2(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source3(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source3(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source4(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source4(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source5(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source5(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source6(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source6(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source7(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source7(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source8(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source8(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source1Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source2Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source3Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source3Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source4Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source4Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source5Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source5Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source6Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source6Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source7Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source7Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source8Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8Mapping, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping>(this->shim().Source8Mapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source1Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source2Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source3Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source3Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source4Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source4Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source5Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source5Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source6Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source6Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source7Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source7Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source8Mapping(Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8Mapping, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const&);
            this->shim().Source8Mapping(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source1BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source2BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source3BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source3BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source4BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source4BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source5BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source5BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source6BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source6BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source7BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source7BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source8BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().Source8BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source1BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source2BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source3BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source3BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source4BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source4BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source5BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source5BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source6BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source6BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source7BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source7BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source8BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().Source8BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxSamplerOffset(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSamplerOffset, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxSamplerOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxSamplerOffset(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSamplerOffset, WINRT_WRAP(void), int32_t);
            this->shim().MaxSamplerOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source1Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source1Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source2Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source2Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source3Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source3Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source4Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source4Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source5Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source5Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source6Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source6Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source7Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source7Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source8Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8Interpolation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().Source8Interpolation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source1Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source1Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source1Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source2Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source2Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source2Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source3Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source3Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source3Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source4Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source4Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source4Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source5Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source5Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source5Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source6Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source6Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source6Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source7Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source7Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source7Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source8Interpolation(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source8Interpolation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().Source8Interpolation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsSupported(void* device, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::CanvasDevice const&);
            *result = detach_from<bool>(this->shim().IsSupported(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory>
{
    int32_t WINRT_CALL Create(uint32_t __shaderCodeSize, uint8_t* shaderCode, void** effect) noexcept final
    {
        try
        {
            *effect = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::PixelShaderEffect), array_view<uint8_t const>);
            *effect = detach_from<Microsoft::Graphics::Canvas::Effects::PixelShaderEffect>(this->shim().Create(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(shaderCode), reinterpret_cast<uint8_t const *>(shaderCode) + __shaderCodeSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect>
{
    int32_t WINRT_CALL get_LightPosition(Windows::Foundation::Numerics::float3* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(Windows::Foundation::Numerics::float3));
            *value = detach_from<Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightPosition(Windows::Foundation::Numerics::float3 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(void), Windows::Foundation::Numerics::float3 const&);
            this->shim().LightPosition(*reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DiffuseAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiffuseAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().DiffuseAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DiffuseAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiffuseAmount, WINRT_WRAP(void), float);
            this->shim().DiffuseAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapScale(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapScale(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(void), float);
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().LightColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapKernelSize(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapKernelSize(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().HeightMapKernelSize(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().LightColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect>
{
    int32_t WINRT_CALL get_LightPosition(Windows::Foundation::Numerics::float3* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(Windows::Foundation::Numerics::float3));
            *value = detach_from<Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightPosition(Windows::Foundation::Numerics::float3 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(void), Windows::Foundation::Numerics::float3 const&);
            this->shim().LightPosition(*reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpecularExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().SpecularExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SpecularExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularExponent, WINRT_WRAP(void), float);
            this->shim().SpecularExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpecularAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().SpecularAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SpecularAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularAmount, WINRT_WRAP(void), float);
            this->shim().SpecularAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapScale(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapScale(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(void), float);
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().LightColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapKernelSize(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapKernelSize(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().HeightMapKernelSize(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().LightColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IPosterizeEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IPosterizeEffect>
{
    int32_t WINRT_CALL get_RedValueCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedValueCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().RedValueCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedValueCount(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedValueCount, WINRT_WRAP(void), int32_t);
            this->shim().RedValueCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenValueCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenValueCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().GreenValueCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenValueCount(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenValueCount, WINRT_WRAP(void), int32_t);
            this->shim().GreenValueCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueValueCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueValueCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().BlueValueCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueValueCount(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueValueCount, WINRT_WRAP(void), int32_t);
            this->shim().BlueValueCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect>
{
    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect>
{
    int32_t WINRT_CALL get_OutputColorSpace(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputColorSpace, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace>(this->shim().OutputColorSpace());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OutputColorSpace(Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OutputColorSpace, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const&);
            this->shim().OutputColorSpace(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ISaturationEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ISaturationEffect>
{
    int32_t WINRT_CALL get_Saturation(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Saturation, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Saturation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Saturation(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Saturation, WINRT_WRAP(void), float);
            this->shim().Saturation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IScaleEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IScaleEffect>
{
    int32_t WINRT_CALL get_Scale(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Scale, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().Scale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Scale(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Scale, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().Scale(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CenterPoint(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CenterPoint, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().CenterPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CenterPoint(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CenterPoint, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().CenterPoint(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().InterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Sharpness(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Sharpness, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Sharpness());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Sharpness(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Sharpness, WINRT_WRAP(void), float);
            this->shim().Sharpness(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ISepiaEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ISepiaEffect>
{
    int32_t WINRT_CALL get_Intensity(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Intensity, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Intensity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Intensity(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Intensity, WINRT_WRAP(void), float);
            this->shim().Intensity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            this->shim().AlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IShadowEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IShadowEffect>
{
    int32_t WINRT_CALL get_BlurAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlurAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(void), float);
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShadowColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShadowColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().ShadowColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ShadowColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShadowColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().ShadowColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Optimization, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectOptimization));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectOptimization>(this->shim().Optimization());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Optimization(Microsoft::Graphics::Canvas::Effects::EffectOptimization value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Optimization, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectOptimization const&);
            this->shim().Optimization(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectOptimization const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShadowColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShadowColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().ShadowColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ShadowColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShadowColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().ShadowColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ISharpenEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ISharpenEffect>
{
    int32_t WINRT_CALL get_Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(void), float);
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Threshold(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Threshold, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Threshold());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Threshold(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Threshold, WINRT_WRAP(void), float);
            this->shim().Threshold(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect>
{
    int32_t WINRT_CALL get_LightPosition(Windows::Foundation::Numerics::float3* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(Windows::Foundation::Numerics::float3));
            *value = detach_from<Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightPosition(Windows::Foundation::Numerics::float3 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(void), Windows::Foundation::Numerics::float3 const&);
            this->shim().LightPosition(*reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightTarget(Windows::Foundation::Numerics::float3* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightTarget, WINRT_WRAP(Windows::Foundation::Numerics::float3));
            *value = detach_from<Windows::Foundation::Numerics::float3>(this->shim().LightTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightTarget(Windows::Foundation::Numerics::float3 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightTarget, WINRT_WRAP(void), Windows::Foundation::Numerics::float3 const&);
            this->shim().LightTarget(*reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Focus(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Focus, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Focus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Focus(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Focus, WINRT_WRAP(void), float);
            this->shim().Focus(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LimitingConeAngle(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LimitingConeAngle, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LimitingConeAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LimitingConeAngle(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LimitingConeAngle, WINRT_WRAP(void), float);
            this->shim().LimitingConeAngle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DiffuseAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiffuseAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().DiffuseAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DiffuseAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiffuseAmount, WINRT_WRAP(void), float);
            this->shim().DiffuseAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapScale(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapScale(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(void), float);
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().LightColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapKernelSize(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapKernelSize(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().HeightMapKernelSize(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().LightColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect>
{
    int32_t WINRT_CALL get_LightPosition(Windows::Foundation::Numerics::float3* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(Windows::Foundation::Numerics::float3));
            *value = detach_from<Windows::Foundation::Numerics::float3>(this->shim().LightPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightPosition(Windows::Foundation::Numerics::float3 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightPosition, WINRT_WRAP(void), Windows::Foundation::Numerics::float3 const&);
            this->shim().LightPosition(*reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightTarget(Windows::Foundation::Numerics::float3* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightTarget, WINRT_WRAP(Windows::Foundation::Numerics::float3));
            *value = detach_from<Windows::Foundation::Numerics::float3>(this->shim().LightTarget());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightTarget(Windows::Foundation::Numerics::float3 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightTarget, WINRT_WRAP(void), Windows::Foundation::Numerics::float3 const&);
            this->shim().LightTarget(*reinterpret_cast<Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Focus(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Focus, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Focus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Focus(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Focus, WINRT_WRAP(void), float);
            this->shim().Focus(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LimitingConeAngle(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LimitingConeAngle, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().LimitingConeAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LimitingConeAngle(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LimitingConeAngle, WINRT_WRAP(void), float);
            this->shim().LimitingConeAngle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpecularExponent(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularExponent, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().SpecularExponent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SpecularExponent(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularExponent, WINRT_WRAP(void), float);
            this->shim().SpecularExponent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpecularAmount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularAmount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().SpecularAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SpecularAmount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpecularAmount, WINRT_WRAP(void), float);
            this->shim().SpecularAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapScale(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().HeightMapScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapScale(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapScale, WINRT_WRAP(void), float);
            this->shim().HeightMapScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().LightColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColor(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColor, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().LightColor(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapKernelSize(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().HeightMapKernelSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapKernelSize(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapKernelSize, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().HeightMapKernelSize(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().HeightMapInterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeightMapInterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeightMapInterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().HeightMapInterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LightColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().LightColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LightColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LightColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().LightColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IStraightenEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IStraightenEffect>
{
    int32_t WINRT_CALL get_Angle(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Angle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Angle(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Angle, WINRT_WRAP(void), float);
            this->shim().Angle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaintainSize(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaintainSize, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().MaintainSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaintainSize(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaintainSize, WINRT_WRAP(void), bool);
            this->shim().MaintainSize(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().InterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect>
{
    int32_t WINRT_CALL get_Table(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Table, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D>(this->shim().Table());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Table(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Table, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D const&);
            this->shim().Table(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            this->shim().AlphaMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITableTransferEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITableTransferEffect>
{
    int32_t WINRT_CALL get_RedTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().RedTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().RedTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RedDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().RedDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RedDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RedDisable, WINRT_WRAP(void), bool);
            this->shim().RedDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GreenTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().GreenTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GreenDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().GreenDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GreenDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GreenDisable, WINRT_WRAP(void), bool);
            this->shim().GreenDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().BlueTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().BlueTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BlueDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().BlueDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlueDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlueDisable, WINRT_WRAP(void), bool);
            this->shim().BlueDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaTable(uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaTable, WINRT_WRAP(com_array<float>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().AlphaTable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaTable(uint32_t __valueElementsSize, float* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaTable, WINRT_WRAP(void), array_view<float const>);
            this->shim().AlphaTable(array_view<float const>(reinterpret_cast<float const *>(valueElements), reinterpret_cast<float const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaDisable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AlphaDisable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlphaDisable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaDisable, WINRT_WRAP(void), bool);
            this->shim().AlphaDisable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect>
{
    int32_t WINRT_CALL get_Temperature(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Temperature, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Temperature());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Temperature(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Temperature, WINRT_WRAP(void), float);
            this->shim().Temperature(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Tint(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Tint, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Tint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Tint(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Tint, WINRT_WRAP(void), float);
            this->shim().Tint(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITileEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITileEffect>
{
    int32_t WINRT_CALL get_SourceRectangle(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().SourceRectangle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceRectangle(Windows::Foundation::Rect value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&);
            this->shim().SourceRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITintEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITintEffect>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ClampOutput(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ClampOutput());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ClampOutput(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClampOutput, WINRT_WRAP(void), bool);
            this->shim().ClampOutput(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().ColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITintEffectStatics> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITintEffectStatics>
{
    int32_t WINRT_CALL get_IsSupported(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITransform2DEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITransform2DEffect>
{
    int32_t WINRT_CALL get_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().InterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TransformMatrix(Windows::Foundation::Numerics::float3x2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TransformMatrix, WINRT_WRAP(Windows::Foundation::Numerics::float3x2));
            *value = detach_from<Windows::Foundation::Numerics::float3x2>(this->shim().TransformMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TransformMatrix(Windows::Foundation::Numerics::float3x2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TransformMatrix, WINRT_WRAP(void), Windows::Foundation::Numerics::float3x2 const&);
            this->shim().TransformMatrix(*reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Sharpness(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Sharpness, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Sharpness());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Sharpness(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Sharpness, WINRT_WRAP(void), float);
            this->shim().Sharpness(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITransform3DEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITransform3DEffect>
{
    int32_t WINRT_CALL get_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasImageInterpolation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasImageInterpolation>(this->shim().InterpolationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InterpolationMode(Microsoft::Graphics::Canvas::CanvasImageInterpolation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InterpolationMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().InterpolationMode(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::EffectBorderMode));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::EffectBorderMode>(this->shim().BorderMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderMode(Microsoft::Graphics::Canvas::Effects::EffectBorderMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderMode, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::EffectBorderMode const&);
            this->shim().BorderMode(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectBorderMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TransformMatrix(Windows::Foundation::Numerics::float4x4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TransformMatrix, WINRT_WRAP(Windows::Foundation::Numerics::float4x4));
            *value = detach_from<Windows::Foundation::Numerics::float4x4>(this->shim().TransformMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TransformMatrix(Windows::Foundation::Numerics::float4x4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TransformMatrix, WINRT_WRAP(void), Windows::Foundation::Numerics::float4x4 const&);
            this->shim().TransformMatrix(*reinterpret_cast<Windows::Foundation::Numerics::float4x4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect>
{
    int32_t WINRT_CALL get_Offset(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Offset(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().Offset(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Size(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Size(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().Size(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Frequency(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Frequency, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().Frequency());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Frequency(Windows::Foundation::Numerics::float2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Frequency, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&);
            this->shim().Frequency(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Octaves(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Octaves, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Octaves());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Octaves(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Octaves, WINRT_WRAP(void), int32_t);
            this->shim().Octaves(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Seed(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Seed, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Seed());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Seed(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Seed, WINRT_WRAP(void), int32_t);
            this->shim().Seed(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Noise(Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Noise, WINRT_WRAP(Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise));
            *value = detach_from<Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise>(this->shim().Noise());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Noise(Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Noise, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise const&);
            this->shim().Noise(*reinterpret_cast<Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Tileable(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Tileable, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Tileable());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Tileable(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Tileable, WINRT_WRAP(void), bool);
            this->shim().Tileable(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect>
{
    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::Effects::IVignetteEffect> : produce_base<D, Microsoft::Graphics::Canvas::Effects::IVignetteEffect>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Amount(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Amount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Amount(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Amount, WINRT_WRAP(void), float);
            this->shim().Amount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Curve(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Curve, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().Curve());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Curve(float value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Curve, WINRT_WRAP(void), float);
            this->shim().Curve(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorHdr(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().ColorHdr());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorHdr(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorHdr, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().ColorHdr(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** source) noexcept final
    {
        try
        {
            *source = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Graphics::Effects::IGraphicsEffectSource));
            *source = detach_from<Windows::Graphics::Effects::IGraphicsEffectSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* source) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Graphics::Effects::IGraphicsEffectSource const&);
            this->shim().Source(*reinterpret_cast<Windows::Graphics::Effects::IGraphicsEffectSource const*>(&source));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas::Effects {

inline AlphaMaskEffect::AlphaMaskEffect() :
    AlphaMaskEffect(impl::call_factory<AlphaMaskEffect>([](auto&& f) { return f.template ActivateInstance<AlphaMaskEffect>(); }))
{}

inline bool AlphaMaskEffect::IsSupported()
{
    return impl::call_factory<AlphaMaskEffect, Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics>([&](auto&& f) { return f.IsSupported(); });
}

inline ArithmeticCompositeEffect::ArithmeticCompositeEffect() :
    ArithmeticCompositeEffect(impl::call_factory<ArithmeticCompositeEffect>([](auto&& f) { return f.template ActivateInstance<ArithmeticCompositeEffect>(); }))
{}

inline AtlasEffect::AtlasEffect() :
    AtlasEffect(impl::call_factory<AtlasEffect>([](auto&& f) { return f.template ActivateInstance<AtlasEffect>(); }))
{}

inline BlendEffect::BlendEffect() :
    BlendEffect(impl::call_factory<BlendEffect>([](auto&& f) { return f.template ActivateInstance<BlendEffect>(); }))
{}

inline BorderEffect::BorderEffect() :
    BorderEffect(impl::call_factory<BorderEffect>([](auto&& f) { return f.template ActivateInstance<BorderEffect>(); }))
{}

inline BrightnessEffect::BrightnessEffect() :
    BrightnessEffect(impl::call_factory<BrightnessEffect>([](auto&& f) { return f.template ActivateInstance<BrightnessEffect>(); }))
{}

inline ChromaKeyEffect::ChromaKeyEffect() :
    ChromaKeyEffect(impl::call_factory<ChromaKeyEffect>([](auto&& f) { return f.template ActivateInstance<ChromaKeyEffect>(); }))
{}

inline ColorManagementEffect::ColorManagementEffect() :
    ColorManagementEffect(impl::call_factory<ColorManagementEffect>([](auto&& f) { return f.template ActivateInstance<ColorManagementEffect>(); }))
{}

inline bool ColorManagementEffect::IsBestQualitySupported(Microsoft::Graphics::Canvas::CanvasDevice const& device)
{
    return impl::call_factory<ColorManagementEffect, Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics>([&](auto&& f) { return f.IsBestQualitySupported(device); });
}

inline ColorManagementProfile::ColorManagementProfile(Microsoft::Graphics::Canvas::CanvasColorSpace const& colorSpace) :
    ColorManagementProfile(impl::call_factory<ColorManagementProfile, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory>([&](auto&& f) { return f.Create(colorSpace); }))
{}

inline Microsoft::Graphics::Canvas::Effects::ColorManagementProfile ColorManagementProfile::CreateCustom(array_view<uint8_t const> iccProfile)
{
    return impl::call_factory<ColorManagementProfile, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics>([&](auto&& f) { return f.CreateCustom(iccProfile); });
}

inline Microsoft::Graphics::Canvas::Effects::ColorManagementProfile ColorManagementProfile::CreateSimple(Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile const& simpleProfile)
{
    return impl::call_factory<ColorManagementProfile, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics>([&](auto&& f) { return f.CreateSimple(simpleProfile); });
}

inline Microsoft::Graphics::Canvas::Effects::ColorManagementProfile ColorManagementProfile::CreateExtended(Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace const& colorSpace)
{
    return impl::call_factory<ColorManagementProfile, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics>([&](auto&& f) { return f.CreateExtended(colorSpace); });
}

inline bool ColorManagementProfile::IsSupported(Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType const& type, Microsoft::Graphics::Canvas::CanvasDevice const& device)
{
    return impl::call_factory<ColorManagementProfile, Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics>([&](auto&& f) { return f.IsSupported(type, device); });
}

inline ColorMatrixEffect::ColorMatrixEffect() :
    ColorMatrixEffect(impl::call_factory<ColorMatrixEffect>([](auto&& f) { return f.template ActivateInstance<ColorMatrixEffect>(); }))
{}

inline ColorSourceEffect::ColorSourceEffect() :
    ColorSourceEffect(impl::call_factory<ColorSourceEffect>([](auto&& f) { return f.template ActivateInstance<ColorSourceEffect>(); }))
{}

inline CompositeEffect::CompositeEffect() :
    CompositeEffect(impl::call_factory<CompositeEffect>([](auto&& f) { return f.template ActivateInstance<CompositeEffect>(); }))
{}

inline ContrastEffect::ContrastEffect() :
    ContrastEffect(impl::call_factory<ContrastEffect>([](auto&& f) { return f.template ActivateInstance<ContrastEffect>(); }))
{}

inline ConvolveMatrixEffect::ConvolveMatrixEffect() :
    ConvolveMatrixEffect(impl::call_factory<ConvolveMatrixEffect>([](auto&& f) { return f.template ActivateInstance<ConvolveMatrixEffect>(); }))
{}

inline CropEffect::CropEffect() :
    CropEffect(impl::call_factory<CropEffect>([](auto&& f) { return f.template ActivateInstance<CropEffect>(); }))
{}

inline CrossFadeEffect::CrossFadeEffect() :
    CrossFadeEffect(impl::call_factory<CrossFadeEffect>([](auto&& f) { return f.template ActivateInstance<CrossFadeEffect>(); }))
{}

inline bool CrossFadeEffect::IsSupported()
{
    return impl::call_factory<CrossFadeEffect, Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics>([&](auto&& f) { return f.IsSupported(); });
}

inline DirectionalBlurEffect::DirectionalBlurEffect() :
    DirectionalBlurEffect(impl::call_factory<DirectionalBlurEffect>([](auto&& f) { return f.template ActivateInstance<DirectionalBlurEffect>(); }))
{}

inline DiscreteTransferEffect::DiscreteTransferEffect() :
    DiscreteTransferEffect(impl::call_factory<DiscreteTransferEffect>([](auto&& f) { return f.template ActivateInstance<DiscreteTransferEffect>(); }))
{}

inline DisplacementMapEffect::DisplacementMapEffect() :
    DisplacementMapEffect(impl::call_factory<DisplacementMapEffect>([](auto&& f) { return f.template ActivateInstance<DisplacementMapEffect>(); }))
{}

inline DistantDiffuseEffect::DistantDiffuseEffect() :
    DistantDiffuseEffect(impl::call_factory<DistantDiffuseEffect>([](auto&& f) { return f.template ActivateInstance<DistantDiffuseEffect>(); }))
{}

inline DistantSpecularEffect::DistantSpecularEffect() :
    DistantSpecularEffect(impl::call_factory<DistantSpecularEffect>([](auto&& f) { return f.template ActivateInstance<DistantSpecularEffect>(); }))
{}

inline DpiCompensationEffect::DpiCompensationEffect() :
    DpiCompensationEffect(impl::call_factory<DpiCompensationEffect>([](auto&& f) { return f.template ActivateInstance<DpiCompensationEffect>(); }))
{}

inline EdgeDetectionEffect::EdgeDetectionEffect() :
    EdgeDetectionEffect(impl::call_factory<EdgeDetectionEffect>([](auto&& f) { return f.template ActivateInstance<EdgeDetectionEffect>(); }))
{}

inline Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D EffectTransferTable3D::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t sizeB, int32_t sizeG, int32_t sizeR)
{
    return impl::call_factory<EffectTransferTable3D, Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics>([&](auto&& f) { return f.CreateFromColors(resourceCreator, colors, sizeB, sizeG, sizeR); });
}

inline Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D EffectTransferTable3D::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t sizeB, int32_t sizeG, int32_t sizeR, Windows::Graphics::DirectX::DirectXPixelFormat const& format)
{
    return impl::call_factory<EffectTransferTable3D, Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, bytes, sizeB, sizeG, sizeR, format); });
}

inline EmbossEffect::EmbossEffect() :
    EmbossEffect(impl::call_factory<EmbossEffect>([](auto&& f) { return f.template ActivateInstance<EmbossEffect>(); }))
{}

inline ExposureEffect::ExposureEffect() :
    ExposureEffect(impl::call_factory<ExposureEffect>([](auto&& f) { return f.template ActivateInstance<ExposureEffect>(); }))
{}

inline GammaTransferEffect::GammaTransferEffect() :
    GammaTransferEffect(impl::call_factory<GammaTransferEffect>([](auto&& f) { return f.template ActivateInstance<GammaTransferEffect>(); }))
{}

inline GaussianBlurEffect::GaussianBlurEffect() :
    GaussianBlurEffect(impl::call_factory<GaussianBlurEffect>([](auto&& f) { return f.template ActivateInstance<GaussianBlurEffect>(); }))
{}

inline GrayscaleEffect::GrayscaleEffect() :
    GrayscaleEffect(impl::call_factory<GrayscaleEffect>([](auto&& f) { return f.template ActivateInstance<GrayscaleEffect>(); }))
{}

inline HighlightsAndShadowsEffect::HighlightsAndShadowsEffect() :
    HighlightsAndShadowsEffect(impl::call_factory<HighlightsAndShadowsEffect>([](auto&& f) { return f.template ActivateInstance<HighlightsAndShadowsEffect>(); }))
{}

inline HueRotationEffect::HueRotationEffect() :
    HueRotationEffect(impl::call_factory<HueRotationEffect>([](auto&& f) { return f.template ActivateInstance<HueRotationEffect>(); }))
{}

inline HueToRgbEffect::HueToRgbEffect() :
    HueToRgbEffect(impl::call_factory<HueToRgbEffect>([](auto&& f) { return f.template ActivateInstance<HueToRgbEffect>(); }))
{}

inline InvertEffect::InvertEffect() :
    InvertEffect(impl::call_factory<InvertEffect>([](auto&& f) { return f.template ActivateInstance<InvertEffect>(); }))
{}

inline LinearTransferEffect::LinearTransferEffect() :
    LinearTransferEffect(impl::call_factory<LinearTransferEffect>([](auto&& f) { return f.template ActivateInstance<LinearTransferEffect>(); }))
{}

inline LuminanceToAlphaEffect::LuminanceToAlphaEffect() :
    LuminanceToAlphaEffect(impl::call_factory<LuminanceToAlphaEffect>([](auto&& f) { return f.template ActivateInstance<LuminanceToAlphaEffect>(); }))
{}

inline MorphologyEffect::MorphologyEffect() :
    MorphologyEffect(impl::call_factory<MorphologyEffect>([](auto&& f) { return f.template ActivateInstance<MorphologyEffect>(); }))
{}

inline OpacityEffect::OpacityEffect() :
    OpacityEffect(impl::call_factory<OpacityEffect>([](auto&& f) { return f.template ActivateInstance<OpacityEffect>(); }))
{}

inline bool OpacityEffect::IsSupported()
{
    return impl::call_factory<OpacityEffect, Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics>([&](auto&& f) { return f.IsSupported(); });
}

inline OpacityMetadataEffect::OpacityMetadataEffect() :
    OpacityMetadataEffect(impl::call_factory<OpacityMetadataEffect>([](auto&& f) { return f.template ActivateInstance<OpacityMetadataEffect>(); }))
{}

inline PixelShaderEffect::PixelShaderEffect(array_view<uint8_t const> shaderCode) :
    PixelShaderEffect(impl::call_factory<PixelShaderEffect, Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory>([&](auto&& f) { return f.Create(shaderCode); }))
{}

inline PointDiffuseEffect::PointDiffuseEffect() :
    PointDiffuseEffect(impl::call_factory<PointDiffuseEffect>([](auto&& f) { return f.template ActivateInstance<PointDiffuseEffect>(); }))
{}

inline PointSpecularEffect::PointSpecularEffect() :
    PointSpecularEffect(impl::call_factory<PointSpecularEffect>([](auto&& f) { return f.template ActivateInstance<PointSpecularEffect>(); }))
{}

inline PosterizeEffect::PosterizeEffect() :
    PosterizeEffect(impl::call_factory<PosterizeEffect>([](auto&& f) { return f.template ActivateInstance<PosterizeEffect>(); }))
{}

inline PremultiplyEffect::PremultiplyEffect() :
    PremultiplyEffect(impl::call_factory<PremultiplyEffect>([](auto&& f) { return f.template ActivateInstance<PremultiplyEffect>(); }))
{}

inline RgbToHueEffect::RgbToHueEffect() :
    RgbToHueEffect(impl::call_factory<RgbToHueEffect>([](auto&& f) { return f.template ActivateInstance<RgbToHueEffect>(); }))
{}

inline SaturationEffect::SaturationEffect() :
    SaturationEffect(impl::call_factory<SaturationEffect>([](auto&& f) { return f.template ActivateInstance<SaturationEffect>(); }))
{}

inline ScaleEffect::ScaleEffect() :
    ScaleEffect(impl::call_factory<ScaleEffect>([](auto&& f) { return f.template ActivateInstance<ScaleEffect>(); }))
{}

inline SepiaEffect::SepiaEffect() :
    SepiaEffect(impl::call_factory<SepiaEffect>([](auto&& f) { return f.template ActivateInstance<SepiaEffect>(); }))
{}

inline ShadowEffect::ShadowEffect() :
    ShadowEffect(impl::call_factory<ShadowEffect>([](auto&& f) { return f.template ActivateInstance<ShadowEffect>(); }))
{}

inline SharpenEffect::SharpenEffect() :
    SharpenEffect(impl::call_factory<SharpenEffect>([](auto&& f) { return f.template ActivateInstance<SharpenEffect>(); }))
{}

inline SpotDiffuseEffect::SpotDiffuseEffect() :
    SpotDiffuseEffect(impl::call_factory<SpotDiffuseEffect>([](auto&& f) { return f.template ActivateInstance<SpotDiffuseEffect>(); }))
{}

inline SpotSpecularEffect::SpotSpecularEffect() :
    SpotSpecularEffect(impl::call_factory<SpotSpecularEffect>([](auto&& f) { return f.template ActivateInstance<SpotSpecularEffect>(); }))
{}

inline StraightenEffect::StraightenEffect() :
    StraightenEffect(impl::call_factory<StraightenEffect>([](auto&& f) { return f.template ActivateInstance<StraightenEffect>(); }))
{}

inline TableTransfer3DEffect::TableTransfer3DEffect() :
    TableTransfer3DEffect(impl::call_factory<TableTransfer3DEffect>([](auto&& f) { return f.template ActivateInstance<TableTransfer3DEffect>(); }))
{}

inline TableTransferEffect::TableTransferEffect() :
    TableTransferEffect(impl::call_factory<TableTransferEffect>([](auto&& f) { return f.template ActivateInstance<TableTransferEffect>(); }))
{}

inline TemperatureAndTintEffect::TemperatureAndTintEffect() :
    TemperatureAndTintEffect(impl::call_factory<TemperatureAndTintEffect>([](auto&& f) { return f.template ActivateInstance<TemperatureAndTintEffect>(); }))
{}

inline TileEffect::TileEffect() :
    TileEffect(impl::call_factory<TileEffect>([](auto&& f) { return f.template ActivateInstance<TileEffect>(); }))
{}

inline TintEffect::TintEffect() :
    TintEffect(impl::call_factory<TintEffect>([](auto&& f) { return f.template ActivateInstance<TintEffect>(); }))
{}

inline bool TintEffect::IsSupported()
{
    return impl::call_factory<TintEffect, Microsoft::Graphics::Canvas::Effects::ITintEffectStatics>([&](auto&& f) { return f.IsSupported(); });
}

inline Transform2DEffect::Transform2DEffect() :
    Transform2DEffect(impl::call_factory<Transform2DEffect>([](auto&& f) { return f.template ActivateInstance<Transform2DEffect>(); }))
{}

inline Transform3DEffect::Transform3DEffect() :
    Transform3DEffect(impl::call_factory<Transform3DEffect>([](auto&& f) { return f.template ActivateInstance<Transform3DEffect>(); }))
{}

inline TurbulenceEffect::TurbulenceEffect() :
    TurbulenceEffect(impl::call_factory<TurbulenceEffect>([](auto&& f) { return f.template ActivateInstance<TurbulenceEffect>(); }))
{}

inline UnPremultiplyEffect::UnPremultiplyEffect() :
    UnPremultiplyEffect(impl::call_factory<UnPremultiplyEffect>([](auto&& f) { return f.template ActivateInstance<UnPremultiplyEffect>(); }))
{}

inline VignetteEffect::VignetteEffect() :
    VignetteEffect(impl::call_factory<VignetteEffect>([](auto&& f) { return f.template ActivateInstance<VignetteEffect>(); }))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IAtlasEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IBlendEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IBorderEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ICanvasEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ICompositeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IContrastEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ICropEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IEmbossEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IExposureEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IInvertEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ISaturationEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IScaleEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ISepiaEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IShadowEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ISharpenEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IStraightenEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITileEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITintEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::IVignetteEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::AlphaMaskEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::AlphaMaskEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ArithmeticCompositeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ArithmeticCompositeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::AtlasEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::AtlasEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::BlendEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::BlendEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::BorderEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::BorderEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::BrightnessEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::BrightnessEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ChromaKeyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ChromaKeyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ColorManagementProfile> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorMatrixEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ColorMatrixEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ColorSourceEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ColorSourceEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::CompositeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::CompositeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ContrastEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ContrastEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ConvolveMatrixEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ConvolveMatrixEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::CropEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::CropEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::CrossFadeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::CrossFadeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DirectionalBlurEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::DirectionalBlurEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DiscreteTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::DiscreteTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DisplacementMapEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::DisplacementMapEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DistantDiffuseEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::DistantDiffuseEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DistantSpecularEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::DistantSpecularEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::DpiCompensationEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::DpiCompensationEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::EffectTransferTable3D> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::EmbossEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::EmbossEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ExposureEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ExposureEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::GammaTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::GammaTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::GaussianBlurEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::GaussianBlurEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::GrayscaleEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::GrayscaleEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::HighlightsAndShadowsEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::HighlightsAndShadowsEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::HueRotationEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::HueRotationEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::HueToRgbEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::HueToRgbEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::InvertEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::InvertEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::LinearTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::LinearTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::LuminanceToAlphaEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::LuminanceToAlphaEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::MorphologyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::OpacityEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::OpacityEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::OpacityMetadataEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::OpacityMetadataEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PixelShaderEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::PixelShaderEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PointDiffuseEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::PointDiffuseEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PointSpecularEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::PointSpecularEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PosterizeEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::PosterizeEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::PremultiplyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::PremultiplyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::RgbToHueEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::RgbToHueEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SaturationEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::SaturationEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ScaleEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ScaleEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SepiaEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::SepiaEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::ShadowEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::ShadowEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SharpenEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::SharpenEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SpotDiffuseEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::SpotDiffuseEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::SpotSpecularEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::SpotSpecularEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::StraightenEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::StraightenEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TableTransfer3DEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::TableTransfer3DEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TableTransferEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::TableTransferEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TemperatureAndTintEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::TemperatureAndTintEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TileEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::TileEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TintEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::TintEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::Transform2DEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::Transform2DEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::Transform3DEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::Transform3DEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::TurbulenceEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::UnPremultiplyEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::UnPremultiplyEffect> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::Effects::VignetteEffect> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::Effects::VignetteEffect> {};

}

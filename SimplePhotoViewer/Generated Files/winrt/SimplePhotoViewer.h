// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Storage.2.h"
#include "winrt/impl/Windows.Storage.FileProperties.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.Imaging.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.2.h"
#include "winrt/impl/SimplePhotoViewer.2.h"

namespace winrt::impl {

template <typename D> double consume_SimplePhotoViewer_IBackdropBlurBrush<D>::BlurAmount() const
{
    double value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IBackdropBlurBrush)->get_BlurAmount(&value));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IBackdropBlurBrush<D>::BlurAmount(double value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IBackdropBlurBrush)->put_BlurAmount(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_SimplePhotoViewer_IBackdropBlurBrushStatics<D>::BlurAmountProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IBackdropBlurBrushStatics)->get_BlurAmountProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IDetailPage<D>::ImageSkus() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDetailPage)->get_ImageSkus(put_abi(value)));
    return value;
}

template <typename D> SimplePhotoViewer::ImageSku consume_SimplePhotoViewer_IDetailPage<D>::SelectedItem() const
{
    SimplePhotoViewer::ImageSku value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDetailPage)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IDetailPage<D>::SelectedItem(SimplePhotoViewer::ImageSku const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDetailPage)->put_SelectedItem(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IDirectoryItem<D>::SubItems() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->get_SubItems(put_abi(value)));
    return value;
}

template <typename D> hstring consume_SimplePhotoViewer_IDirectoryItem<D>::Item() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->get_Item(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IDirectoryItem<D>::Item(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->put_Item(get_abi(value)));
}

template <typename D> Windows::Storage::StorageFolder consume_SimplePhotoViewer_IDirectoryItem<D>::ItemFolder() const
{
    Windows::Storage::StorageFolder value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->get_ItemFolder(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IDirectoryItem<D>::ItemFolder(Windows::Storage::StorageFolder const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->put_ItemFolder(get_abi(value)));
}

template <typename D> bool consume_SimplePhotoViewer_IDirectoryItem<D>::IsFolder() const
{
    bool value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->get_IsFolder(&value));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IDirectoryItem<D>::IsFolder(bool value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItem)->put_IsFolder(value));
}

template <typename D> SimplePhotoViewer::DirectoryItem consume_SimplePhotoViewer_IDirectoryItemFactory<D>::CreateInstance(param::hstring const& itemName, Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& subItems, Windows::Storage::StorageFolder const& itemFolder) const
{
    SimplePhotoViewer::DirectoryItem value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItemFactory)->CreateInstance(get_abi(itemName), get_abi(subItems), get_abi(itemFolder), put_abi(value)));
    return value;
}

template <typename D> SimplePhotoViewer::DirectoryItem consume_SimplePhotoViewer_IDirectoryItemFactory<D>::CreateInstance2(param::hstring const& itemName, Windows::Storage::StorageFolder const& itemFolder) const
{
    SimplePhotoViewer::DirectoryItem value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IDirectoryItemFactory)->CreateInstance2(get_abi(itemName), get_abi(itemFolder), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_SimplePhotoViewer_IExplorerItemTemplateSelector<D>::SelectTemplateCore(Windows::Foundation::IInspectable const& item) const
{
    Windows::UI::Xaml::DataTemplate result{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IExplorerItemTemplateSelector)->SelectTemplateCore(get_abi(item), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_SimplePhotoViewer_IExplorerItemTemplateSelector<D>::FolderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IExplorerItemTemplateSelector)->get_FolderTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IExplorerItemTemplateSelector<D>::FolderTemplate(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IExplorerItemTemplateSelector)->put_FolderTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_SimplePhotoViewer_IExplorerItemTemplateSelector<D>::FileTemplate() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IExplorerItemTemplateSelector)->get_FileTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IExplorerItemTemplateSelector<D>::FileTemplate(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IExplorerItemTemplateSelector)->put_FileTemplate(get_abi(value)));
}

template <typename D> Windows::Storage::StorageFile consume_SimplePhotoViewer_IImageSku<D>::ImageFile() const
{
    Windows::Storage::StorageFile value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageFile(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::ImageFile(Windows::Storage::StorageFile const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_ImageFile(get_abi(value)));
}

template <typename D> Windows::Storage::FileProperties::ImageProperties consume_SimplePhotoViewer_IImageSku<D>::ImageProperties() const
{
    Windows::Storage::FileProperties::ImageProperties value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageProperties(put_abi(value)));
    return value;
}

template <typename D> hstring consume_SimplePhotoViewer_IImageSku<D>::ImageName() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageName(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::ImageName(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_ImageName(get_abi(value)));
}

template <typename D> hstring consume_SimplePhotoViewer_IImageSku<D>::ImageFileType() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageFileType(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::ImageFileType(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_ImageFileType(get_abi(value)));
}

template <typename D> hstring consume_SimplePhotoViewer_IImageSku<D>::ImageNameWithType() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageNameWithType(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::ImageNameWithType(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_ImageNameWithType(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Imaging::BitmapImage consume_SimplePhotoViewer_IImageSku<D>::ImageThumbnail() const
{
    Windows::UI::Xaml::Media::Imaging::BitmapImage value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageThumbnail(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::ImageThumbnail(Windows::UI::Xaml::Media::Imaging::BitmapImage const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_ImageThumbnail(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Imaging::BitmapImage consume_SimplePhotoViewer_IImageSku<D>::ImageContent() const
{
    Windows::UI::Xaml::Media::Imaging::BitmapImage value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_ImageContent(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::ImageContent(Windows::UI::Xaml::Media::Imaging::BitmapImage const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_ImageContent(get_abi(value)));
}

template <typename D> double consume_SimplePhotoViewer_IImageSku<D>::RenderRotation() const
{
    double value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->get_RenderRotation(&value));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IImageSku<D>::RenderRotation(double value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSku)->put_RenderRotation(value));
}

template <typename D> SimplePhotoViewer::ImageSku consume_SimplePhotoViewer_IImageSkuFactory<D>::CreateInstance(Windows::Storage::FileProperties::ImageProperties const& imageProps, Windows::Storage::StorageFile const& imageFile, param::hstring const& name, param::hstring const& type, Windows::UI::Xaml::Media::Imaging::BitmapImage const& imageThumbnail, param::hstring const& nameWithType) const
{
    SimplePhotoViewer::ImageSku value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSkuFactory)->CreateInstance(get_abi(imageProps), get_abi(imageFile), get_abi(name), get_abi(type), get_abi(imageThumbnail), get_abi(nameWithType), put_abi(value)));
    return value;
}

template <typename D> SimplePhotoViewer::ImageSku consume_SimplePhotoViewer_IImageSkuFactory<D>::CreateInstance2(Windows::Storage::FileProperties::ImageProperties const& imageProps, Windows::Storage::StorageFile const& imageFile, param::hstring const& name, param::hstring const& type, param::hstring const& nameWithType) const
{
    SimplePhotoViewer::ImageSku value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSkuFactory)->CreateInstance2(get_abi(imageProps), get_abi(imageFile), get_abi(name), get_abi(type), get_abi(nameWithType), put_abi(value)));
    return value;
}

template <typename D> SimplePhotoViewer::ImageSku consume_SimplePhotoViewer_IImageSkuFactory<D>::CreateInstance3(param::hstring const& defaultTipString) const
{
    SimplePhotoViewer::ImageSku value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IImageSkuFactory)->CreateInstance3(get_abi(defaultTipString), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IMainPage<D>::ImageSkus() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_ImageSkus(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IMainPage<D>::BufferImageSkus() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_BufferImageSkus(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IMainPage<D>::TreeViewFolders() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_TreeViewFolders(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IMainPage<D>::SearchResults() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_SearchResults(put_abi(value)));
    return value;
}

template <typename D> hstring consume_SimplePhotoViewer_IMainPage<D>::CurrentSelectedFolder() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_CurrentSelectedFolder(put_abi(value)));
    return value;
}

template <typename D> void consume_SimplePhotoViewer_IMainPage<D>::CurrentSelectedFolder(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->put_CurrentSelectedFolder(get_abi(value)));
}

template <typename D> uint32_t consume_SimplePhotoViewer_IMainPage<D>::CurrentFolderImageNumber() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_CurrentFolderImageNumber(&value));
    return value;
}

template <typename D> uint32_t consume_SimplePhotoViewer_IMainPage<D>::CurrentFolderSelectedImageNumber() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IMainPage)->get_CurrentFolderSelectedImageNumber(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_SimplePhotoViewer_IPageNavigationParameter<D>::ImageSkus() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IPageNavigationParameter)->get_ImageSkus(put_abi(value)));
    return value;
}

template <typename D> uint32_t consume_SimplePhotoViewer_IPageNavigationParameter<D>::MainPageCurrentSelectedIndex() const
{
    uint32_t value{};
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IPageNavigationParameter)->get_MainPageCurrentSelectedIndex(&value));
    return value;
}

template <typename D> SimplePhotoViewer::PageNavigationParameter consume_SimplePhotoViewer_IPageNavigationParameterFactory<D>::CreateInstance(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& imageSkus, uint32_t mainPageCurrentSelectedIndex) const
{
    SimplePhotoViewer::PageNavigationParameter value{ nullptr };
    check_hresult(WINRT_SHIM(SimplePhotoViewer::IPageNavigationParameterFactory)->CreateInstance(get_abi(imageSkus), mainPageCurrentSelectedIndex, put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, SimplePhotoViewer::IBackdropBlurBrush> : produce_base<D, SimplePhotoViewer::IBackdropBlurBrush>
{
    int32_t WINRT_CALL get_BlurAmount(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().BlurAmount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BlurAmount(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmount, WINRT_WRAP(void), double);
            this->shim().BlurAmount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IBackdropBlurBrushStatics> : produce_base<D, SimplePhotoViewer::IBackdropBlurBrushStatics>
{
    int32_t WINRT_CALL get_BlurAmountProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BlurAmountProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BlurAmountProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IDetailPage> : produce_base<D, SimplePhotoViewer::IDetailPage>
{
    int32_t WINRT_CALL get_ImageSkus(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageSkus, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().ImageSkus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(SimplePhotoViewer::ImageSku));
            *value = detach_from<SimplePhotoViewer::ImageSku>(this->shim().SelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectedItem(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(void), SimplePhotoViewer::ImageSku const&);
            this->shim().SelectedItem(*reinterpret_cast<SimplePhotoViewer::ImageSku const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IDirectoryItem> : produce_base<D, SimplePhotoViewer::IDirectoryItem>
{
    int32_t WINRT_CALL get_SubItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SubItems, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().SubItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Item(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Item, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Item());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Item(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Item, WINRT_WRAP(void), hstring const&);
            this->shim().Item(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemFolder(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemFolder, WINRT_WRAP(Windows::Storage::StorageFolder));
            *value = detach_from<Windows::Storage::StorageFolder>(this->shim().ItemFolder());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemFolder(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemFolder, WINRT_WRAP(void), Windows::Storage::StorageFolder const&);
            this->shim().ItemFolder(*reinterpret_cast<Windows::Storage::StorageFolder const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsFolder(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsFolder, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsFolder());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsFolder(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsFolder, WINRT_WRAP(void), bool);
            this->shim().IsFolder(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IDirectoryItemFactory> : produce_base<D, SimplePhotoViewer::IDirectoryItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* itemName, void* subItems, void* itemFolder, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(SimplePhotoViewer::DirectoryItem), hstring const&, Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const&, Windows::Storage::StorageFolder const&);
            *value = detach_from<SimplePhotoViewer::DirectoryItem>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&itemName), *reinterpret_cast<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const*>(&subItems), *reinterpret_cast<Windows::Storage::StorageFolder const*>(&itemFolder)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateInstance2(void* itemName, void* itemFolder, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance2, WINRT_WRAP(SimplePhotoViewer::DirectoryItem), hstring const&, Windows::Storage::StorageFolder const&);
            *value = detach_from<SimplePhotoViewer::DirectoryItem>(this->shim().CreateInstance2(*reinterpret_cast<hstring const*>(&itemName), *reinterpret_cast<Windows::Storage::StorageFolder const*>(&itemFolder)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IExplorerItemTemplateSelector> : produce_base<D, SimplePhotoViewer::IExplorerItemTemplateSelector>
{
    int32_t WINRT_CALL SelectTemplateCore(void* item, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectTemplateCore, WINRT_WRAP(Windows::UI::Xaml::DataTemplate), Windows::Foundation::IInspectable const&);
            *result = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().SelectTemplateCore(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&item)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FolderTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FolderTemplate, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().FolderTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FolderTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FolderTemplate, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().FolderTemplate(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FileTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FileTemplate, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().FileTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FileTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FileTemplate, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().FileTemplate(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IImageSku> : produce_base<D, SimplePhotoViewer::IImageSku>
{
    int32_t WINRT_CALL get_ImageFile(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageFile, WINRT_WRAP(Windows::Storage::StorageFile));
            *value = detach_from<Windows::Storage::StorageFile>(this->shim().ImageFile());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ImageFile(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageFile, WINRT_WRAP(void), Windows::Storage::StorageFile const&);
            this->shim().ImageFile(*reinterpret_cast<Windows::Storage::StorageFile const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageProperties(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageProperties, WINRT_WRAP(Windows::Storage::FileProperties::ImageProperties));
            *value = detach_from<Windows::Storage::FileProperties::ImageProperties>(this->shim().ImageProperties());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageName(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageName, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().ImageName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ImageName(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageName, WINRT_WRAP(void), hstring const&);
            this->shim().ImageName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageFileType(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageFileType, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().ImageFileType());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ImageFileType(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageFileType, WINRT_WRAP(void), hstring const&);
            this->shim().ImageFileType(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageNameWithType(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageNameWithType, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().ImageNameWithType());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ImageNameWithType(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageNameWithType, WINRT_WRAP(void), hstring const&);
            this->shim().ImageNameWithType(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageThumbnail(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageThumbnail, WINRT_WRAP(Windows::UI::Xaml::Media::Imaging::BitmapImage));
            *value = detach_from<Windows::UI::Xaml::Media::Imaging::BitmapImage>(this->shim().ImageThumbnail());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ImageThumbnail(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageThumbnail, WINRT_WRAP(void), Windows::UI::Xaml::Media::Imaging::BitmapImage const&);
            this->shim().ImageThumbnail(*reinterpret_cast<Windows::UI::Xaml::Media::Imaging::BitmapImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageContent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageContent, WINRT_WRAP(Windows::UI::Xaml::Media::Imaging::BitmapImage));
            *value = detach_from<Windows::UI::Xaml::Media::Imaging::BitmapImage>(this->shim().ImageContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ImageContent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageContent, WINRT_WRAP(void), Windows::UI::Xaml::Media::Imaging::BitmapImage const&);
            this->shim().ImageContent(*reinterpret_cast<Windows::UI::Xaml::Media::Imaging::BitmapImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RenderRotation(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RenderRotation, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().RenderRotation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RenderRotation(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RenderRotation, WINRT_WRAP(void), double);
            this->shim().RenderRotation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IImageSkuFactory> : produce_base<D, SimplePhotoViewer::IImageSkuFactory>
{
    int32_t WINRT_CALL CreateInstance(void* imageProps, void* imageFile, void* name, void* type, void* imageThumbnail, void* nameWithType, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(SimplePhotoViewer::ImageSku), Windows::Storage::FileProperties::ImageProperties const&, Windows::Storage::StorageFile const&, hstring const&, hstring const&, Windows::UI::Xaml::Media::Imaging::BitmapImage const&, hstring const&);
            *value = detach_from<SimplePhotoViewer::ImageSku>(this->shim().CreateInstance(*reinterpret_cast<Windows::Storage::FileProperties::ImageProperties const*>(&imageProps), *reinterpret_cast<Windows::Storage::StorageFile const*>(&imageFile), *reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&type), *reinterpret_cast<Windows::UI::Xaml::Media::Imaging::BitmapImage const*>(&imageThumbnail), *reinterpret_cast<hstring const*>(&nameWithType)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateInstance2(void* imageProps, void* imageFile, void* name, void* type, void* nameWithType, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance2, WINRT_WRAP(SimplePhotoViewer::ImageSku), Windows::Storage::FileProperties::ImageProperties const&, Windows::Storage::StorageFile const&, hstring const&, hstring const&, hstring const&);
            *value = detach_from<SimplePhotoViewer::ImageSku>(this->shim().CreateInstance2(*reinterpret_cast<Windows::Storage::FileProperties::ImageProperties const*>(&imageProps), *reinterpret_cast<Windows::Storage::StorageFile const*>(&imageFile), *reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&type), *reinterpret_cast<hstring const*>(&nameWithType)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateInstance3(void* defaultTipString, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance3, WINRT_WRAP(SimplePhotoViewer::ImageSku), hstring const&);
            *value = detach_from<SimplePhotoViewer::ImageSku>(this->shim().CreateInstance3(*reinterpret_cast<hstring const*>(&defaultTipString)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IMainPage> : produce_base<D, SimplePhotoViewer::IMainPage>
{
    int32_t WINRT_CALL get_ImageSkus(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageSkus, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().ImageSkus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BufferImageSkus(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BufferImageSkus, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().BufferImageSkus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TreeViewFolders(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TreeViewFolders, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().TreeViewFolders());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SearchResults(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SearchResults, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().SearchResults());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CurrentSelectedFolder(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CurrentSelectedFolder, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().CurrentSelectedFolder());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CurrentSelectedFolder(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CurrentSelectedFolder, WINRT_WRAP(void), hstring const&);
            this->shim().CurrentSelectedFolder(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CurrentFolderImageNumber(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CurrentFolderImageNumber, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().CurrentFolderImageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CurrentFolderSelectedImageNumber(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CurrentFolderSelectedImageNumber, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().CurrentFolderSelectedImageNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IPageNavigationParameter> : produce_base<D, SimplePhotoViewer::IPageNavigationParameter>
{
    int32_t WINRT_CALL get_ImageSkus(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageSkus, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().ImageSkus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MainPageCurrentSelectedIndex(uint32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MainPageCurrentSelectedIndex, WINRT_WRAP(uint32_t));
            *value = detach_from<uint32_t>(this->shim().MainPageCurrentSelectedIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SimplePhotoViewer::IPageNavigationParameterFactory> : produce_base<D, SimplePhotoViewer::IPageNavigationParameterFactory>
{
    int32_t WINRT_CALL CreateInstance(void* imageSkus, uint32_t mainPageCurrentSelectedIndex, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(SimplePhotoViewer::PageNavigationParameter), Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const&, uint32_t);
            *value = detach_from<SimplePhotoViewer::PageNavigationParameter>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const*>(&imageSkus), mainPageCurrentSelectedIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::SimplePhotoViewer {

inline BackdropBlurBrush::BackdropBlurBrush() :
    BackdropBlurBrush(impl::call_factory<BackdropBlurBrush>([](auto&& f) { return f.template ActivateInstance<BackdropBlurBrush>(); }))
{}

inline Windows::UI::Xaml::DependencyProperty BackdropBlurBrush::BlurAmountProperty()
{
    return impl::call_factory<BackdropBlurBrush, SimplePhotoViewer::IBackdropBlurBrushStatics>([&](auto&& f) { return f.BlurAmountProperty(); });
}

inline DetailPage::DetailPage() :
    DetailPage(impl::call_factory<DetailPage>([](auto&& f) { return f.template ActivateInstance<DetailPage>(); }))
{}

inline DirectoryItem::DirectoryItem(param::hstring const& itemName, Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& subItems, Windows::Storage::StorageFolder const& itemFolder) :
    DirectoryItem(impl::call_factory<DirectoryItem, SimplePhotoViewer::IDirectoryItemFactory>([&](auto&& f) { return f.CreateInstance(itemName, subItems, itemFolder); }))
{}

inline DirectoryItem::DirectoryItem(param::hstring const& itemName, Windows::Storage::StorageFolder const& itemFolder) :
    DirectoryItem(impl::call_factory<DirectoryItem, SimplePhotoViewer::IDirectoryItemFactory>([&](auto&& f) { return f.CreateInstance2(itemName, itemFolder); }))
{}

inline ExplorerItemTemplateSelector::ExplorerItemTemplateSelector() :
    ExplorerItemTemplateSelector(impl::call_factory<ExplorerItemTemplateSelector>([](auto&& f) { return f.template ActivateInstance<ExplorerItemTemplateSelector>(); }))
{}

inline ImageSku::ImageSku(Windows::Storage::FileProperties::ImageProperties const& imageProps, Windows::Storage::StorageFile const& imageFile, param::hstring const& name, param::hstring const& type, Windows::UI::Xaml::Media::Imaging::BitmapImage const& imageThumbnail, param::hstring const& nameWithType) :
    ImageSku(impl::call_factory<ImageSku, SimplePhotoViewer::IImageSkuFactory>([&](auto&& f) { return f.CreateInstance(imageProps, imageFile, name, type, imageThumbnail, nameWithType); }))
{}

inline ImageSku::ImageSku(Windows::Storage::FileProperties::ImageProperties const& imageProps, Windows::Storage::StorageFile const& imageFile, param::hstring const& name, param::hstring const& type, param::hstring const& nameWithType) :
    ImageSku(impl::call_factory<ImageSku, SimplePhotoViewer::IImageSkuFactory>([&](auto&& f) { return f.CreateInstance2(imageProps, imageFile, name, type, nameWithType); }))
{}

inline ImageSku::ImageSku(param::hstring const& defaultTipString) :
    ImageSku(impl::call_factory<ImageSku, SimplePhotoViewer::IImageSkuFactory>([&](auto&& f) { return f.CreateInstance3(defaultTipString); }))
{}

inline MainPage::MainPage() :
    MainPage(impl::call_factory<MainPage>([](auto&& f) { return f.template ActivateInstance<MainPage>(); }))
{}

inline PageNavigationParameter::PageNavigationParameter(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& imageSkus, uint32_t mainPageCurrentSelectedIndex) :
    PageNavigationParameter(impl::call_factory<PageNavigationParameter, SimplePhotoViewer::IPageNavigationParameterFactory>([&](auto&& f) { return f.CreateInstance(imageSkus, mainPageCurrentSelectedIndex); }))
{}

inline XamlMetaDataProvider::XamlMetaDataProvider() :
    XamlMetaDataProvider(impl::call_factory<XamlMetaDataProvider>([](auto&& f) { return f.template ActivateInstance<XamlMetaDataProvider>(); }))
{}

}

namespace winrt::impl {

struct property_SimplePhotoViewer_IBackdropBlurBrush
{ struct named {
    struct BlurAmount
    {
        struct name { static constexpr std::wstring_view value{ L"BlurAmount"sv }; };
        using property_type = double;
        using target_type = winrt::SimplePhotoViewer::IBackdropBlurBrush;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BlurAmount();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.BlurAmount(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::BlurAmount>; };
};

struct property_SimplePhotoViewer_IBackdropBlurBrushStatics
{ struct named {
    struct BlurAmountProperty
    {
        struct name { static constexpr std::wstring_view value{ L"BlurAmountProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::SimplePhotoViewer::IBackdropBlurBrushStatics;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BlurAmountProperty();
            }
        };
    };};
    struct list { using type = impl::typelist<named::BlurAmountProperty>; };
};

struct property_SimplePhotoViewer_IDetailPage
{ struct named {
    struct ImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"ImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IDetailPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageSkus();
            }
        };
    };
    struct SelectedItem
    {
        struct name { static constexpr std::wstring_view value{ L"SelectedItem"sv }; };
        using property_type = winrt::SimplePhotoViewer::ImageSku;
        using target_type = winrt::SimplePhotoViewer::IDetailPage;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SelectedItem();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.SelectedItem(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::ImageSkus, named::SelectedItem>; };
};

struct property_SimplePhotoViewer_IDirectoryItem
{ struct named {
    struct IsFolder
    {
        struct name { static constexpr std::wstring_view value{ L"IsFolder"sv }; };
        using property_type = bool;
        using target_type = winrt::SimplePhotoViewer::IDirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsFolder();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.IsFolder(std::forward<Value>(value));
            }
        };
    };
    struct Item
    {
        struct name { static constexpr std::wstring_view value{ L"Item"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::IDirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Item();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.Item(std::forward<Value>(value));
            }
        };
    };
    struct ItemFolder
    {
        struct name { static constexpr std::wstring_view value{ L"ItemFolder"sv }; };
        using property_type = winrt::Windows::Storage::StorageFolder;
        using target_type = winrt::SimplePhotoViewer::IDirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ItemFolder();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ItemFolder(std::forward<Value>(value));
            }
        };
    };
    struct SubItems
    {
        struct name { static constexpr std::wstring_view value{ L"SubItems"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IDirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SubItems();
            }
        };
    };};
    struct list { using type = impl::typelist<named::IsFolder, named::Item, named::ItemFolder, named::SubItems>; };
};

struct property_SimplePhotoViewer_IExplorerItemTemplateSelector
{ struct named {
    struct FileTemplate
    {
        struct name { static constexpr std::wstring_view value{ L"FileTemplate"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DataTemplate;
        using target_type = winrt::SimplePhotoViewer::IExplorerItemTemplateSelector;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.FileTemplate();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.FileTemplate(std::forward<Value>(value));
            }
        };
    };
    struct FolderTemplate
    {
        struct name { static constexpr std::wstring_view value{ L"FolderTemplate"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DataTemplate;
        using target_type = winrt::SimplePhotoViewer::IExplorerItemTemplateSelector;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.FolderTemplate();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.FolderTemplate(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::FileTemplate, named::FolderTemplate>; };
};

struct property_SimplePhotoViewer_IImageSku
{ struct named {
    struct ImageContent
    {
        struct name { static constexpr std::wstring_view value{ L"ImageContent"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageContent();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageContent(std::forward<Value>(value));
            }
        };
    };
    struct ImageFile
    {
        struct name { static constexpr std::wstring_view value{ L"ImageFile"sv }; };
        using property_type = winrt::Windows::Storage::StorageFile;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageFile();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageFile(std::forward<Value>(value));
            }
        };
    };
    struct ImageFileType
    {
        struct name { static constexpr std::wstring_view value{ L"ImageFileType"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageFileType();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageFileType(std::forward<Value>(value));
            }
        };
    };
    struct ImageName
    {
        struct name { static constexpr std::wstring_view value{ L"ImageName"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageName();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageName(std::forward<Value>(value));
            }
        };
    };
    struct ImageNameWithType
    {
        struct name { static constexpr std::wstring_view value{ L"ImageNameWithType"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageNameWithType();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageNameWithType(std::forward<Value>(value));
            }
        };
    };
    struct ImageProperties
    {
        struct name { static constexpr std::wstring_view value{ L"ImageProperties"sv }; };
        using property_type = winrt::Windows::Storage::FileProperties::ImageProperties;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageProperties();
            }
        };
    };
    struct ImageThumbnail
    {
        struct name { static constexpr std::wstring_view value{ L"ImageThumbnail"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageThumbnail();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageThumbnail(std::forward<Value>(value));
            }
        };
    };
    struct RenderRotation
    {
        struct name { static constexpr std::wstring_view value{ L"RenderRotation"sv }; };
        using property_type = double;
        using target_type = winrt::SimplePhotoViewer::IImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.RenderRotation();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.RenderRotation(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::ImageContent, named::ImageFile, named::ImageFileType, named::ImageName, named::ImageNameWithType, named::ImageProperties, named::ImageThumbnail, named::RenderRotation>; };
};

struct property_SimplePhotoViewer_IMainPage
{ struct named {
    struct BufferImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"BufferImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BufferImageSkus();
            }
        };
    };
    struct CurrentFolderImageNumber
    {
        struct name { static constexpr std::wstring_view value{ L"CurrentFolderImageNumber"sv }; };
        using property_type = uint32_t;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CurrentFolderImageNumber();
            }
        };
    };
    struct CurrentFolderSelectedImageNumber
    {
        struct name { static constexpr std::wstring_view value{ L"CurrentFolderSelectedImageNumber"sv }; };
        using property_type = uint32_t;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CurrentFolderSelectedImageNumber();
            }
        };
    };
    struct CurrentSelectedFolder
    {
        struct name { static constexpr std::wstring_view value{ L"CurrentSelectedFolder"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CurrentSelectedFolder();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.CurrentSelectedFolder(std::forward<Value>(value));
            }
        };
    };
    struct ImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"ImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageSkus();
            }
        };
    };
    struct SearchResults
    {
        struct name { static constexpr std::wstring_view value{ L"SearchResults"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SearchResults();
            }
        };
    };
    struct TreeViewFolders
    {
        struct name { static constexpr std::wstring_view value{ L"TreeViewFolders"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IMainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.TreeViewFolders();
            }
        };
    };};
    struct list { using type = impl::typelist<named::BufferImageSkus, named::CurrentFolderImageNumber, named::CurrentFolderSelectedImageNumber, named::CurrentSelectedFolder, named::ImageSkus, named::SearchResults, named::TreeViewFolders>; };
};

struct property_SimplePhotoViewer_IPageNavigationParameter
{ struct named {
    struct ImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"ImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::IPageNavigationParameter;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageSkus();
            }
        };
    };
    struct MainPageCurrentSelectedIndex
    {
        struct name { static constexpr std::wstring_view value{ L"MainPageCurrentSelectedIndex"sv }; };
        using property_type = uint32_t;
        using target_type = winrt::SimplePhotoViewer::IPageNavigationParameter;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.MainPageCurrentSelectedIndex();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ImageSkus, named::MainPageCurrentSelectedIndex>; };
};

struct property_SimplePhotoViewer_BackdropBlurBrush
{ struct named {
    struct BlurAmount
    {
        struct name { static constexpr std::wstring_view value{ L"BlurAmount"sv }; };
        using property_type = double;
        using target_type = winrt::SimplePhotoViewer::BackdropBlurBrush;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BlurAmount();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.BlurAmount(std::forward<Value>(value));
            }
        };
    };
    struct BlurAmountProperty
    {
        struct name { static constexpr std::wstring_view value{ L"BlurAmountProperty"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DependencyProperty;
        using target_type = winrt::SimplePhotoViewer::BackdropBlurBrush;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::true_type;
        struct getter
        {
            auto operator()() const
            {
                return target_type::BlurAmountProperty();
            }
        };
    };};
    struct list { using type = impl::typelist<named::BlurAmount, named::BlurAmountProperty>; };
};

struct property_SimplePhotoViewer_DetailPage
{ struct named {
    struct SelectedItem
    {
        struct name { static constexpr std::wstring_view value{ L"SelectedItem"sv }; };
        using property_type = winrt::SimplePhotoViewer::ImageSku;
        using target_type = winrt::SimplePhotoViewer::DetailPage;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SelectedItem();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.SelectedItem(std::forward<Value>(value));
            }
        };
    };
    struct ImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"ImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::DetailPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageSkus();
            }
        };
    };};
    struct list { using type = impl::typelist<named::SelectedItem, named::ImageSkus>; };
};

struct property_SimplePhotoViewer_DirectoryItem
{ struct named {
    struct ItemFolder
    {
        struct name { static constexpr std::wstring_view value{ L"ItemFolder"sv }; };
        using property_type = winrt::Windows::Storage::StorageFolder;
        using target_type = winrt::SimplePhotoViewer::DirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ItemFolder();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ItemFolder(std::forward<Value>(value));
            }
        };
    };
    struct Item
    {
        struct name { static constexpr std::wstring_view value{ L"Item"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::DirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Item();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.Item(std::forward<Value>(value));
            }
        };
    };
    struct IsFolder
    {
        struct name { static constexpr std::wstring_view value{ L"IsFolder"sv }; };
        using property_type = bool;
        using target_type = winrt::SimplePhotoViewer::DirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.IsFolder();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.IsFolder(std::forward<Value>(value));
            }
        };
    };
    struct SubItems
    {
        struct name { static constexpr std::wstring_view value{ L"SubItems"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::DirectoryItem;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SubItems();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ItemFolder, named::Item, named::IsFolder, named::SubItems>; };
};

struct property_SimplePhotoViewer_ExplorerItemTemplateSelector
{ struct named {
    struct FolderTemplate
    {
        struct name { static constexpr std::wstring_view value{ L"FolderTemplate"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DataTemplate;
        using target_type = winrt::SimplePhotoViewer::ExplorerItemTemplateSelector;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.FolderTemplate();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.FolderTemplate(std::forward<Value>(value));
            }
        };
    };
    struct FileTemplate
    {
        struct name { static constexpr std::wstring_view value{ L"FileTemplate"sv }; };
        using property_type = winrt::Windows::UI::Xaml::DataTemplate;
        using target_type = winrt::SimplePhotoViewer::ExplorerItemTemplateSelector;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.FileTemplate();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.FileTemplate(std::forward<Value>(value));
            }
        };
    };};
    struct list { using type = impl::typelist<named::FolderTemplate, named::FileTemplate>; };
};

struct property_SimplePhotoViewer_ImageSku
{ struct named {
    struct RenderRotation
    {
        struct name { static constexpr std::wstring_view value{ L"RenderRotation"sv }; };
        using property_type = double;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.RenderRotation();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.RenderRotation(std::forward<Value>(value));
            }
        };
    };
    struct ImageThumbnail
    {
        struct name { static constexpr std::wstring_view value{ L"ImageThumbnail"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageThumbnail();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageThumbnail(std::forward<Value>(value));
            }
        };
    };
    struct ImageNameWithType
    {
        struct name { static constexpr std::wstring_view value{ L"ImageNameWithType"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageNameWithType();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageNameWithType(std::forward<Value>(value));
            }
        };
    };
    struct ImageName
    {
        struct name { static constexpr std::wstring_view value{ L"ImageName"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageName();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageName(std::forward<Value>(value));
            }
        };
    };
    struct ImageFileType
    {
        struct name { static constexpr std::wstring_view value{ L"ImageFileType"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageFileType();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageFileType(std::forward<Value>(value));
            }
        };
    };
    struct ImageFile
    {
        struct name { static constexpr std::wstring_view value{ L"ImageFile"sv }; };
        using property_type = winrt::Windows::Storage::StorageFile;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageFile();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageFile(std::forward<Value>(value));
            }
        };
    };
    struct ImageContent
    {
        struct name { static constexpr std::wstring_view value{ L"ImageContent"sv }; };
        using property_type = winrt::Windows::UI::Xaml::Media::Imaging::BitmapImage;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageContent();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.ImageContent(std::forward<Value>(value));
            }
        };
    };
    struct ImageProperties
    {
        struct name { static constexpr std::wstring_view value{ L"ImageProperties"sv }; };
        using property_type = winrt::Windows::Storage::FileProperties::ImageProperties;
        using target_type = winrt::SimplePhotoViewer::ImageSku;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageProperties();
            }
        };
    };};
    struct list { using type = impl::typelist<named::RenderRotation, named::ImageThumbnail, named::ImageNameWithType, named::ImageName, named::ImageFileType, named::ImageFile, named::ImageContent, named::ImageProperties>; };
};

struct property_SimplePhotoViewer_MainPage
{ struct named {
    struct CurrentSelectedFolder
    {
        struct name { static constexpr std::wstring_view value{ L"CurrentSelectedFolder"sv }; };
        using property_type = winrt::hstring;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::true_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CurrentSelectedFolder();
            }
        };
        struct setter
        {
            template <typename Value>
            void operator()(target_type const& target, Value&& value) const
            {
                target.CurrentSelectedFolder(std::forward<Value>(value));
            }
        };
    };
    struct BufferImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"BufferImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.BufferImageSkus();
            }
        };
    };
    struct CurrentFolderImageNumber
    {
        struct name { static constexpr std::wstring_view value{ L"CurrentFolderImageNumber"sv }; };
        using property_type = uint32_t;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CurrentFolderImageNumber();
            }
        };
    };
    struct CurrentFolderSelectedImageNumber
    {
        struct name { static constexpr std::wstring_view value{ L"CurrentFolderSelectedImageNumber"sv }; };
        using property_type = uint32_t;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.CurrentFolderSelectedImageNumber();
            }
        };
    };
    struct ImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"ImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageSkus();
            }
        };
    };
    struct SearchResults
    {
        struct name { static constexpr std::wstring_view value{ L"SearchResults"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.SearchResults();
            }
        };
    };
    struct TreeViewFolders
    {
        struct name { static constexpr std::wstring_view value{ L"TreeViewFolders"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::MainPage;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.TreeViewFolders();
            }
        };
    };};
    struct list { using type = impl::typelist<named::CurrentSelectedFolder, named::BufferImageSkus, named::CurrentFolderImageNumber, named::CurrentFolderSelectedImageNumber, named::ImageSkus, named::SearchResults, named::TreeViewFolders>; };
};

struct property_SimplePhotoViewer_PageNavigationParameter
{ struct named {
    struct ImageSkus
    {
        struct name { static constexpr std::wstring_view value{ L"ImageSkus"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>;
        using target_type = winrt::SimplePhotoViewer::PageNavigationParameter;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.ImageSkus();
            }
        };
    };
    struct MainPageCurrentSelectedIndex
    {
        struct name { static constexpr std::wstring_view value{ L"MainPageCurrentSelectedIndex"sv }; };
        using property_type = uint32_t;
        using target_type = winrt::SimplePhotoViewer::PageNavigationParameter;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.MainPageCurrentSelectedIndex();
            }
        };
    };};
    struct list { using type = impl::typelist<named::ImageSkus, named::MainPageCurrentSelectedIndex>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<SimplePhotoViewer::IBackdropBlurBrush> : impl::property_SimplePhotoViewer_IBackdropBlurBrush::named {};
template <> struct properties<SimplePhotoViewer::IBackdropBlurBrush> : impl::property_SimplePhotoViewer_IBackdropBlurBrush::list {};
template <> struct named_property<SimplePhotoViewer::IBackdropBlurBrushStatics> : impl::property_SimplePhotoViewer_IBackdropBlurBrushStatics::named {};
template <> struct properties<SimplePhotoViewer::IBackdropBlurBrushStatics> : impl::property_SimplePhotoViewer_IBackdropBlurBrushStatics::list {};
template <> struct named_property<SimplePhotoViewer::IDetailPage> : impl::property_SimplePhotoViewer_IDetailPage::named {};
template <> struct properties<SimplePhotoViewer::IDetailPage> : impl::property_SimplePhotoViewer_IDetailPage::list {};
template <> struct named_property<SimplePhotoViewer::IDirectoryItem> : impl::property_SimplePhotoViewer_IDirectoryItem::named {};
template <> struct properties<SimplePhotoViewer::IDirectoryItem> : impl::property_SimplePhotoViewer_IDirectoryItem::list {};
template <> struct named_property<SimplePhotoViewer::IExplorerItemTemplateSelector> : impl::property_SimplePhotoViewer_IExplorerItemTemplateSelector::named {};
template <> struct properties<SimplePhotoViewer::IExplorerItemTemplateSelector> : impl::property_SimplePhotoViewer_IExplorerItemTemplateSelector::list {};
template <> struct named_property<SimplePhotoViewer::IImageSku> : impl::property_SimplePhotoViewer_IImageSku::named {};
template <> struct properties<SimplePhotoViewer::IImageSku> : impl::property_SimplePhotoViewer_IImageSku::list {};
template <> struct named_property<SimplePhotoViewer::IMainPage> : impl::property_SimplePhotoViewer_IMainPage::named {};
template <> struct properties<SimplePhotoViewer::IMainPage> : impl::property_SimplePhotoViewer_IMainPage::list {};
template <> struct named_property<SimplePhotoViewer::IPageNavigationParameter> : impl::property_SimplePhotoViewer_IPageNavigationParameter::named {};
template <> struct properties<SimplePhotoViewer::IPageNavigationParameter> : impl::property_SimplePhotoViewer_IPageNavigationParameter::list {};
template <> struct named_property<SimplePhotoViewer::BackdropBlurBrush> : impl::property_SimplePhotoViewer_BackdropBlurBrush::named {};
template <> struct properties<SimplePhotoViewer::BackdropBlurBrush> : impl::property_SimplePhotoViewer_BackdropBlurBrush::list {};
template <> struct named_property<SimplePhotoViewer::DetailPage> : impl::property_SimplePhotoViewer_DetailPage::named {};
template <> struct properties<SimplePhotoViewer::DetailPage> : impl::property_SimplePhotoViewer_DetailPage::list {};
template <> struct named_property<SimplePhotoViewer::DirectoryItem> : impl::property_SimplePhotoViewer_DirectoryItem::named {};
template <> struct properties<SimplePhotoViewer::DirectoryItem> : impl::property_SimplePhotoViewer_DirectoryItem::list {};
template <> struct named_property<SimplePhotoViewer::ExplorerItemTemplateSelector> : impl::property_SimplePhotoViewer_ExplorerItemTemplateSelector::named {};
template <> struct properties<SimplePhotoViewer::ExplorerItemTemplateSelector> : impl::property_SimplePhotoViewer_ExplorerItemTemplateSelector::list {};
template <> struct named_property<SimplePhotoViewer::ImageSku> : impl::property_SimplePhotoViewer_ImageSku::named {};
template <> struct properties<SimplePhotoViewer::ImageSku> : impl::property_SimplePhotoViewer_ImageSku::list {};
template <> struct named_property<SimplePhotoViewer::MainPage> : impl::property_SimplePhotoViewer_MainPage::named {};
template <> struct properties<SimplePhotoViewer::MainPage> : impl::property_SimplePhotoViewer_MainPage::list {};
template <> struct named_property<SimplePhotoViewer::PageNavigationParameter> : impl::property_SimplePhotoViewer_PageNavigationParameter::named {};
template <> struct properties<SimplePhotoViewer::PageNavigationParameter> : impl::property_SimplePhotoViewer_PageNavigationParameter::list {};

template <>
struct base_type<SimplePhotoViewer::BackdropBlurBrush> { using type = Windows::UI::Xaml::Media::XamlCompositionBrushBase; };
template <>
struct base_type<SimplePhotoViewer::DetailPage> { using type = Windows::UI::Xaml::Controls::Page; };
template <>
struct base_type<SimplePhotoViewer::ExplorerItemTemplateSelector> { using type = Windows::UI::Xaml::Controls::DataTemplateSelector; };
template <>
struct base_type<SimplePhotoViewer::MainPage> { using type = Windows::UI::Xaml::Controls::Page; };
}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::SimplePhotoViewer::IBackdropBlurBrush> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IBackdropBlurBrush> {};
template<> struct hash<winrt::SimplePhotoViewer::IBackdropBlurBrushStatics> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IBackdropBlurBrushStatics> {};
template<> struct hash<winrt::SimplePhotoViewer::IDetailPage> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IDetailPage> {};
template<> struct hash<winrt::SimplePhotoViewer::IDirectoryItem> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IDirectoryItem> {};
template<> struct hash<winrt::SimplePhotoViewer::IDirectoryItemFactory> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IDirectoryItemFactory> {};
template<> struct hash<winrt::SimplePhotoViewer::IExplorerItemTemplateSelector> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IExplorerItemTemplateSelector> {};
template<> struct hash<winrt::SimplePhotoViewer::IImageSku> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IImageSku> {};
template<> struct hash<winrt::SimplePhotoViewer::IImageSkuFactory> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IImageSkuFactory> {};
template<> struct hash<winrt::SimplePhotoViewer::IMainPage> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IMainPage> {};
template<> struct hash<winrt::SimplePhotoViewer::IPageNavigationParameter> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IPageNavigationParameter> {};
template<> struct hash<winrt::SimplePhotoViewer::IPageNavigationParameterFactory> : winrt::impl::hash_base<winrt::SimplePhotoViewer::IPageNavigationParameterFactory> {};
template<> struct hash<winrt::SimplePhotoViewer::BackdropBlurBrush> : winrt::impl::hash_base<winrt::SimplePhotoViewer::BackdropBlurBrush> {};
template<> struct hash<winrt::SimplePhotoViewer::DetailPage> : winrt::impl::hash_base<winrt::SimplePhotoViewer::DetailPage> {};
template<> struct hash<winrt::SimplePhotoViewer::DirectoryItem> : winrt::impl::hash_base<winrt::SimplePhotoViewer::DirectoryItem> {};
template<> struct hash<winrt::SimplePhotoViewer::ExplorerItemTemplateSelector> : winrt::impl::hash_base<winrt::SimplePhotoViewer::ExplorerItemTemplateSelector> {};
template<> struct hash<winrt::SimplePhotoViewer::ImageSku> : winrt::impl::hash_base<winrt::SimplePhotoViewer::ImageSku> {};
template<> struct hash<winrt::SimplePhotoViewer::MainPage> : winrt::impl::hash_base<winrt::SimplePhotoViewer::MainPage> {};
template<> struct hash<winrt::SimplePhotoViewer::PageNavigationParameter> : winrt::impl::hash_base<winrt::SimplePhotoViewer::PageNavigationParameter> {};
template<> struct hash<winrt::SimplePhotoViewer::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::SimplePhotoViewer::XamlMetaDataProvider> {};

}

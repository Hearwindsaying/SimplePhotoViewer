// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180821.2"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Brushes.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Effects.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Geometry.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Svg.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.Text.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Graphics.DirectX.2.h"
#include "winrt/impl/Windows.Graphics.DirectX.Direct3D11.2.h"
#include "winrt/impl/Windows.Graphics.Imaging.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Core.2.h"
#include "winrt/impl/Windows.UI.Input.Inking.2.h"
#include "winrt/impl/Windows.Graphics.Effects.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Microsoft.Graphics.Canvas.2.h"

namespace winrt::impl {

template <typename D> Windows::Graphics::Imaging::BitmapSize consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SizeInPixels() const
{
    Windows::Graphics::Imaging::BitmapSize size{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->get_SizeInPixels(put_abi(size)));
    return size;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::Size() const
{
    Windows::Foundation::Size size{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->get_Size(put_abi(size)));
    return size;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::Bounds() const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->get_Bounds(put_abi(bounds)));
    return bounds;
}

template <typename D> Windows::Graphics::DirectX::DirectXPixelFormat consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::Format() const
{
    Windows::Graphics::DirectX::DirectXPixelFormat value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->get_Format(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SaveAsync(param::hstring const& fileName) const
{
    Windows::Foundation::IAsyncAction asyncAction{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SaveToFileAsync(get_abi(fileName), put_abi(asyncAction)));
    return asyncAction;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SaveAsync(param::hstring const& fileName, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat) const
{
    Windows::Foundation::IAsyncAction asyncAction{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SaveToFileWithBitmapFileFormatAsync(get_abi(fileName), get_abi(fileFormat), put_abi(asyncAction)));
    return asyncAction;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SaveAsync(param::hstring const& fileName, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat, float quality) const
{
    Windows::Foundation::IAsyncAction asyncAction{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SaveToFileWithBitmapFileFormatAndQualityAsync(get_abi(fileName), get_abi(fileFormat), quality, put_abi(asyncAction)));
    return asyncAction;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SaveAsync(Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat) const
{
    Windows::Foundation::IAsyncAction asyncAction{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SaveToStreamAsync(get_abi(stream), get_abi(fileFormat), put_abi(asyncAction)));
    return asyncAction;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SaveAsync(Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat, float quality) const
{
    Windows::Foundation::IAsyncAction asyncAction{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SaveToStreamWithQualityAsync(get_abi(stream), get_abi(fileFormat), quality, put_abi(asyncAction)));
    return asyncAction;
}

template <typename D> com_array<uint8_t> consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::GetPixelBytes() const
{
    com_array<uint8_t> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->GetPixelBytes(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<uint8_t> consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::GetPixelBytes(int32_t left, int32_t top, int32_t width, int32_t height) const
{
    com_array<uint8_t> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->GetPixelBytesWithSubrectangle(left, top, width, height, impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::GetPixelBytes(Windows::Storage::Streams::IBuffer const& buffer) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->GetPixelBytesWithBuffer(get_abi(buffer)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::GetPixelBytes(Windows::Storage::Streams::IBuffer const& buffer, int32_t left, int32_t top, int32_t width, int32_t height) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->GetPixelBytesWithBufferAndSubrectangle(get_abi(buffer), left, top, width, height));
}

template <typename D> com_array<Windows::UI::Color> consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::GetPixelColors() const
{
    com_array<Windows::UI::Color> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->GetPixelColors(impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> com_array<Windows::UI::Color> consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::GetPixelColors(int32_t left, int32_t top, int32_t width, int32_t height) const
{
    com_array<Windows::UI::Color> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->GetPixelColorsWithSubrectangle(left, top, width, height, impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SetPixelBytes(array_view<uint8_t const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SetPixelBytes(valueElements.size(), get_abi(valueElements)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SetPixelBytes(array_view<uint8_t const> valueElements, int32_t left, int32_t top, int32_t width, int32_t height) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SetPixelBytesWithSubrectangle(valueElements.size(), get_abi(valueElements), left, top, width, height));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SetPixelBytes(Windows::Storage::Streams::IBuffer const& buffer) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SetPixelBytesWithBuffer(get_abi(buffer)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SetPixelBytes(Windows::Storage::Streams::IBuffer const& buffer, int32_t left, int32_t top, int32_t width, int32_t height) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SetPixelBytesWithBufferAndSubrectangle(get_abi(buffer), left, top, width, height));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SetPixelColors(array_view<Windows::UI::Color const> valueElements) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SetPixelColors(valueElements.size(), get_abi(valueElements)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::SetPixelColors(array_view<Windows::UI::Color const> valueElements, int32_t left, int32_t top, int32_t width, int32_t height) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->SetPixelColorsWithSubrectangle(valueElements.size(), get_abi(valueElements), left, top, width, height));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::CopyPixelsFromBitmap(Microsoft::Graphics::Canvas::CanvasBitmap const& otherBitmap) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->CopyPixelsFromBitmap(get_abi(otherBitmap)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::CopyPixelsFromBitmap(Microsoft::Graphics::Canvas::CanvasBitmap const& otherBitmap, int32_t destX, int32_t destY) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->CopyPixelsFromBitmapWithDestPoint(get_abi(otherBitmap), destX, destY));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasBitmap<D>::CopyPixelsFromBitmap(Microsoft::Graphics::Canvas::CanvasBitmap const& otherBitmap, int32_t destX, int32_t destY, int32_t sourceRectLeft, int32_t sourceRectTop, int32_t sourceRectWidth, int32_t sourceRectHeight) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmap)->CopyPixelsFromBitmapWithDestPointAndSourceRect(get_abi(otherBitmap), destX, destY, sourceRectLeft, sourceRectTop, sourceRectWidth, sourceRectHeight));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromDirect3D11Surface(get_abi(resourceCreator), get_abi(surface), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromDirect3D11SurfaceWithDpi(get_abi(resourceCreator), get_abi(surface), dpi, put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromDirect3D11SurfaceWithDpiAndAlpha(get_abi(resourceCreator), get_abi(surface), dpi, get_abi(alpha), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromBytes(get_abi(resourceCreator), bytes.size(), get_abi(bytes), widthInPixels, heightInPixels, get_abi(format), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromBytesWithDpi(get_abi(resourceCreator), bytes.size(), get_abi(bytes), widthInPixels, heightInPixels, get_abi(format), dpi, put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromBytesWithDpiAndAlpha(get_abi(resourceCreator), bytes.size(), get_abi(bytes), widthInPixels, heightInPixels, get_abi(format), dpi, get_abi(alpha), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IBuffer const& buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromBytesWithBuffer(get_abi(resourceCreator), get_abi(buffer), widthInPixels, heightInPixels, get_abi(format), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IBuffer const& buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromBytesWithBufferAndDpi(get_abi(resourceCreator), get_abi(buffer), widthInPixels, heightInPixels, get_abi(format), dpi, put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IBuffer const& buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromBytesWithBufferAndDpiAndAlpha(get_abi(resourceCreator), get_abi(buffer), widthInPixels, heightInPixels, get_abi(format), dpi, get_abi(alpha), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t widthInPixels, int32_t heightInPixels) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromColors(get_abi(resourceCreator), colors.size(), get_abi(colors), widthInPixels, heightInPixels, put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t widthInPixels, int32_t heightInPixels, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromColorsWithDpi(get_abi(resourceCreator), colors.size(), get_abi(colors), widthInPixels, heightInPixels, dpi, put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t widthInPixels, int32_t heightInPixels, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromColorsWithDpiAndAlpha(get_abi(resourceCreator), colors.size(), get_abi(colors), widthInPixels, heightInPixels, dpi, get_abi(alpha), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBitmap consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::CreateFromSoftwareBitmap(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::Imaging::SoftwareBitmap const& sourceBitmap) const
{
    Microsoft::Graphics::Canvas::CanvasBitmap bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->CreateFromSoftwareBitmap(get_abi(resourceCreator), get_abi(sourceBitmap), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromHstring(get_abi(resourceCreator), get_abi(fileName), put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, float dpi) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromHstringWithDpi(get_abi(resourceCreator), get_abi(fileName), dpi, put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromHstringWithDpiAndAlpha(get_abi(resourceCreator), get_abi(fileName), dpi, get_abi(alpha), put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromUri(get_abi(resourceCreator), get_abi(uri), put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, float dpi) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromUriWithDpi(get_abi(resourceCreator), get_abi(uri), dpi, put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromUriWithDpiAndAlpha(get_abi(resourceCreator), get_abi(uri), dpi, get_abi(alpha), put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromStream(get_abi(resourceCreator), get_abi(stream), put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, float dpi) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromStreamWithDpi(get_abi(resourceCreator), get_abi(stream), dpi, put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> consume_Microsoft_Graphics_Canvas_ICanvasBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> canvasBitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasBitmapStatics)->LoadAsyncFromStreamWithDpiAndAlpha(get_abi(resourceCreator), get_abi(stream), dpi, get_abi(alpha), put_abi(canvasBitmap)));
    return canvasBitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_ICanvasCommandList<D>::CreateDrawingSession() const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession drawingSession{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasCommandList)->CreateDrawingSession(put_abi(drawingSession)));
    return drawingSession;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasCommandList<D>::Device() const
{
    Microsoft::Graphics::Canvas::CanvasDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasCommandList)->get_Device(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasCommandList consume_Microsoft_Graphics_Canvas_ICanvasCommandListFactory<D>::Create(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) const
{
    Microsoft::Graphics::Canvas::CanvasCommandList commandList{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasCommandListFactory)->Create(get_abi(resourceCreator), put_abi(commandList)));
    return commandList;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::ForceSoftwareRenderer() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->get_ForceSoftwareRenderer(&value));
    return value;
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::MaximumBitmapSizeInPixels() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->get_MaximumBitmapSizeInPixels(&value));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::IsPixelFormatSupported(Windows::Graphics::DirectX::DirectXPixelFormat const& pixelFormat) const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->IsPixelFormatSupported(get_abi(pixelFormat), &value));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::IsBufferPrecisionSupported(Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->IsBufferPrecisionSupported(get_abi(bufferPrecision), &value));
    return value;
}

template <typename D> uint64_t consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::MaximumCacheSize() const
{
    uint64_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->get_MaximumCacheSize(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::MaximumCacheSize(uint64_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->put_MaximumCacheSize(value));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::LowPriority() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->get_LowPriority(&value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::LowPriority(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->put_LowPriority(value));
}

template <typename D> winrt::event_token consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::DeviceLost(Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::CanvasDevice, Windows::Foundation::IInspectable> const& value) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->add_DeviceLost(get_abi(value), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::DeviceLost_revoker consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::DeviceLost(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::CanvasDevice, Windows::Foundation::IInspectable> const& value) const
{
    return impl::make_event_revoker<D, DeviceLost_revoker>(this, DeviceLost(value));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::DeviceLost(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->remove_DeviceLost(get_abi(token)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::IsDeviceLost(int32_t hresult) const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->IsDeviceLost(hresult, &value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::RaiseDeviceLost() const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->RaiseDeviceLost());
}

template <typename D> Microsoft::Graphics::Canvas::CanvasLock consume_Microsoft_Graphics_Canvas_ICanvasDevice<D>::Lock() const
{
    Microsoft::Graphics::Canvas::CanvasLock lock{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDevice)->Lock(put_abi(lock)));
    return lock;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasDeviceFactory<D>::CreateWithForceSoftwareRendererOption(bool forceSoftwareRenderer) const
{
    Microsoft::Graphics::Canvas::CanvasDevice canvasDevice{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDeviceFactory)->CreateWithForceSoftwareRendererOption(forceSoftwareRenderer, put_abi(canvasDevice)));
    return canvasDevice;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasDeviceStatics<D>::CreateFromDirect3D11Device(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const& direct3DDevice) const
{
    Microsoft::Graphics::Canvas::CanvasDevice canvasDevice{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDeviceStatics)->CreateFromDirect3D11Device(get_abi(direct3DDevice), put_abi(canvasDevice)));
    return canvasDevice;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasDeviceStatics<D>::GetSharedDevice() const
{
    Microsoft::Graphics::Canvas::CanvasDevice canvasDevice{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDeviceStatics)->GetSharedDevice(put_abi(canvasDevice)));
    return canvasDevice;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasDeviceStatics<D>::GetSharedDevice(bool forceSoftwareRenderer) const
{
    Microsoft::Graphics::Canvas::CanvasDevice canvasDevice{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDeviceStatics)->GetSharedDeviceWithForceSoftwareRenderer(forceSoftwareRenderer, put_abi(canvasDevice)));
    return canvasDevice;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDeviceStatics<D>::DebugLevel(Microsoft::Graphics::Canvas::CanvasDebugLevel const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDeviceStatics)->put_DebugLevel(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDebugLevel consume_Microsoft_Graphics_Canvas_ICanvasDeviceStatics<D>::DebugLevel() const
{
    Microsoft::Graphics::Canvas::CanvasDebugLevel value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDeviceStatics)->get_DebugLevel(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Clear(Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->Clear(get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Clear(Windows::Foundation::Numerics::float4 const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->ClearHdr(get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Flush() const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->Flush());
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOrigin(get_abi(image)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Numerics::float2 const& offset) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOffset(get_abi(image), get_abi(offset)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, float x, float y) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtCoords(get_abi(image), x, y));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destinationRectangle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageToRect(get_abi(bitmap), get_abi(destinationRectangle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRectangle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOffsetWithSourceRect(get_abi(image), get_abi(offset), get_abi(sourceRectangle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, float x, float y, Windows::Foundation::Rect const& sourceRectangle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtCoordsWithSourceRect(get_abi(image), x, y, get_abi(sourceRectangle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& destinationRectangle, Windows::Foundation::Rect const& sourceRectangle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageToRectWithSourceRect(get_abi(image), get_abi(destinationRectangle), get_abi(sourceRectangle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRectangle, float opacity) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOffsetWithSourceRectAndOpacity(get_abi(image), get_abi(offset), get_abi(sourceRectangle), opacity));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, float x, float y, Windows::Foundation::Rect const& sourceRectangle, float opacity) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtCoordsWithSourceRectAndOpacity(get_abi(image), x, y, get_abi(sourceRectangle), opacity));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& destinationRectangle, Windows::Foundation::Rect const& sourceRectangle, float opacity) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageToRectWithSourceRectAndOpacity(get_abi(image), get_abi(destinationRectangle), get_abi(sourceRectangle), opacity));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(get_abi(image), get_abi(offset), get_abi(sourceRectangle), opacity, get_abi(interpolation)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, float x, float y, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(get_abi(image), x, y, get_abi(sourceRectangle), opacity, get_abi(interpolation)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& destinationRectangle, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageToRectWithSourceRectAndOpacityAndInterpolation(get_abi(image), get_abi(destinationRectangle), get_abi(sourceRectangle), opacity, get_abi(interpolation)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Microsoft::Graphics::Canvas::CanvasComposite const& composite) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(get_abi(image), get_abi(offset), get_abi(sourceRectangle), opacity, get_abi(interpolation), get_abi(composite)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, float x, float y, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Microsoft::Graphics::Canvas::CanvasComposite const& composite) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(get_abi(image), x, y, get_abi(sourceRectangle), opacity, get_abi(interpolation), get_abi(composite)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& destinationRectangle, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Microsoft::Graphics::Canvas::CanvasComposite const& composite) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(get_abi(image), get_abi(destinationRectangle), get_abi(sourceRectangle), opacity, get_abi(interpolation), get_abi(composite)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Windows::Foundation::Numerics::float4x4 const& perspective) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(get_abi(bitmap), get_abi(offset), get_abi(sourceRectangle), opacity, get_abi(interpolation), get_abi(perspective)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, float x, float y, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Windows::Foundation::Numerics::float4x4 const& perspective) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(get_abi(bitmap), x, y, get_abi(sourceRectangle), opacity, get_abi(interpolation), get_abi(perspective)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawImage(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destinationRectangle, Windows::Foundation::Rect const& sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Windows::Foundation::Numerics::float4x4 const& perspective) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(get_abi(bitmap), get_abi(destinationRectangle), get_abi(sourceRectangle), opacity, get_abi(interpolation), get_abi(perspective)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(Windows::Foundation::Numerics::float2 const& point0, Windows::Foundation::Numerics::float2 const& point1, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineWithBrush(get_abi(point0), get_abi(point1), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(float x0, float y0, float x1, float y1, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineAtCoordsWithBrush(x0, y0, x1, y1, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(Windows::Foundation::Numerics::float2 const& point0, Windows::Foundation::Numerics::float2 const& point1, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineWithColor(get_abi(point0), get_abi(point1), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(float x0, float y0, float x1, float y1, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineAtCoordsWithColor(x0, y0, x1, y1, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(Windows::Foundation::Numerics::float2 const& point0, Windows::Foundation::Numerics::float2 const& point1, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineWithBrushAndStrokeWidth(get_abi(point0), get_abi(point1), get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(float x0, float y0, float x1, float y1, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineAtCoordsWithBrushAndStrokeWidth(x0, y0, x1, y1, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(Windows::Foundation::Numerics::float2 const& point0, Windows::Foundation::Numerics::float2 const& point1, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineWithColorAndStrokeWidth(get_abi(point0), get_abi(point1), get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(float x0, float y0, float x1, float y1, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineAtCoordsWithColorAndStrokeWidth(x0, y0, x1, y1, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(Windows::Foundation::Numerics::float2 const& point0, Windows::Foundation::Numerics::float2 const& point1, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineWithBrushAndStrokeWidthAndStrokeStyle(get_abi(point0), get_abi(point1), get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(float x0, float y0, float x1, float y1, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x0, y0, x1, y1, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(Windows::Foundation::Numerics::float2 const& point0, Windows::Foundation::Numerics::float2 const& point1, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineWithColorAndStrokeWidthAndStrokeStyle(get_abi(point0), get_abi(point1), get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawLine(float x0, float y0, float x1, float y1, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x0, y0, x1, y1, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(Windows::Foundation::Rect const& rect, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleWithBrush(get_abi(rect), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(float x, float y, float w, float h, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleAtCoordsWithBrush(x, y, w, h, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(Windows::Foundation::Rect const& rect, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleWithColor(get_abi(rect), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(float x, float y, float w, float h, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleAtCoordsWithColor(x, y, w, h, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(Windows::Foundation::Rect const& rect, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleWithBrushAndStrokeWidth(get_abi(rect), get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(float x, float y, float w, float h, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleAtCoordsWithBrushAndStrokeWidth(x, y, w, h, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(Windows::Foundation::Rect const& rect, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleWithColorAndStrokeWidth(get_abi(rect), get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(float x, float y, float w, float h, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleAtCoordsWithColorAndStrokeWidth(x, y, w, h, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(Windows::Foundation::Rect const& rect, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(get_abi(rect), get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(float x, float y, float w, float h, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, w, h, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(Windows::Foundation::Rect const& rect, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(get_abi(rect), get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRectangle(float x, float y, float w, float h, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, w, h, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRectangle(Windows::Foundation::Rect const& rect, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRectangleWithBrush(get_abi(rect), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRectangle(float x, float y, float w, float h, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRectangleAtCoordsWithBrush(x, y, w, h, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRectangle(Windows::Foundation::Rect const& rect, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRectangleWithColor(get_abi(rect), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRectangle(float x, float y, float w, float h, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRectangleAtCoordsWithColor(x, y, w, h, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRectangle(Windows::Foundation::Rect const& rect, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRectangleWithBrushAndOpacityBrush(get_abi(rect), get_abi(brush), get_abi(opacityBrush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRectangle(float x, float y, float w, float h, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRectangleAtCoordsWithBrushAndOpacityBrush(x, y, w, h, get_abi(brush), get_abi(opacityBrush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleWithBrush(get_abi(rect), radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleAtCoordsWithBrush(x, y, w, h, radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleWithColor(get_abi(rect), radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleAtCoordsWithColor(x, y, w, h, radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleWithBrushAndStrokeWidth(get_abi(rect), radiusX, radiusY, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(x, y, w, h, radiusX, radiusY, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleWithColorAndStrokeWidth(get_abi(rect), radiusX, radiusY, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(x, y, w, h, radiusX, radiusY, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(get_abi(rect), radiusX, radiusY, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, w, h, radiusX, radiusY, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(get_abi(rect), radiusX, radiusY, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, w, h, radiusX, radiusY, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRoundedRectangleWithBrush(get_abi(rect), radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRoundedRectangleAtCoordsWithBrush(x, y, w, h, radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRoundedRectangle(Windows::Foundation::Rect const& rect, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRoundedRectangleWithColor(get_abi(rect), radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillRoundedRectangleAtCoordsWithColor(x, y, w, h, radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseWithBrush(get_abi(centerPoint), radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(float x, float y, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseAtCoordsWithBrush(x, y, radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseWithColor(get_abi(centerPoint), radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(float x, float y, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseAtCoordsWithColor(x, y, radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseWithBrushAndStrokeWidth(get_abi(centerPoint), radiusX, radiusY, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(float x, float y, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseAtCoordsWithBrushAndStrokeWidth(x, y, radiusX, radiusY, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseWithColorAndStrokeWidth(get_abi(centerPoint), radiusX, radiusY, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(float x, float y, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseAtCoordsWithColorAndStrokeWidth(x, y, radiusX, radiusY, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(get_abi(centerPoint), radiusX, radiusY, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(float x, float y, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, radiusX, radiusY, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(get_abi(centerPoint), radiusX, radiusY, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawEllipse(float x, float y, float radiusX, float radiusY, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, radiusX, radiusY, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillEllipseWithBrush(get_abi(centerPoint), radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillEllipse(float x, float y, float radiusX, float radiusY, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillEllipseAtCoordsWithBrush(x, y, radiusX, radiusY, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillEllipse(Windows::Foundation::Numerics::float2 const& centerPoint, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillEllipseWithColor(get_abi(centerPoint), radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillEllipse(float x, float y, float radiusX, float radiusY, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillEllipseAtCoordsWithColor(x, y, radiusX, radiusY, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleWithBrush(get_abi(centerPoint), radius, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(float x, float y, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleAtCoordsWithBrush(x, y, radius, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleWithColor(get_abi(centerPoint), radius, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(float x, float y, float radius, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleAtCoordsWithColor(x, y, radius, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleWithBrushAndStrokeWidth(get_abi(centerPoint), radius, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(float x, float y, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleAtCoordsWithBrushAndStrokeWidth(x, y, radius, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleWithColorAndStrokeWidth(get_abi(centerPoint), radius, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(float x, float y, float radius, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleAtCoordsWithColorAndStrokeWidth(x, y, radius, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(get_abi(centerPoint), radius, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(float x, float y, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, radius, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleWithColorAndStrokeWidthAndStrokeStyle(get_abi(centerPoint), radius, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCircle(float x, float y, float radius, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, radius, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillCircleWithBrush(get_abi(centerPoint), radius, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillCircle(float x, float y, float radius, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillCircleAtCoordsWithBrush(x, y, radius, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillCircle(Windows::Foundation::Numerics::float2 const& centerPoint, float radius, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillCircleWithColor(get_abi(centerPoint), radius, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillCircle(float x, float y, float radius, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillCircleAtCoordsWithColor(x, y, radius, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, Windows::Foundation::Numerics::float2 const& point, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtPointWithColor(get_abi(text), get_abi(point), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, float x, float y, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtPointCoordsWithColor(get_abi(text), x, y, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtPointWithBrushAndFormat(get_abi(text), get_abi(point), get_abi(brush), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, Windows::Foundation::Rect const& rectangle, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtRectWithBrushAndFormat(get_abi(text), get_abi(rectangle), get_abi(brush), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtPointCoordsWithBrushAndFormat(get_abi(text), x, y, get_abi(brush), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, float x, float y, float w, float h, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtRectCoordsWithBrushAndFormat(get_abi(text), x, y, w, h, get_abi(brush), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, Windows::Foundation::Numerics::float2 const& point, Windows::UI::Color const& color, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtPointWithColorAndFormat(get_abi(text), get_abi(point), get_abi(color), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, Windows::Foundation::Rect const& rectangle, Windows::UI::Color const& color, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtRectWithColorAndFormat(get_abi(text), get_abi(rectangle), get_abi(color), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, float x, float y, Windows::UI::Color const& color, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtPointCoordsWithColorAndFormat(get_abi(text), x, y, get_abi(color), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawText(param::hstring const& text, float x, float y, float w, float h, Windows::UI::Color const& color, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const& format) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextAtRectCoordsWithColorAndFormat(get_abi(text), x, y, w, h, get_abi(color), get_abi(format)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryWithBrush(get_abi(geometry), get_abi(offset), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryWithColor(get_abi(geometry), get_abi(offset), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtCoordsWithBrush(get_abi(geometry), x, y, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtCoordsWithColor(get_abi(geometry), x, y, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtOriginWithBrush(get_abi(geometry), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtOriginWithColor(get_abi(geometry), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryWithBrushAndStrokeWidth(get_abi(geometry), get_abi(offset), get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryWithColorAndStrokeWidth(get_abi(geometry), get_abi(offset), get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtCoordsWithBrushAndStrokeWidth(get_abi(geometry), x, y, get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtCoordsWithColorAndStrokeWidth(get_abi(geometry), x, y, get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtOriginWithBrushAndStrokeWidth(get_abi(geometry), get_abi(brush), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::UI::Color const& color, float strokeWidth) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtOriginWithColorAndStrokeWidth(get_abi(geometry), get_abi(color), strokeWidth));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(get_abi(geometry), get_abi(offset), get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(get_abi(geometry), get_abi(offset), get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(get_abi(geometry), x, y, get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(get_abi(geometry), x, y, get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(get_abi(geometry), get_abi(brush), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::UI::Color const& color, float strokeWidth, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const& strokeStyle) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(get_abi(geometry), get_abi(color), strokeWidth, get_abi(strokeStyle)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryWithBrush(get_abi(geometry), get_abi(offset), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryWithBrushAndOpacityBrush(get_abi(geometry), get_abi(offset), get_abi(brush), get_abi(opacityBrush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryWithColor(get_abi(geometry), get_abi(offset), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryAtCoordsWithBrush(get_abi(geometry), x, y, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryAtCoordsWithBrushAndOpacityBrush(get_abi(geometry), x, y, get_abi(brush), get_abi(opacityBrush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, float x, float y, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryAtCoordsWithColor(get_abi(geometry), x, y, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryAtOriginWithBrush(get_abi(geometry), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryAtOriginWithBrushAndOpacityBrush(get_abi(geometry), get_abi(brush), get_abi(opacityBrush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::FillGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& geometry, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->FillGeometryAtOriginWithColor(get_abi(geometry), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCachedGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCachedGeometryWithBrush(get_abi(geometry), get_abi(offset), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCachedGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const& geometry, Windows::Foundation::Numerics::float2 const& offset, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCachedGeometryWithColor(get_abi(geometry), get_abi(offset), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCachedGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const& geometry, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCachedGeometryAtCoordsWithBrush(get_abi(geometry), x, y, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCachedGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const& geometry, float x, float y, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCachedGeometryAtCoordsWithColor(get_abi(geometry), x, y, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCachedGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const& geometry, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCachedGeometryAtOriginWithBrush(get_abi(geometry), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawCachedGeometry(Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const& geometry, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawCachedGeometryAtOriginWithColor(get_abi(geometry), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawTextLayout(Microsoft::Graphics::Canvas::Text::CanvasTextLayout const& textLayout, Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextLayoutWithBrush(get_abi(textLayout), get_abi(point), get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawTextLayout(Microsoft::Graphics::Canvas::Text::CanvasTextLayout const& textLayout, float x, float y, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextLayoutAtCoordsWithBrush(get_abi(textLayout), x, y, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawTextLayout(Microsoft::Graphics::Canvas::Text::CanvasTextLayout const& textLayout, Windows::Foundation::Numerics::float2 const& point, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextLayoutWithColor(get_abi(textLayout), get_abi(point), get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawTextLayout(Microsoft::Graphics::Canvas::Text::CanvasTextLayout const& textLayout, float x, float y, Windows::UI::Color const& color) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawTextLayoutAtCoordsWithColor(get_abi(textLayout), x, y, get_abi(color)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawInk(param::iterable<Windows::UI::Input::Inking::InkStroke> const& inkStrokes) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawInk(get_abi(inkStrokes)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawInk(param::iterable<Windows::UI::Input::Inking::InkStroke> const& inkStrokes, bool highContrast) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawInkWithHighContrast(get_abi(inkStrokes), highContrast));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGradientMesh(Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const& gradientMesh) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGradientMeshAtOrigin(get_abi(gradientMesh)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGradientMesh(Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const& gradientMesh, Windows::Foundation::Numerics::float2 const& point) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGradientMesh(get_abi(gradientMesh), get_abi(point)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGradientMesh(Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const& gradientMesh, float x, float y) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGradientMeshAtCoords(get_abi(gradientMesh), x, y));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawSvg(Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const& svgDocument, Windows::Foundation::Size const& viewportSize) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawSvgAtOrigin(get_abi(svgDocument), get_abi(viewportSize)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawSvg(Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const& svgDocument, Windows::Foundation::Size const& viewportSize, Windows::Foundation::Numerics::float2 const& point) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawSvgAtPoint(get_abi(svgDocument), get_abi(viewportSize), get_abi(point)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawSvg(Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const& svgDocument, Windows::Foundation::Size const& viewportSize, float x, float y) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawSvgAtCoords(get_abi(svgDocument), get_abi(viewportSize), x, y));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAntialiasing consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Antialiasing() const
{
    Microsoft::Graphics::Canvas::CanvasAntialiasing value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_Antialiasing(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Antialiasing(Microsoft::Graphics::Canvas::CanvasAntialiasing const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_Antialiasing(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasBlend consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Blend() const
{
    Microsoft::Graphics::Canvas::CanvasBlend value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_Blend(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Blend(Microsoft::Graphics::Canvas::CanvasBlend const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_Blend(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::TextAntialiasing() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_TextAntialiasing(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::TextAntialiasing(Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_TextAntialiasing(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::TextRenderingParameters() const
{
    Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_TextRenderingParameters(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::TextRenderingParameters(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_TextRenderingParameters(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float3x2 consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Transform() const
{
    Windows::Foundation::Numerics::float3x2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_Transform(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Transform(Windows::Foundation::Numerics::float3x2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_Transform(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasUnits consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Units() const
{
    Microsoft::Graphics::Canvas::CanvasUnits value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_Units(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::Units(Microsoft::Graphics::Canvas::CanvasUnits const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_Units(get_abi(value)));
}

template <typename D> Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::EffectBufferPrecision() const
{
    Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_EffectBufferPrecision(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::EffectBufferPrecision(optional<Microsoft::Graphics::Canvas::CanvasBufferPrecision> const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_EffectBufferPrecision(get_abi(value)));
}

template <typename D> Windows::Graphics::Imaging::BitmapSize consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::EffectTileSize() const
{
    Windows::Graphics::Imaging::BitmapSize value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->get_EffectTileSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::EffectTileSize(Windows::Graphics::Imaging::BitmapSize const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->put_EffectTileSize(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(float opacity) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacity(opacity, put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityBrush(get_abi(opacityBrush), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(float opacity, Windows::Foundation::Rect const& clipRectangle) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityAndClipRectangle(opacity, get_abi(clipRectangle), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush, Windows::Foundation::Rect const& clipRectangle) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityBrushAndClipRectangle(get_abi(opacityBrush), get_abi(clipRectangle), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(float opacity, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& clipGeometry) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityAndClipGeometry(opacity, get_abi(clipGeometry), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& clipGeometry) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityBrushAndClipGeometry(get_abi(opacityBrush), get_abi(clipGeometry), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(float opacity, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& clipGeometry, Windows::Foundation::Numerics::float3x2 const& geometryTransform) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityAndClipGeometryAndTransform(opacity, get_abi(clipGeometry), get_abi(geometryTransform), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& clipGeometry, Windows::Foundation::Numerics::float3x2 const& geometryTransform) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithOpacityBrushAndClipGeometryAndTransform(get_abi(opacityBrush), get_abi(clipGeometry), get_abi(geometryTransform), put_abi(layer)));
    return layer;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasActiveLayer consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateLayer(float opacity, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& opacityBrush, Windows::Foundation::Rect const& clipRectangle, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const& clipGeometry, Windows::Foundation::Numerics::float3x2 const& geometryTransform, Microsoft::Graphics::Canvas::CanvasLayerOptions const& options) const
{
    Microsoft::Graphics::Canvas::CanvasActiveLayer layer{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateLayerWithAllOptions(opacity, get_abi(opacityBrush), get_abi(clipRectangle), get_abi(clipGeometry), get_abi(geometryTransform), get_abi(options), put_abi(layer)));
    return layer;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGlyphRun(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphs, bool isSideways, uint32_t bidiLevel, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGlyphRun(get_abi(point), get_abi(fontFace), fontSize, glyphs.size(), get_abi(glyphs), isSideways, bidiLevel, get_abi(brush)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGlyphRun(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphs, bool isSideways, uint32_t bidiLevel, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGlyphRunWithMeasuringMode(get_abi(point), get_abi(fontFace), fontSize, glyphs.size(), get_abi(glyphs), isSideways, bidiLevel, get_abi(brush), get_abi(measuringMode)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::DrawGlyphRun(Windows::Foundation::Numerics::float2 const& point, Microsoft::Graphics::Canvas::Text::CanvasFontFace const& fontFace, float fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const> glyphs, bool isSideways, uint32_t bidiLevel, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const& brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const& measuringMode, param::hstring const& localeName, param::hstring const& textString, array_view<int32_t const> clusterMapIndices, uint32_t textPosition) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->DrawGlyphRunWithMeasuringModeAndDescription(get_abi(point), get_abi(fontFace), fontSize, glyphs.size(), get_abi(glyphs), isSideways, bidiLevel, get_abi(brush), get_abi(measuringMode), get_abi(localeName), get_abi(textString), clusterMapIndices.size(), get_abi(clusterMapIndices), textPosition));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSpriteBatch consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateSpriteBatch() const
{
    Microsoft::Graphics::Canvas::CanvasSpriteBatch spriteBatch{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateSpriteBatch(put_abi(spriteBatch)));
    return spriteBatch;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSpriteBatch consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateSpriteBatch(Microsoft::Graphics::Canvas::CanvasSpriteSortMode const& sortMode) const
{
    Microsoft::Graphics::Canvas::CanvasSpriteBatch spriteBatch{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateSpriteBatchWithSortMode(get_abi(sortMode), put_abi(spriteBatch)));
    return spriteBatch;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSpriteBatch consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateSpriteBatch(Microsoft::Graphics::Canvas::CanvasSpriteSortMode const& sortMode, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation) const
{
    Microsoft::Graphics::Canvas::CanvasSpriteBatch spriteBatch{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateSpriteBatchWithSortModeAndInterpolation(get_abi(sortMode), get_abi(interpolation), put_abi(spriteBatch)));
    return spriteBatch;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSpriteBatch consume_Microsoft_Graphics_Canvas_ICanvasDrawingSession<D>::CreateSpriteBatch(Microsoft::Graphics::Canvas::CanvasSpriteSortMode const& sortMode, Microsoft::Graphics::Canvas::CanvasImageInterpolation const& interpolation, Microsoft::Graphics::Canvas::CanvasSpriteOptions const& options) const
{
    Microsoft::Graphics::Canvas::CanvasSpriteBatch spriteBatch{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasDrawingSession)->CreateSpriteBatchWithSortModeAndInterpolationAndOptions(get_abi(sortMode), get_abi(interpolation), get_abi(options), put_abi(spriteBatch)));
    return spriteBatch;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_ICanvasImage<D>::GetBounds(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImage)->GetBounds(get_abi(resourceCreator), put_abi(bounds)));
    return bounds;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_ICanvasImage<D>::GetBounds(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Numerics::float3x2 const& transform) const
{
    Windows::Foundation::Rect bounds{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImage)->GetBoundsWithTransform(get_abi(resourceCreator), get_abi(transform), put_abi(bounds)));
    return bounds;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasImageStatics<D>::SaveAsync(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, float dpi, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat) const
{
    Windows::Foundation::IAsyncAction action{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImageStatics)->SaveAsync(get_abi(image), get_abi(sourceRectangle), dpi, get_abi(resourceCreator), get_abi(stream), get_abi(fileFormat), put_abi(action)));
    return action;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasImageStatics<D>::SaveAsync(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, float dpi, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat, float quality) const
{
    Windows::Foundation::IAsyncAction action{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImageStatics)->SaveWithQualityAsync(get_abi(image), get_abi(sourceRectangle), dpi, get_abi(resourceCreator), get_abi(stream), get_abi(fileFormat), quality, put_abi(action)));
    return action;
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_Graphics_Canvas_ICanvasImageStatics<D>::SaveAsync(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, float dpi, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat, float quality, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision) const
{
    Windows::Foundation::IAsyncAction action{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImageStatics)->SaveWithQualityAndBufferPrecisionAsync(get_abi(image), get_abi(sourceRectangle), dpi, get_abi(resourceCreator), get_abi(stream), get_abi(fileFormat), quality, get_abi(bufferPrecision), put_abi(action)));
    return action;
}

template <typename D> com_array<float> consume_Microsoft_Graphics_Canvas_ICanvasImageStatics<D>::ComputeHistogram(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const& channelSelect, int32_t numberOfBins) const
{
    com_array<float> valueElements;
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImageStatics)->ComputeHistogram(get_abi(image), get_abi(sourceRectangle), get_abi(resourceCreator), get_abi(channelSelect), numberOfBins, impl::put_size_abi(valueElements), put_abi(valueElements)));
    return valueElements;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasImageStatics<D>::IsHistogramSupported(Microsoft::Graphics::Canvas::CanvasDevice const& device) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasImageStatics)->IsHistogramSupported(get_abi(device), &result));
    return result;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_ICanvasRenderTarget<D>::CreateDrawingSession() const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession drawingSession{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTarget)->CreateDrawingSession(put_abi(drawingSession)));
    return drawingSession;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory<D>::CreateWithSize(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, Windows::Foundation::Size const& size) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget renderTarget{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory)->CreateWithSize(get_abi(resourceCreator), get_abi(size), put_abi(renderTarget)));
    return renderTarget;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory<D>::CreateWithWidthAndHeight(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget renderTarget{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory)->CreateWithWidthAndHeight(get_abi(resourceCreator), width, height, put_abi(renderTarget)));
    return renderTarget;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory<D>::CreateWithWidthAndHeightAndDpi(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget renderTarget{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory)->CreateWithWidthAndHeightAndDpi(get_abi(resourceCreator), width, height, dpi, put_abi(renderTarget)));
    return renderTarget;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory<D>::CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat const& format, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget renderTarget{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory)->CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(get_abi(resourceCreator), width, height, dpi, get_abi(format), get_abi(alpha), put_abi(renderTarget)));
    return renderTarget;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics<D>::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics)->CreateFromDirect3D11Surface(get_abi(resourceCreator), get_abi(surface), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics<D>::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics)->CreateFromDirect3D11SurfaceWithDpi(get_abi(resourceCreator), get_abi(surface), dpi, put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasRenderTarget consume_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics<D>::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Microsoft::Graphics::Canvas::CanvasRenderTarget bitmap{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics)->CreateFromDirect3D11SurfaceWithDpiAndAlpha(get_abi(resourceCreator), get_abi(surface), dpi, get_abi(alpha), put_abi(bitmap)));
    return bitmap;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasResourceCreator<D>::Device() const
{
    Microsoft::Graphics::Canvas::CanvasDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasResourceCreator)->get_Device(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi<D>::Dpi() const
{
    float dpi{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi)->get_Dpi(&dpi));
    return dpi;
}

template <typename D> float consume_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi<D>::ConvertPixelsToDips(int32_t pixels) const
{
    float dips{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi)->ConvertPixelsToDips(pixels, &dips));
    return dips;
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi<D>::ConvertDipsToPixels(float dips, Microsoft::Graphics::Canvas::CanvasDpiRounding const& dpiRounding) const
{
    int32_t pixels{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi)->ConvertDipsToPixels(dips, get_abi(dpiRounding), &pixels));
    return pixels;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destRect) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawToRect(get_abi(bitmap), get_abi(destRect)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawAtOffset(get_abi(bitmap), get_abi(offset)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float3x2 const& transform) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawWithTransform(get_abi(bitmap), get_abi(transform)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destRect, Windows::Foundation::Numerics::float4 const& tint) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawToRectWithTint(get_abi(bitmap), get_abi(destRect), get_abi(tint)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Numerics::float4 const& tint) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawAtOffsetWithTint(get_abi(bitmap), get_abi(offset), get_abi(tint)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float3x2 const& transform, Windows::Foundation::Numerics::float4 const& tint) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawWithTransformAndTint(get_abi(bitmap), get_abi(transform), get_abi(tint)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destRect, Windows::Foundation::Numerics::float4 const& tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip const& flip) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawToRectWithTintAndFlip(get_abi(bitmap), get_abi(destRect), get_abi(tint), get_abi(flip)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float3x2 const& transform, Windows::Foundation::Numerics::float4 const& tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip const& flip) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawWithTransformAndTintAndFlip(get_abi(bitmap), get_abi(transform), get_abi(tint), get_abi(flip)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::Draw(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Numerics::float4 const& tint, Windows::Foundation::Numerics::float2 const& origin, float rotation, Windows::Foundation::Numerics::float2 const& scale, Microsoft::Graphics::Canvas::CanvasSpriteFlip const& flip) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawAtOffsetWithTintAndTransform(get_abi(bitmap), get_abi(offset), get_abi(tint), get_abi(origin), rotation, get_abi(scale), get_abi(flip)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destRect, Windows::Foundation::Rect const& sourceRect) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetToRect(get_abi(bitmap), get_abi(destRect), get_abi(sourceRect)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRect) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetAtOffset(get_abi(bitmap), get_abi(offset), get_abi(sourceRect)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float3x2 const& transform, Windows::Foundation::Rect const& sourceRect) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetWithTransform(get_abi(bitmap), get_abi(transform), get_abi(sourceRect)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destRect, Windows::Foundation::Rect const& sourceRect, Windows::Foundation::Numerics::float4 const& tint) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetToRectWithTint(get_abi(bitmap), get_abi(destRect), get_abi(sourceRect), get_abi(tint)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRect, Windows::Foundation::Numerics::float4 const& tint) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetAtOffsetWithTint(get_abi(bitmap), get_abi(offset), get_abi(sourceRect), get_abi(tint)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float3x2 const& transform, Windows::Foundation::Rect const& sourceRect, Windows::Foundation::Numerics::float4 const& tint) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetWithTransformAndTint(get_abi(bitmap), get_abi(transform), get_abi(sourceRect), get_abi(tint)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Rect const& destRect, Windows::Foundation::Rect const& sourceRect, Windows::Foundation::Numerics::float4 const& tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip const& flip) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetToRectWithTintAndFlip(get_abi(bitmap), get_abi(destRect), get_abi(sourceRect), get_abi(tint), get_abi(flip)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float3x2 const& transform, Windows::Foundation::Rect const& sourceRect, Windows::Foundation::Numerics::float4 const& tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip const& flip) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetWithTransformAndTintAndFlip(get_abi(bitmap), get_abi(transform), get_abi(sourceRect), get_abi(tint), get_abi(flip)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatch<D>::DrawFromSpriteSheet(Microsoft::Graphics::Canvas::CanvasBitmap const& bitmap, Windows::Foundation::Numerics::float2 const& offset, Windows::Foundation::Rect const& sourceRect, Windows::Foundation::Numerics::float4 const& tint, Windows::Foundation::Numerics::float2 const& origin, float rotation, Windows::Foundation::Numerics::float2 const& scale, Microsoft::Graphics::Canvas::CanvasSpriteFlip const& flip) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatch)->DrawFromSpriteSheetAtOffsetWithTintAndTransform(get_abi(bitmap), get_abi(offset), get_abi(sourceRect), get_abi(tint), get_abi(origin), rotation, get_abi(scale), get_abi(flip)));
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics<D>::IsSupported(Microsoft::Graphics::Canvas::CanvasDevice const& device) const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics)->IsSupported(get_abi(device), &value));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::Present() const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->Present());
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::Present(int32_t syncInterval) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->PresentWithSyncInterval(syncInterval));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::ResizeBuffers(Windows::Foundation::Size const& newSize) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->ResizeBuffersWithSize(get_abi(newSize)));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::ResizeBuffers(float newWidth, float newHeight) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->ResizeBuffersWithWidthAndHeight(newWidth, newHeight));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::ResizeBuffers(float newWidth, float newHeight, float newDpi) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->ResizeBuffersWithWidthAndHeightAndDpi(newWidth, newHeight, newDpi));
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::ResizeBuffers(float newWidth, float newHeight, float newDpi, Windows::Graphics::DirectX::DirectXPixelFormat const& newFormat, int32_t bufferCount) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->ResizeBuffersWithAllOptions(newWidth, newHeight, newDpi, get_abi(newFormat), bufferCount));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::Size() const
{
    Windows::Foundation::Size size{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_Size(put_abi(size)));
    return size;
}

template <typename D> Windows::Graphics::Imaging::BitmapSize consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::SizeInPixels() const
{
    Windows::Graphics::Imaging::BitmapSize size{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_SizeInPixels(put_abi(size)));
    return size;
}

template <typename D> Windows::Graphics::DirectX::DirectXPixelFormat consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::Format() const
{
    Windows::Graphics::DirectX::DirectXPixelFormat value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_Format(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::BufferCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_BufferCount(&value));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasAlphaMode consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::AlphaMode() const
{
    Microsoft::Graphics::Canvas::CanvasAlphaMode value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_AlphaMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChainRotation consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::Rotation() const
{
    Microsoft::Graphics::Canvas::CanvasSwapChainRotation value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_Rotation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::Rotation(Microsoft::Graphics::Canvas::CanvasSwapChainRotation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->put_Rotation(get_abi(value)));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::SourceSize() const
{
    Windows::Foundation::Size value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_SourceSize(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::SourceSize(Windows::Foundation::Size const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->put_SourceSize(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float3x2 consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::TransformMatrix() const
{
    Windows::Foundation::Numerics::float3x2 value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->get_TransformMatrix(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::TransformMatrix(Windows::Foundation::Numerics::float3x2 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->put_TransformMatrix(get_abi(value)));
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDrawingSession consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::CreateDrawingSession(Windows::UI::Color const& clearColor) const
{
    Microsoft::Graphics::Canvas::CanvasDrawingSession drawingSession{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->CreateDrawingSession(get_abi(clearColor), put_abi(drawingSession)));
    return drawingSession;
}

template <typename D> void consume_Microsoft_Graphics_Canvas_ICanvasSwapChain<D>::WaitForVerticalBlank() const
{
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChain)->WaitForVerticalBlank());
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChain consume_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory<D>::CreateWithSize(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, Windows::Foundation::Size const& size) const
{
    Microsoft::Graphics::Canvas::CanvasSwapChain swapChain{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChainFactory)->CreateWithSize(get_abi(resourceCreator), get_abi(size), put_abi(swapChain)));
    return swapChain;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChain consume_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory<D>::CreateWithWidthAndHeight(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) const
{
    Microsoft::Graphics::Canvas::CanvasSwapChain swapChain{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChainFactory)->CreateWithWidthAndHeight(get_abi(resourceCreator), width, height, put_abi(swapChain)));
    return swapChain;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChain consume_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory<D>::CreateWithWidthAndHeightAndDpi(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasSwapChain swapChain{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChainFactory)->CreateWithWidthAndHeightAndDpi(get_abi(resourceCreator), width, height, dpi, put_abi(swapChain)));
    return swapChain;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChain consume_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory<D>::CreateWithAllOptions(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat const& format, int32_t bufferCount, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) const
{
    Microsoft::Graphics::Canvas::CanvasSwapChain swapChain{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChainFactory)->CreateWithAllOptions(get_abi(resourceCreator), width, height, dpi, get_abi(format), bufferCount, get_abi(alphaMode), put_abi(swapChain)));
    return swapChain;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChain consume_Microsoft_Graphics_Canvas_ICanvasSwapChainStatics<D>::CreateForCoreWindow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Core::CoreWindow const& coreWindow, float dpi) const
{
    Microsoft::Graphics::Canvas::CanvasSwapChain swapChain{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChainStatics)->CreateForCoreWindowWithDpi(get_abi(resourceCreator), get_abi(coreWindow), dpi, put_abi(swapChain)));
    return swapChain;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasSwapChain consume_Microsoft_Graphics_Canvas_ICanvasSwapChainStatics<D>::CreateForCoreWindow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Core::CoreWindow const& coreWindow, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat const& format, int32_t bufferCount) const
{
    Microsoft::Graphics::Canvas::CanvasSwapChain swapChain{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasSwapChainStatics)->CreateForCoreWindowWithAllOptions(get_abi(resourceCreator), get_abi(coreWindow), width, height, dpi, get_abi(format), bufferCount, put_abi(swapChain)));
    return swapChain;
}

template <typename D> Microsoft::Graphics::Canvas::CanvasDevice consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap<D>::Device() const
{
    Microsoft::Graphics::Canvas::CanvasDevice value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmap)->get_Device(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap<D>::IsCachedOnDemand() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmap)->get_IsCachedOnDemand(&value));
    return value;
}

template <typename D> Windows::Graphics::Imaging::BitmapSize consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap<D>::SizeInPixels() const
{
    Windows::Graphics::Imaging::BitmapSize value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmap)->get_SizeInPixels(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap<D>::Size() const
{
    Windows::Foundation::Size value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmap)->get_Size(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap<D>::Bounds() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmap)->get_Bounds(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromFileName(get_abi(resourceCreator), get_abi(fileName), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromFileNameWithOptions(get_abi(resourceCreator), get_abi(fileName), get_abi(options), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromFileNameWithOptionsAndAlpha(get_abi(resourceCreator), get_abi(fileName), get_abi(options), get_abi(alpha), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromUri(get_abi(resourceCreator), get_abi(uri), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromUriWithOptions(get_abi(resourceCreator), get_abi(uri), get_abi(options), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromUriWithOptionsAndAlpha(get_abi(resourceCreator), get_abi(uri), get_abi(options), get_abi(alpha), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromStream(get_abi(resourceCreator), get_abi(stream), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromStreamWithOptions(get_abi(resourceCreator), get_abi(stream), get_abi(options), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> consume_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics<D>::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) const
{
    Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics)->LoadAsyncFromStreamWithOptionsAndAlpha(get_abi(resourceCreator), get_abi(stream), get_abi(options), get_abi(alpha), put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasActiveLayer> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasActiveLayer>
{};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasBitmap> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasBitmap>
{
    int32_t WINRT_CALL get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize* size) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SizeInPixels, WINRT_WRAP(Windows::Graphics::Imaging::BitmapSize));
            *size = detach_from<Windows::Graphics::Imaging::BitmapSize>(this->shim().SizeInPixels());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Size(Windows::Foundation::Size* size) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(Windows::Foundation::Size));
            *size = detach_from<Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Bounds(Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Bounds, WINRT_WRAP(Windows::Foundation::Rect));
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().Bounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Format(Windows::Graphics::DirectX::DirectXPixelFormat* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Format, WINRT_WRAP(Windows::Graphics::DirectX::DirectXPixelFormat));
            *value = detach_from<Windows::Graphics::DirectX::DirectXPixelFormat>(this->shim().Format());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveToFileAsync(void* fileName, void** asyncAction) noexcept final
    {
        try
        {
            *asyncAction = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), hstring const);
            *asyncAction = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<hstring const*>(&fileName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveToFileWithBitmapFileFormatAsync(void* fileName, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, void** asyncAction) noexcept final
    {
        try
        {
            *asyncAction = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), hstring const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const);
            *asyncAction = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<hstring const*>(&fileName), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveToFileWithBitmapFileFormatAndQualityAsync(void* fileName, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, float quality, void** asyncAction) noexcept final
    {
        try
        {
            *asyncAction = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), hstring const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const, float);
            *asyncAction = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<hstring const*>(&fileName), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat), quality));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveToStreamAsync(void* stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, void** asyncAction) noexcept final
    {
        try
        {
            *asyncAction = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const);
            *asyncAction = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveToStreamWithQualityAsync(void* stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, float quality, void** asyncAction) noexcept final
    {
        try
        {
            *asyncAction = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const, float);
            *asyncAction = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat), quality));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPixelBytes(uint32_t* __valueElementsSize, uint8_t** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPixelBytes, WINRT_WRAP(com_array<uint8_t>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetPixelBytes());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPixelBytesWithSubrectangle(int32_t left, int32_t top, int32_t width, int32_t height, uint32_t* __valueElementsSize, uint8_t** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPixelBytes, WINRT_WRAP(com_array<uint8_t>), int32_t, int32_t, int32_t, int32_t);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetPixelBytes(left, top, width, height));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPixelBytesWithBuffer(void* buffer) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPixelBytes, WINRT_WRAP(void), Windows::Storage::Streams::IBuffer const&);
            this->shim().GetPixelBytes(*reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPixelBytesWithBufferAndSubrectangle(void* buffer, int32_t left, int32_t top, int32_t width, int32_t height) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPixelBytes, WINRT_WRAP(void), Windows::Storage::Streams::IBuffer const&, int32_t, int32_t, int32_t, int32_t);
            this->shim().GetPixelBytes(*reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), left, top, width, height);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPixelColors(uint32_t* __valueElementsSize, struct struct_Windows_UI_Color** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPixelColors, WINRT_WRAP(com_array<Windows::UI::Color>));
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetPixelColors());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPixelColorsWithSubrectangle(int32_t left, int32_t top, int32_t width, int32_t height, uint32_t* __valueElementsSize, struct struct_Windows_UI_Color** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPixelColors, WINRT_WRAP(com_array<Windows::UI::Color>), int32_t, int32_t, int32_t, int32_t);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().GetPixelColors(left, top, width, height));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPixelBytes(uint32_t __valueElementsSize, uint8_t* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPixelBytes, WINRT_WRAP(void), array_view<uint8_t const>);
            this->shim().SetPixelBytes(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(valueElements), reinterpret_cast<uint8_t const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPixelBytesWithSubrectangle(uint32_t __valueElementsSize, uint8_t* valueElements, int32_t left, int32_t top, int32_t width, int32_t height) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPixelBytes, WINRT_WRAP(void), array_view<uint8_t const>, int32_t, int32_t, int32_t, int32_t);
            this->shim().SetPixelBytes(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(valueElements), reinterpret_cast<uint8_t const *>(valueElements) + __valueElementsSize), left, top, width, height);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPixelBytesWithBuffer(void* buffer) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPixelBytes, WINRT_WRAP(void), Windows::Storage::Streams::IBuffer const&);
            this->shim().SetPixelBytes(*reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPixelBytesWithBufferAndSubrectangle(void* buffer, int32_t left, int32_t top, int32_t width, int32_t height) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPixelBytes, WINRT_WRAP(void), Windows::Storage::Streams::IBuffer const&, int32_t, int32_t, int32_t, int32_t);
            this->shim().SetPixelBytes(*reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), left, top, width, height);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPixelColors(uint32_t __valueElementsSize, struct struct_Windows_UI_Color* valueElements) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPixelColors, WINRT_WRAP(void), array_view<Windows::UI::Color const>);
            this->shim().SetPixelColors(array_view<Windows::UI::Color const>(reinterpret_cast<Windows::UI::Color const *>(valueElements), reinterpret_cast<Windows::UI::Color const *>(valueElements) + __valueElementsSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPixelColorsWithSubrectangle(uint32_t __valueElementsSize, struct struct_Windows_UI_Color* valueElements, int32_t left, int32_t top, int32_t width, int32_t height) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPixelColors, WINRT_WRAP(void), array_view<Windows::UI::Color const>, int32_t, int32_t, int32_t, int32_t);
            this->shim().SetPixelColors(array_view<Windows::UI::Color const>(reinterpret_cast<Windows::UI::Color const *>(valueElements), reinterpret_cast<Windows::UI::Color const *>(valueElements) + __valueElementsSize), left, top, width, height);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CopyPixelsFromBitmap(void* otherBitmap) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CopyPixelsFromBitmap, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&);
            this->shim().CopyPixelsFromBitmap(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&otherBitmap));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CopyPixelsFromBitmapWithDestPoint(void* otherBitmap, int32_t destX, int32_t destY) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CopyPixelsFromBitmap, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, int32_t, int32_t);
            this->shim().CopyPixelsFromBitmap(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&otherBitmap), destX, destY);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CopyPixelsFromBitmapWithDestPointAndSourceRect(void* otherBitmap, int32_t destX, int32_t destY, int32_t sourceRectLeft, int32_t sourceRectTop, int32_t sourceRectWidth, int32_t sourceRectHeight) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CopyPixelsFromBitmap, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
            this->shim().CopyPixelsFromBitmap(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&otherBitmap), destX, destY, sourceRectLeft, sourceRectTop, sourceRectWidth, sourceRectHeight);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasBitmapFactory> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasBitmapFactory>
{};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasBitmapStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>
{
    int32_t WINRT_CALL CreateFromDirect3D11Surface(void* resourceCreator, void* surface, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Surface, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromDirect3D11Surface(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&surface)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromDirect3D11SurfaceWithDpi(void* resourceCreator, void* surface, float dpi, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Surface, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const&, float);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromDirect3D11Surface(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&surface), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromDirect3D11SurfaceWithDpiAndAlpha(void* resourceCreator, void* surface, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Surface, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const&, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromDirect3D11Surface(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&surface), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytes(void* resourceCreator, uint32_t __bytesSize, uint8_t* bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat format, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<uint8_t const>, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(bytes), reinterpret_cast<uint8_t const *>(bytes) + __bytesSize), widthInPixels, heightInPixels, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytesWithDpi(void* resourceCreator, uint32_t __bytesSize, uint8_t* bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat format, float dpi, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<uint8_t const>, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&, float);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(bytes), reinterpret_cast<uint8_t const *>(bytes) + __bytesSize), widthInPixels, heightInPixels, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytesWithDpiAndAlpha(void* resourceCreator, uint32_t __bytesSize, uint8_t* bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat format, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<uint8_t const>, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(bytes), reinterpret_cast<uint8_t const *>(bytes) + __bytesSize), widthInPixels, heightInPixels, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytesWithBuffer(void* resourceCreator, void* buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat format, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Storage::Streams::IBuffer const&, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), widthInPixels, heightInPixels, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytesWithBufferAndDpi(void* resourceCreator, void* buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat format, float dpi, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Storage::Streams::IBuffer const&, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&, float);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), widthInPixels, heightInPixels, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromBytesWithBufferAndDpiAndAlpha(void* resourceCreator, void* buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat format, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromBytes, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Storage::Streams::IBuffer const&, int32_t, int32_t, Windows::Graphics::DirectX::DirectXPixelFormat const&, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromBytes(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), widthInPixels, heightInPixels, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromColors(void* resourceCreator, uint32_t __colorsSize, struct struct_Windows_UI_Color* colors, int32_t widthInPixels, int32_t heightInPixels, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromColors, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Windows::UI::Color const>, int32_t, int32_t);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromColors(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Windows::UI::Color const>(reinterpret_cast<Windows::UI::Color const *>(colors), reinterpret_cast<Windows::UI::Color const *>(colors) + __colorsSize), widthInPixels, heightInPixels));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromColorsWithDpi(void* resourceCreator, uint32_t __colorsSize, struct struct_Windows_UI_Color* colors, int32_t widthInPixels, int32_t heightInPixels, float dpi, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromColors, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Windows::UI::Color const>, int32_t, int32_t, float);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromColors(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Windows::UI::Color const>(reinterpret_cast<Windows::UI::Color const *>(colors), reinterpret_cast<Windows::UI::Color const *>(colors) + __colorsSize), widthInPixels, heightInPixels, dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromColorsWithDpiAndAlpha(void* resourceCreator, uint32_t __colorsSize, struct struct_Windows_UI_Color* colors, int32_t widthInPixels, int32_t heightInPixels, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromColors, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, array_view<Windows::UI::Color const>, int32_t, int32_t, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromColors(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), array_view<Windows::UI::Color const>(reinterpret_cast<Windows::UI::Color const *>(colors), reinterpret_cast<Windows::UI::Color const *>(colors) + __colorsSize), widthInPixels, heightInPixels, dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromSoftwareBitmap(void* resourceCreator, void* sourceBitmap, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromSoftwareBitmap, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBitmap), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::Imaging::SoftwareBitmap const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasBitmap>(this->shim().CreateFromSoftwareBitmap(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::Imaging::SoftwareBitmap const*>(&sourceBitmap)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromHstring(void* resourceCreator, void* fileName, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, hstring const);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&fileName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromHstringWithDpi(void* resourceCreator, void* fileName, float dpi, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, hstring const, float);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&fileName), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromHstringWithDpiAndAlpha(void* resourceCreator, void* fileName, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, hstring const, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&fileName), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromUri(void* resourceCreator, void* uri, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Foundation::Uri const);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Uri const*>(&uri)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromUriWithDpi(void* resourceCreator, void* uri, float dpi, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Foundation::Uri const, float);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Uri const*>(&uri), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromUriWithDpiAndAlpha(void* resourceCreator, void* uri, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Foundation::Uri const, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Uri const*>(&uri), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromStream(void* resourceCreator, void* stream, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromStreamWithDpi(void* resourceCreator, void* stream, float dpi, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, float);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromStreamWithDpiAndAlpha(void* resourceCreator, void* stream, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** canvasBitmap) noexcept final
    {
        try
        {
            *canvasBitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const);
            *canvasBitmap = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasCommandList> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasCommandList>
{
    int32_t WINRT_CALL CreateDrawingSession(void** drawingSession) noexcept final
    {
        try
        {
            *drawingSession = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession));
            *drawingSession = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasCommandListFactory> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasCommandListFactory>
{
    int32_t WINRT_CALL Create(void* resourceCreator, void** commandList) noexcept final
    {
        try
        {
            *commandList = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Create, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasCommandList), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&);
            *commandList = detach_from<Microsoft::Graphics::Canvas::CanvasCommandList>(this->shim().Create(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasDevice> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasDevice>
{
    int32_t WINRT_CALL get_ForceSoftwareRenderer(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ForceSoftwareRenderer, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ForceSoftwareRenderer());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaximumBitmapSizeInPixels(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumBitmapSizeInPixels, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaximumBitmapSizeInPixels());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsPixelFormatSupported(Windows::Graphics::DirectX::DirectXPixelFormat pixelFormat, bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPixelFormatSupported, WINRT_WRAP(bool), Windows::Graphics::DirectX::DirectXPixelFormat const&);
            *value = detach_from<bool>(this->shim().IsPixelFormatSupported(*reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&pixelFormat)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsBufferPrecisionSupported(Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision, bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBufferPrecisionSupported, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::CanvasBufferPrecision const&);
            *value = detach_from<bool>(this->shim().IsBufferPrecisionSupported(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBufferPrecision const*>(&bufferPrecision)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaximumCacheSize(uint64_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumCacheSize, WINRT_WRAP(uint64_t));
            *value = detach_from<uint64_t>(this->shim().MaximumCacheSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaximumCacheSize(uint64_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumCacheSize, WINRT_WRAP(void), uint64_t);
            this->shim().MaximumCacheSize(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LowPriority(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LowPriority, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().LowPriority());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LowPriority(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LowPriority, WINRT_WRAP(void), bool);
            this->shim().LowPriority(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_DeviceLost(void* value, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DeviceLost, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::CanvasDevice, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().DeviceLost(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::Graphics::Canvas::CanvasDevice, Windows::Foundation::IInspectable> const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_DeviceLost(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(DeviceLost, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().DeviceLost(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL IsDeviceLost(int32_t hresult, bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsDeviceLost, WINRT_WRAP(bool), int32_t);
            *value = detach_from<bool>(this->shim().IsDeviceLost(hresult));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RaiseDeviceLost() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RaiseDeviceLost, WINRT_WRAP(void));
            this->shim().RaiseDeviceLost();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Lock(void** lock) noexcept final
    {
        try
        {
            *lock = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Lock, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasLock));
            *lock = detach_from<Microsoft::Graphics::Canvas::CanvasLock>(this->shim().Lock());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasDeviceFactory> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasDeviceFactory>
{
    int32_t WINRT_CALL CreateWithForceSoftwareRendererOption(bool forceSoftwareRenderer, void** canvasDevice) noexcept final
    {
        try
        {
            *canvasDevice = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithForceSoftwareRendererOption, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice), bool);
            *canvasDevice = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().CreateWithForceSoftwareRendererOption(forceSoftwareRenderer));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasDeviceStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasDeviceStatics>
{
    int32_t WINRT_CALL CreateFromDirect3D11Device(void* direct3DDevice, void** canvasDevice) noexcept final
    {
        try
        {
            *canvasDevice = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice), Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const&);
            *canvasDevice = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().CreateFromDirect3D11Device(*reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const*>(&direct3DDevice)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSharedDevice(void** canvasDevice) noexcept final
    {
        try
        {
            *canvasDevice = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSharedDevice, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *canvasDevice = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().GetSharedDevice());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetSharedDeviceWithForceSoftwareRenderer(bool forceSoftwareRenderer, void** canvasDevice) noexcept final
    {
        try
        {
            *canvasDevice = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSharedDevice, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice), bool);
            *canvasDevice = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().GetSharedDevice(forceSoftwareRenderer));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DebugLevel(Microsoft::Graphics::Canvas::CanvasDebugLevel value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DebugLevel, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasDebugLevel const&);
            this->shim().DebugLevel(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDebugLevel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DebugLevel(Microsoft::Graphics::Canvas::CanvasDebugLevel* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DebugLevel, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDebugLevel));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDebugLevel>(this->shim().DebugLevel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasDrawingSession> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasDrawingSession>
{
    int32_t WINRT_CALL Clear(struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Clear, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Clear(*reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ClearHdr(Windows::Foundation::Numerics::float4 color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Clear, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().Clear(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Flush() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Flush, WINRT_WRAP(void));
            this->shim().Flush();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOrigin(void* image) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOffset(void* image, Windows::Foundation::Numerics::float2 offset) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Numerics::float2 const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtCoords(void* image, float x, float y) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, float, float);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), x, y);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageToRect(void* bitmap, Windows::Foundation::Rect destinationRectangle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destinationRectangle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOffsetWithSourceRect(void* image, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRectangle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtCoordsWithSourceRect(void* image, float x, float y, Windows::Foundation::Rect sourceRectangle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, float, float, Windows::Foundation::Rect const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), x, y, *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageToRectWithSourceRect(void* image, Windows::Foundation::Rect destinationRectangle, Windows::Foundation::Rect sourceRectangle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&destinationRectangle), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOffsetWithSourceRectAndOpacity(void* image, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRectangle, float opacity) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&, float);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtCoordsWithSourceRectAndOpacity(void* image, float x, float y, Windows::Foundation::Rect sourceRectangle, float opacity) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, float, float, Windows::Foundation::Rect const&, float);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), x, y, *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageToRectWithSourceRectAndOpacity(void* image, Windows::Foundation::Rect destinationRectangle, Windows::Foundation::Rect sourceRectangle, float opacity) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&, float);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&destinationRectangle), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(void* image, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(void* image, float x, float y, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, float, float, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), x, y, *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageToRectWithSourceRectAndOpacityAndInterpolation(void* image, Windows::Foundation::Rect destinationRectangle, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&destinationRectangle), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(void* image, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Microsoft::Graphics::Canvas::CanvasComposite composite) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Microsoft::Graphics::Canvas::CanvasComposite const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasComposite const*>(&composite));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(void* image, float x, float y, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Microsoft::Graphics::Canvas::CanvasComposite composite) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, float, float, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Microsoft::Graphics::Canvas::CanvasComposite const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), x, y, *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasComposite const*>(&composite));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(void* image, Windows::Foundation::Rect destinationRectangle, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Microsoft::Graphics::Canvas::CanvasComposite composite) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Microsoft::Graphics::Canvas::CanvasComposite const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&destinationRectangle), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasComposite const*>(&composite));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(void* bitmap, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Windows::Foundation::Numerics::float4x4 perspective) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Windows::Foundation::Numerics::float4x4 const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Windows::Foundation::Numerics::float4x4 const*>(&perspective));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(void* bitmap, float x, float y, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Windows::Foundation::Numerics::float4x4 perspective) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, float, float, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Windows::Foundation::Numerics::float4x4 const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), x, y, *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Windows::Foundation::Numerics::float4x4 const*>(&perspective));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(void* bitmap, Windows::Foundation::Rect destinationRectangle, Windows::Foundation::Rect sourceRectangle, float opacity, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Windows::Foundation::Numerics::float4x4 perspective) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawImage, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&, float, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Windows::Foundation::Numerics::float4x4 const&);
            this->shim().DrawImage(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destinationRectangle), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Windows::Foundation::Numerics::float4x4 const*>(&perspective));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineWithBrush(Windows::Foundation::Numerics::float2 point0, Windows::Foundation::Numerics::float2 point1, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawLine(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point0), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point1), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineAtCoordsWithBrush(float x0, float y0, float x1, float y1, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawLine(x0, y0, x1, y1, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineWithColor(Windows::Foundation::Numerics::float2 point0, Windows::Foundation::Numerics::float2 point1, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&);
            this->shim().DrawLine(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point0), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point1), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineAtCoordsWithColor(float x0, float y0, float x1, float y1, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&);
            this->shim().DrawLine(x0, y0, x1, y1, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineWithBrushAndStrokeWidth(Windows::Foundation::Numerics::float2 point0, Windows::Foundation::Numerics::float2 point1, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawLine(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point0), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point1), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineAtCoordsWithBrushAndStrokeWidth(float x0, float y0, float x1, float y1, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawLine(x0, y0, x1, y1, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineWithColorAndStrokeWidth(Windows::Foundation::Numerics::float2 point0, Windows::Foundation::Numerics::float2 point1, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&, float);
            this->shim().DrawLine(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point0), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point1), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineAtCoordsWithColorAndStrokeWidth(float x0, float y0, float x1, float y1, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&, float);
            this->shim().DrawLine(x0, y0, x1, y1, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineWithBrushAndStrokeWidthAndStrokeStyle(Windows::Foundation::Numerics::float2 point0, Windows::Foundation::Numerics::float2 point1, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawLine(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point0), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point1), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float x0, float y0, float x1, float y1, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawLine(x0, y0, x1, y1, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineWithColorAndStrokeWidthAndStrokeStyle(Windows::Foundation::Numerics::float2 point0, Windows::Foundation::Numerics::float2 point1, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawLine(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point0), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point1), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(float x0, float y0, float x1, float y1, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawLine, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawLine(x0, y0, x1, y1, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleWithBrush(Windows::Foundation::Rect rect, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleAtCoordsWithBrush(float x, float y, float w, float h, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawRectangle(x, y, w, h, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleWithColor(Windows::Foundation::Rect rect, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Windows::UI::Color const&);
            this->shim().DrawRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleAtCoordsWithColor(float x, float y, float w, float h, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&);
            this->shim().DrawRectangle(x, y, w, h, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleWithBrushAndStrokeWidth(Windows::Foundation::Rect rect, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleAtCoordsWithBrushAndStrokeWidth(float x, float y, float w, float h, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawRectangle(x, y, w, h, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleWithColorAndStrokeWidth(Windows::Foundation::Rect rect, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Windows::UI::Color const&, float);
            this->shim().DrawRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleAtCoordsWithColorAndStrokeWidth(float x, float y, float w, float h, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&, float);
            this->shim().DrawRectangle(x, y, w, h, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(Windows::Foundation::Rect rect, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float x, float y, float w, float h, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRectangle(x, y, w, h, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(Windows::Foundation::Rect rect, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(float x, float y, float w, float h, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRectangle, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRectangle(x, y, w, h, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRectangleWithBrush(Windows::Foundation::Rect rect, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRectangleAtCoordsWithBrush(float x, float y, float w, float h, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRectangle, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillRectangle(x, y, w, h, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRectangleWithColor(Windows::Foundation::Rect rect, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Windows::UI::Color const&);
            this->shim().FillRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRectangleAtCoordsWithColor(float x, float y, float w, float h, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRectangle, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&);
            this->shim().FillRectangle(x, y, w, h, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRectangleWithBrushAndOpacityBrush(Windows::Foundation::Rect rect, void* brush, void* opacityBrush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRectangleAtCoordsWithBrushAndOpacityBrush(float x, float y, float w, float h, void* brush, void* opacityBrush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRectangle, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillRectangle(x, y, w, h, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleWithBrush(Windows::Foundation::Rect rect, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleAtCoordsWithBrush(float x, float y, float w, float h, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleWithColor(Windows::Foundation::Rect rect, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Windows::UI::Color const&);
            this->shim().DrawRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleAtCoordsWithColor(float x, float y, float w, float h, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Windows::UI::Color const&);
            this->shim().DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleWithBrushAndStrokeWidth(Windows::Foundation::Rect rect, float radiusX, float radiusY, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(float x, float y, float w, float h, float radiusX, float radiusY, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleWithColorAndStrokeWidth(Windows::Foundation::Rect rect, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Windows::UI::Color const&, float);
            this->shim().DrawRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(float x, float y, float w, float h, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Windows::UI::Color const&, float);
            this->shim().DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(Windows::Foundation::Rect rect, float radiusX, float radiusY, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float x, float y, float w, float h, float radiusX, float radiusY, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(Windows::Foundation::Rect rect, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(float x, float y, float w, float h, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRoundedRectangleWithBrush(Windows::Foundation::Rect rect, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRoundedRectangleAtCoordsWithBrush(float x, float y, float w, float h, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRoundedRectangleWithColor(Windows::Foundation::Rect rect, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRoundedRectangle, WINRT_WRAP(void), Windows::Foundation::Rect const&, float, float, Windows::UI::Color const&);
            this->shim().FillRoundedRectangle(*reinterpret_cast<Windows::Foundation::Rect const*>(&rect), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillRoundedRectangleAtCoordsWithColor(float x, float y, float w, float h, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillRoundedRectangle, WINRT_WRAP(void), float, float, float, float, float, float, Windows::UI::Color const&);
            this->shim().FillRoundedRectangle(x, y, w, h, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseWithBrush(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseAtCoordsWithBrush(float x, float y, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseWithColor(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Windows::UI::Color const&);
            this->shim().DrawEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseAtCoordsWithColor(float x, float y, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&);
            this->shim().DrawEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseWithBrushAndStrokeWidth(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseAtCoordsWithBrushAndStrokeWidth(float x, float y, float radiusX, float radiusY, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseWithColorAndStrokeWidth(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Windows::UI::Color const&, float);
            this->shim().DrawEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseAtCoordsWithColorAndStrokeWidth(float x, float y, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&, float);
            this->shim().DrawEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float x, float y, float radiusX, float radiusY, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(float x, float y, float radiusX, float radiusY, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawEllipse, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillEllipseWithBrush(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillEllipseAtCoordsWithBrush(float x, float y, float radiusX, float radiusY, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillEllipse, WINRT_WRAP(void), float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillEllipseWithColor(Windows::Foundation::Numerics::float2 centerPoint, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillEllipse, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, float, Windows::UI::Color const&);
            this->shim().FillEllipse(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillEllipseAtCoordsWithColor(float x, float y, float radiusX, float radiusY, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillEllipse, WINRT_WRAP(void), float, float, float, float, Windows::UI::Color const&);
            this->shim().FillEllipse(x, y, radiusX, radiusY, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleWithBrush(Windows::Foundation::Numerics::float2 centerPoint, float radius, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleAtCoordsWithBrush(float x, float y, float radius, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawCircle(x, y, radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleWithColor(Windows::Foundation::Numerics::float2 centerPoint, float radius, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Windows::UI::Color const&);
            this->shim().DrawCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleAtCoordsWithColor(float x, float y, float radius, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), float, float, float, Windows::UI::Color const&);
            this->shim().DrawCircle(x, y, radius, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleWithBrushAndStrokeWidth(Windows::Foundation::Numerics::float2 centerPoint, float radius, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleAtCoordsWithBrushAndStrokeWidth(float x, float y, float radius, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawCircle(x, y, radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleWithColorAndStrokeWidth(Windows::Foundation::Numerics::float2 centerPoint, float radius, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Windows::UI::Color const&, float);
            this->shim().DrawCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleAtCoordsWithColorAndStrokeWidth(float x, float y, float radius, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), float, float, float, Windows::UI::Color const&, float);
            this->shim().DrawCircle(x, y, radius, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(Windows::Foundation::Numerics::float2 centerPoint, float radius, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float x, float y, float radius, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawCircle(x, y, radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleWithColorAndStrokeWidthAndStrokeStyle(Windows::Foundation::Numerics::float2 centerPoint, float radius, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(float x, float y, float radius, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCircle, WINRT_WRAP(void), float, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawCircle(x, y, radius, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillCircleWithBrush(Windows::Foundation::Numerics::float2 centerPoint, float radius, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillCircleAtCoordsWithBrush(float x, float y, float radius, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillCircle, WINRT_WRAP(void), float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillCircle(x, y, radius, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillCircleWithColor(Windows::Foundation::Numerics::float2 centerPoint, float radius, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillCircle, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, float, Windows::UI::Color const&);
            this->shim().FillCircle(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&centerPoint), radius, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillCircleAtCoordsWithColor(float x, float y, float radius, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillCircle, WINRT_WRAP(void), float, float, float, Windows::UI::Color const&);
            this->shim().FillCircle(x, y, radius, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtPointWithColor(void* text, Windows::Foundation::Numerics::float2 point, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtPointCoordsWithColor(void* text, float x, float y, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, float, float, Windows::UI::Color const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtPointWithBrushAndFormat(void* text, Windows::Foundation::Numerics::float2 point, void* brush, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtRectWithBrushAndFormat(void* text, Windows::Foundation::Rect rectangle, void* brush, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Windows::Foundation::Rect const*>(&rectangle), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtPointCoordsWithBrushAndFormat(void* text, float x, float y, void* brush, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtRectCoordsWithBrushAndFormat(void* text, float x, float y, float w, float h, void* brush, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, float, float, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), x, y, w, h, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtPointWithColorAndFormat(void* text, Windows::Foundation::Numerics::float2 point, struct struct_Windows_UI_Color color, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Windows::UI::Color const*>(&color), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtRectWithColorAndFormat(void* text, Windows::Foundation::Rect rectangle, struct struct_Windows_UI_Color color, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, Windows::Foundation::Rect const&, Windows::UI::Color const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), *reinterpret_cast<Windows::Foundation::Rect const*>(&rectangle), *reinterpret_cast<Windows::UI::Color const*>(&color), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtPointCoordsWithColorAndFormat(void* text, float x, float y, struct struct_Windows_UI_Color color, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, float, float, Windows::UI::Color const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextAtRectCoordsWithColorAndFormat(void* text, float x, float y, float w, float h, struct struct_Windows_UI_Color color, void* format) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawText, WINRT_WRAP(void), hstring const&, float, float, float, float, Windows::UI::Color const&, Microsoft::Graphics::Canvas::Text::CanvasTextFormat const&);
            this->shim().DrawText(*reinterpret_cast<hstring const*>(&text), x, y, w, h, *reinterpret_cast<Windows::UI::Color const*>(&color), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextFormat const*>(&format));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryWithBrush(void* geometry, Windows::Foundation::Numerics::float2 offset, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryWithColor(void* geometry, Windows::Foundation::Numerics::float2 offset, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtCoordsWithBrush(void* geometry, float x, float y, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtCoordsWithColor(void* geometry, float x, float y, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Windows::UI::Color const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtOriginWithBrush(void* geometry, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtOriginWithColor(void* geometry, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::UI::Color const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryWithBrushAndStrokeWidth(void* geometry, Windows::Foundation::Numerics::float2 offset, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryWithColorAndStrokeWidth(void* geometry, Windows::Foundation::Numerics::float2 offset, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&, float);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtCoordsWithBrushAndStrokeWidth(void* geometry, float x, float y, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtCoordsWithColorAndStrokeWidth(void* geometry, float x, float y, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Windows::UI::Color const&, float);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtOriginWithBrushAndStrokeWidth(void* geometry, void* brush, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtOriginWithColorAndStrokeWidth(void* geometry, struct struct_Windows_UI_Color color, float strokeWidth) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::UI::Color const&, float);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(void* geometry, Windows::Foundation::Numerics::float2 offset, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(void* geometry, Windows::Foundation::Numerics::float2 offset, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(void* geometry, float x, float y, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(void* geometry, float x, float y, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(void* geometry, void* brush, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(void* geometry, struct struct_Windows_UI_Color color, float strokeWidth, void* strokeStyle) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::UI::Color const&, float, Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const&);
            this->shim().DrawGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::UI::Color const*>(&color), strokeWidth, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasStrokeStyle const*>(&strokeStyle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryWithBrush(void* geometry, Windows::Foundation::Numerics::float2 offset, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryWithBrushAndOpacityBrush(void* geometry, Windows::Foundation::Numerics::float2 offset, void* brush, void* opacityBrush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryWithColor(void* geometry, Windows::Foundation::Numerics::float2 offset, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryAtCoordsWithBrush(void* geometry, float x, float y, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryAtCoordsWithBrushAndOpacityBrush(void* geometry, float x, float y, void* brush, void* opacityBrush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryAtCoordsWithColor(void* geometry, float x, float y, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, float, float, Windows::UI::Color const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryAtOriginWithBrush(void* geometry, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryAtOriginWithBrushAndOpacityBrush(void* geometry, void* brush, void* opacityBrush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL FillGeometryAtOriginWithColor(void* geometry, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FillGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::UI::Color const&);
            this->shim().FillGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&geometry), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCachedGeometryWithBrush(void* geometry, Windows::Foundation::Numerics::float2 offset, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCachedGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawCachedGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCachedGeometryWithColor(void* geometry, Windows::Foundation::Numerics::float2 offset, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCachedGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&);
            this->shim().DrawCachedGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const*>(&geometry), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCachedGeometryAtCoordsWithBrush(void* geometry, float x, float y, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCachedGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawCachedGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const*>(&geometry), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCachedGeometryAtCoordsWithColor(void* geometry, float x, float y, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCachedGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const&, float, float, Windows::UI::Color const&);
            this->shim().DrawCachedGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const*>(&geometry), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCachedGeometryAtOriginWithBrush(void* geometry, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCachedGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawCachedGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const*>(&geometry), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawCachedGeometryAtOriginWithColor(void* geometry, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawCachedGeometry, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const&, Windows::UI::Color const&);
            this->shim().DrawCachedGeometry(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasCachedGeometry const*>(&geometry), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextLayoutWithBrush(void* textLayout, Windows::Foundation::Numerics::float2 point, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawTextLayout, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextLayout const&, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawTextLayout(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayout const*>(&textLayout), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextLayoutAtCoordsWithBrush(void* textLayout, float x, float y, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawTextLayout, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextLayout const&, float, float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawTextLayout(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayout const*>(&textLayout), x, y, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextLayoutWithColor(void* textLayout, Windows::Foundation::Numerics::float2 point, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawTextLayout, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextLayout const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Color const&);
            this->shim().DrawTextLayout(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayout const*>(&textLayout), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawTextLayoutAtCoordsWithColor(void* textLayout, float x, float y, struct struct_Windows_UI_Color color) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawTextLayout, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextLayout const&, float, float, Windows::UI::Color const&);
            this->shim().DrawTextLayout(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextLayout const*>(&textLayout), x, y, *reinterpret_cast<Windows::UI::Color const*>(&color));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawInk(void* inkStrokes) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawInk, WINRT_WRAP(void), Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const&);
            this->shim().DrawInk(*reinterpret_cast<Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const*>(&inkStrokes));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawInkWithHighContrast(void* inkStrokes, bool highContrast) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawInk, WINRT_WRAP(void), Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const&, bool);
            this->shim().DrawInk(*reinterpret_cast<Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const*>(&inkStrokes), highContrast);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGradientMeshAtOrigin(void* gradientMesh) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGradientMesh, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const&);
            this->shim().DrawGradientMesh(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const*>(&gradientMesh));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGradientMesh(void* gradientMesh, Windows::Foundation::Numerics::float2 point) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGradientMesh, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const&, Windows::Foundation::Numerics::float2 const&);
            this->shim().DrawGradientMesh(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const*>(&gradientMesh), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGradientMeshAtCoords(void* gradientMesh, float x, float y) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGradientMesh, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const&, float, float);
            this->shim().DrawGradientMesh(*reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGradientMesh const*>(&gradientMesh), x, y);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawSvgAtOrigin(void* svgDocument, Windows::Foundation::Size viewportSize) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawSvg, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const&, Windows::Foundation::Size const&);
            this->shim().DrawSvg(*reinterpret_cast<Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const*>(&svgDocument), *reinterpret_cast<Windows::Foundation::Size const*>(&viewportSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawSvgAtPoint(void* svgDocument, Windows::Foundation::Size viewportSize, Windows::Foundation::Numerics::float2 point) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawSvg, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const&, Windows::Foundation::Size const&, Windows::Foundation::Numerics::float2 const&);
            this->shim().DrawSvg(*reinterpret_cast<Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const*>(&svgDocument), *reinterpret_cast<Windows::Foundation::Size const*>(&viewportSize), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawSvgAtCoords(void* svgDocument, Windows::Foundation::Size viewportSize, float x, float y) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawSvg, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const&, Windows::Foundation::Size const&, float, float);
            this->shim().DrawSvg(*reinterpret_cast<Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument const*>(&svgDocument), *reinterpret_cast<Windows::Foundation::Size const*>(&viewportSize), x, y);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Antialiasing(Microsoft::Graphics::Canvas::CanvasAntialiasing* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Antialiasing, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAntialiasing));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAntialiasing>(this->shim().Antialiasing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Antialiasing(Microsoft::Graphics::Canvas::CanvasAntialiasing value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Antialiasing, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasAntialiasing const&);
            this->shim().Antialiasing(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAntialiasing const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Blend(Microsoft::Graphics::Canvas::CanvasBlend* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Blend, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasBlend));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasBlend>(this->shim().Blend());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Blend(Microsoft::Graphics::Canvas::CanvasBlend value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Blend, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBlend const&);
            this->shim().Blend(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBlend const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TextAntialiasing(Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TextAntialiasing, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing>(this->shim().TextAntialiasing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TextAntialiasing(Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TextAntialiasing, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing const&);
            this->shim().TextAntialiasing(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TextRenderingParameters(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TextRenderingParameters, WINRT_WRAP(Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters));
            *value = detach_from<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters>(this->shim().TextRenderingParameters());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TextRenderingParameters(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TextRenderingParameters, WINRT_WRAP(void), Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const&);
            this->shim().TextRenderingParameters(*reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextRenderingParameters const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Transform(Windows::Foundation::Numerics::float3x2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Transform, WINRT_WRAP(Windows::Foundation::Numerics::float3x2));
            *value = detach_from<Windows::Foundation::Numerics::float3x2>(this->shim().Transform());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Transform(Windows::Foundation::Numerics::float3x2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Transform, WINRT_WRAP(void), Windows::Foundation::Numerics::float3x2 const&);
            this->shim().Transform(*reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Units(Microsoft::Graphics::Canvas::CanvasUnits* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Units, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasUnits));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasUnits>(this->shim().Units());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Units(Microsoft::Graphics::Canvas::CanvasUnits value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Units, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasUnits const&);
            this->shim().Units(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasUnits const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EffectBufferPrecision(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EffectBufferPrecision, WINRT_WRAP(Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision>));
            *value = detach_from<Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision>>(this->shim().EffectBufferPrecision());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_EffectBufferPrecision(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EffectBufferPrecision, WINRT_WRAP(void), Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> const&);
            this->shim().EffectBufferPrecision(*reinterpret_cast<Windows::Foundation::IReference<Microsoft::Graphics::Canvas::CanvasBufferPrecision> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EffectTileSize(struct struct_Windows_Graphics_Imaging_BitmapSize* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EffectTileSize, WINRT_WRAP(Windows::Graphics::Imaging::BitmapSize));
            *value = detach_from<Windows::Graphics::Imaging::BitmapSize>(this->shim().EffectTileSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_EffectTileSize(struct struct_Windows_Graphics_Imaging_BitmapSize value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EffectTileSize, WINRT_WRAP(void), Windows::Graphics::Imaging::BitmapSize const&);
            this->shim().EffectTileSize(*reinterpret_cast<Windows::Graphics::Imaging::BitmapSize const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacity(float opacity, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), float);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(opacity));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityBrush(void* opacityBrush, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(*reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityAndClipRectangle(float opacity, Windows::Foundation::Rect clipRectangle, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), float, Windows::Foundation::Rect const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(opacity, *reinterpret_cast<Windows::Foundation::Rect const*>(&clipRectangle)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityBrushAndClipRectangle(void* opacityBrush, Windows::Foundation::Rect clipRectangle, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Windows::Foundation::Rect const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(*reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush), *reinterpret_cast<Windows::Foundation::Rect const*>(&clipRectangle)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityAndClipGeometry(float opacity, void* clipGeometry, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), float, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&clipGeometry)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityBrushAndClipGeometry(void* opacityBrush, void* clipGeometry, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(*reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush), *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&clipGeometry)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityAndClipGeometryAndTransform(float opacity, void* clipGeometry, Windows::Foundation::Numerics::float3x2 geometryTransform, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), float, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float3x2 const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&clipGeometry), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&geometryTransform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithOpacityBrushAndClipGeometryAndTransform(void* opacityBrush, void* clipGeometry, Windows::Foundation::Numerics::float3x2 geometryTransform, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float3x2 const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(*reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush), *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&clipGeometry), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&geometryTransform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateLayerWithAllOptions(float opacity, void* opacityBrush, Windows::Foundation::Rect clipRectangle, void* clipGeometry, Windows::Foundation::Numerics::float3x2 geometryTransform, Microsoft::Graphics::Canvas::CanvasLayerOptions options, void** layer) noexcept final
    {
        try
        {
            *layer = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateLayer, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasActiveLayer), float, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const&, Windows::Foundation::Numerics::float3x2 const&, Microsoft::Graphics::Canvas::CanvasLayerOptions const&);
            *layer = detach_from<Microsoft::Graphics::Canvas::CanvasActiveLayer>(this->shim().CreateLayer(opacity, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&opacityBrush), *reinterpret_cast<Windows::Foundation::Rect const*>(&clipRectangle), *reinterpret_cast<Microsoft::Graphics::Canvas::Geometry::CanvasGeometry const*>(&clipGeometry), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&geometryTransform), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasLayerOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGlyphRun(Windows::Foundation::Numerics::float2 point, void* fontFace, float fontSize, uint32_t __glyphsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphs, bool isSideways, uint32_t bidiLevel, void* brush) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGlyphRun, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, bool, uint32_t, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&);
            this->shim().DrawGlyphRun(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs) + __glyphsSize), isSideways, bidiLevel, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGlyphRunWithMeasuringMode(Windows::Foundation::Numerics::float2 point, void* fontFace, float fontSize, uint32_t __glyphsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphs, bool isSideways, uint32_t bidiLevel, void* brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGlyphRun, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, bool, uint32_t, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&);
            this->shim().DrawGlyphRun(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs) + __glyphsSize), isSideways, bidiLevel, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawGlyphRunWithMeasuringModeAndDescription(Windows::Foundation::Numerics::float2 point, void* fontFace, float fontSize, uint32_t __glyphsSize, struct struct_Microsoft_Graphics_Canvas_Text_CanvasGlyph* glyphs, bool isSideways, uint32_t bidiLevel, void* brush, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode, void* localeName, void* textString, uint32_t __clusterMapIndicesSize, int32_t* clusterMapIndices, uint32_t textPosition) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawGlyphRun, WINRT_WRAP(void), Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::Text::CanvasFontFace const&, float, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>, bool, uint32_t, Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const&, Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const&, hstring const&, hstring const&, array_view<int32_t const>, uint32_t);
            this->shim().DrawGlyphRun(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&point), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasFontFace const*>(&fontFace), fontSize, array_view<Microsoft::Graphics::Canvas::Text::CanvasGlyph const>(reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs), reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasGlyph const *>(glyphs) + __glyphsSize), isSideways, bidiLevel, *reinterpret_cast<Microsoft::Graphics::Canvas::Brushes::ICanvasBrush const*>(&brush), *reinterpret_cast<Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode const*>(&measuringMode), *reinterpret_cast<hstring const*>(&localeName), *reinterpret_cast<hstring const*>(&textString), array_view<int32_t const>(reinterpret_cast<int32_t const *>(clusterMapIndices), reinterpret_cast<int32_t const *>(clusterMapIndices) + __clusterMapIndicesSize), textPosition);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSpriteBatch(void** spriteBatch) noexcept final
    {
        try
        {
            *spriteBatch = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSpriteBatch, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSpriteBatch));
            *spriteBatch = detach_from<Microsoft::Graphics::Canvas::CanvasSpriteBatch>(this->shim().CreateSpriteBatch());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSpriteBatchWithSortMode(Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode, void** spriteBatch) noexcept final
    {
        try
        {
            *spriteBatch = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSpriteBatch, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSpriteBatch), Microsoft::Graphics::Canvas::CanvasSpriteSortMode const&);
            *spriteBatch = detach_from<Microsoft::Graphics::Canvas::CanvasSpriteBatch>(this->shim().CreateSpriteBatch(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteSortMode const*>(&sortMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSpriteBatchWithSortModeAndInterpolation(Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, void** spriteBatch) noexcept final
    {
        try
        {
            *spriteBatch = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSpriteBatch, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSpriteBatch), Microsoft::Graphics::Canvas::CanvasSpriteSortMode const&, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&);
            *spriteBatch = detach_from<Microsoft::Graphics::Canvas::CanvasSpriteBatch>(this->shim().CreateSpriteBatch(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteSortMode const*>(&sortMode), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateSpriteBatchWithSortModeAndInterpolationAndOptions(Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode, Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation, Microsoft::Graphics::Canvas::CanvasSpriteOptions options, void** spriteBatch) noexcept final
    {
        try
        {
            *spriteBatch = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateSpriteBatch, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSpriteBatch), Microsoft::Graphics::Canvas::CanvasSpriteSortMode const&, Microsoft::Graphics::Canvas::CanvasImageInterpolation const&, Microsoft::Graphics::Canvas::CanvasSpriteOptions const&);
            *spriteBatch = detach_from<Microsoft::Graphics::Canvas::CanvasSpriteBatch>(this->shim().CreateSpriteBatch(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteSortMode const*>(&sortMode), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasImageInterpolation const*>(&interpolation), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasImage> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasImage>
{
    int32_t WINRT_CALL GetBounds(void* resourceCreator, Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBounds, WINRT_WRAP(Windows::Foundation::Rect), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&);
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().GetBounds(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetBoundsWithTransform(void* resourceCreator, Windows::Foundation::Numerics::float3x2 transform, Windows::Foundation::Rect* bounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetBounds, WINRT_WRAP(Windows::Foundation::Rect), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Foundation::Numerics::float3x2 const&);
            *bounds = detach_from<Windows::Foundation::Rect>(this->shim().GetBounds(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasImageStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasImageStatics>
{
    int32_t WINRT_CALL SaveAsync(void* image, Windows::Foundation::Rect sourceRectangle, float dpi, void* resourceCreator, void* stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, void** action) noexcept final
    {
        try
        {
            *action = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Microsoft::Graphics::Canvas::ICanvasImage const, Windows::Foundation::Rect const, float, Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const);
            *action = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveWithQualityAsync(void* image, Windows::Foundation::Rect sourceRectangle, float dpi, void* resourceCreator, void* stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, float quality, void** action) noexcept final
    {
        try
        {
            *action = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Microsoft::Graphics::Canvas::ICanvasImage const, Windows::Foundation::Rect const, float, Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const, float);
            *action = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat), quality));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SaveWithQualityAndBufferPrecisionAsync(void* image, Windows::Foundation::Rect sourceRectangle, float dpi, void* resourceCreator, void* stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat, float quality, Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision, void** action) noexcept final
    {
        try
        {
            *action = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SaveAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), Microsoft::Graphics::Canvas::ICanvasImage const, Windows::Foundation::Rect const, float, Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const, float, Microsoft::Graphics::Canvas::CanvasBufferPrecision const);
            *action = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const*>(&fileFormat), quality, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBufferPrecision const*>(&bufferPrecision)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ComputeHistogram(void* image, Windows::Foundation::Rect sourceRectangle, void* resourceCreator, Microsoft::Graphics::Canvas::Effects::EffectChannelSelect channelSelect, int32_t numberOfBins, uint32_t* __valueElementsSize, float** valueElements) noexcept final
    {
        try
        {
            *__valueElementsSize = 0;
            *valueElements = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ComputeHistogram, WINRT_WRAP(com_array<float>), Microsoft::Graphics::Canvas::ICanvasImage const&, Windows::Foundation::Rect const&, Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const&, int32_t);
            std::tie(*__valueElementsSize, *valueElements) = detach_abi(this->shim().ComputeHistogram(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasImage const*>(&image), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRectangle), *reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const*>(&channelSelect), numberOfBins));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsHistogramSupported(void* device, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHistogramSupported, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::CanvasDevice const&);
            *result = detach_from<bool>(this->shim().IsHistogramSupported(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasLock> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasLock>
{};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasRenderTarget> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasRenderTarget>
{
    int32_t WINRT_CALL CreateDrawingSession(void** drawingSession) noexcept final
    {
        try
        {
            *drawingSession = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession));
            *drawingSession = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory>
{
    int32_t WINRT_CALL CreateWithSize(void* resourceCreator, Windows::Foundation::Size size, void** renderTarget) noexcept final
    {
        try
        {
            *renderTarget = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithSize, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, Windows::Foundation::Size const&);
            *renderTarget = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateWithSize(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Size const*>(&size)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithWidthAndHeight(void* resourceCreator, float width, float height, void** renderTarget) noexcept final
    {
        try
        {
            *renderTarget = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithWidthAndHeight, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, float, float);
            *renderTarget = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateWithWidthAndHeight(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), width, height));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithWidthAndHeightAndDpi(void* resourceCreator, float width, float height, float dpi, void** renderTarget) noexcept final
    {
        try
        {
            *renderTarget = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithWidthAndHeightAndDpi, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, float, float, float);
            *renderTarget = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateWithWidthAndHeightAndDpi(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(void* resourceCreator, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat format, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** renderTarget) noexcept final
    {
        try
        {
            *renderTarget = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithWidthAndHeightAndDpiAndFormatAndAlpha, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, float, float, float, Windows::Graphics::DirectX::DirectXPixelFormat const&, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *renderTarget = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics>
{
    int32_t WINRT_CALL CreateFromDirect3D11Surface(void* resourceCreator, void* surface, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Surface, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateFromDirect3D11Surface(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&surface)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromDirect3D11SurfaceWithDpi(void* resourceCreator, void* surface, float dpi, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Surface, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const&, float);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateFromDirect3D11Surface(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&surface), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromDirect3D11SurfaceWithDpiAndAlpha(void* resourceCreator, void* surface, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** bitmap) noexcept final
    {
        try
        {
            *bitmap = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromDirect3D11Surface, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasRenderTarget), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const&, float, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *bitmap = detach_from<Microsoft::Graphics::Canvas::CanvasRenderTarget>(this->shim().CreateFromDirect3D11Surface(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&surface), dpi, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasResourceCreator> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasResourceCreator>
{
    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi>
{
    int32_t WINRT_CALL get_Dpi(float* dpi) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Dpi, WINRT_WRAP(float));
            *dpi = detach_from<float>(this->shim().Dpi());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ConvertPixelsToDips(int32_t pixels, float* dips) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ConvertPixelsToDips, WINRT_WRAP(float), int32_t);
            *dips = detach_from<float>(this->shim().ConvertPixelsToDips(pixels));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ConvertDipsToPixels(float dips, Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding, int32_t* pixels) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ConvertDipsToPixels, WINRT_WRAP(int32_t), float, Microsoft::Graphics::Canvas::CanvasDpiRounding const&);
            *pixels = detach_from<int32_t>(this->shim().ConvertDipsToPixels(dips, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDpiRounding const*>(&dpiRounding)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasSpriteBatch> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasSpriteBatch>
{
    int32_t WINRT_CALL DrawToRect(void* bitmap, Windows::Foundation::Rect destRect) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destRect));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawAtOffset(void* bitmap, Windows::Foundation::Numerics::float2 offset) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawWithTransform(void* bitmap, Windows::Foundation::Numerics::float3x2 transform) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float3x2 const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawToRectWithTint(void* bitmap, Windows::Foundation::Rect destRect, Windows::Foundation::Numerics::float4 tint) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawAtOffsetWithTint(void* bitmap, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Numerics::float4 tint) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float4 const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawWithTransformAndTint(void* bitmap, Windows::Foundation::Numerics::float3x2 transform, Windows::Foundation::Numerics::float4 tint) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float3x2 const&, Windows::Foundation::Numerics::float4 const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawToRectWithTintAndFlip(void* bitmap, Windows::Foundation::Rect destRect, Windows::Foundation::Numerics::float4 tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&, Microsoft::Graphics::Canvas::CanvasSpriteFlip const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteFlip const*>(&flip));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawWithTransformAndTintAndFlip(void* bitmap, Windows::Foundation::Numerics::float3x2 transform, Windows::Foundation::Numerics::float4 tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float3x2 const&, Windows::Foundation::Numerics::float4 const&, Microsoft::Graphics::Canvas::CanvasSpriteFlip const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteFlip const*>(&flip));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawAtOffsetWithTintAndTransform(void* bitmap, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Numerics::float4 tint, Windows::Foundation::Numerics::float2 origin, float rotation, Windows::Foundation::Numerics::float2 scale, Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Draw, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Numerics::float4 const&, Windows::Foundation::Numerics::float2 const&, float, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::CanvasSpriteFlip const&);
            this->shim().Draw(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&origin), rotation, *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&scale), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteFlip const*>(&flip));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetToRect(void* bitmap, Windows::Foundation::Rect destRect, Windows::Foundation::Rect sourceRect) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destRect), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetAtOffset(void* bitmap, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRect) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetWithTransform(void* bitmap, Windows::Foundation::Numerics::float3x2 transform, Windows::Foundation::Rect sourceRect) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float3x2 const&, Windows::Foundation::Rect const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetToRectWithTint(void* bitmap, Windows::Foundation::Rect destRect, Windows::Foundation::Rect sourceRect, Windows::Foundation::Numerics::float4 tint) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destRect), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetAtOffsetWithTint(void* bitmap, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRect, Windows::Foundation::Numerics::float4 tint) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetWithTransformAndTint(void* bitmap, Windows::Foundation::Numerics::float3x2 transform, Windows::Foundation::Rect sourceRect, Windows::Foundation::Numerics::float4 tint) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float3x2 const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetToRectWithTintAndFlip(void* bitmap, Windows::Foundation::Rect destRect, Windows::Foundation::Rect sourceRect, Windows::Foundation::Numerics::float4 tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&, Microsoft::Graphics::Canvas::CanvasSpriteFlip const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Rect const*>(&destRect), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteFlip const*>(&flip));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetWithTransformAndTintAndFlip(void* bitmap, Windows::Foundation::Numerics::float3x2 transform, Windows::Foundation::Rect sourceRect, Windows::Foundation::Numerics::float4 tint, Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float3x2 const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&, Microsoft::Graphics::Canvas::CanvasSpriteFlip const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&transform), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteFlip const*>(&flip));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DrawFromSpriteSheetAtOffsetWithTintAndTransform(void* bitmap, Windows::Foundation::Numerics::float2 offset, Windows::Foundation::Rect sourceRect, Windows::Foundation::Numerics::float4 tint, Windows::Foundation::Numerics::float2 origin, float rotation, Windows::Foundation::Numerics::float2 scale, Microsoft::Graphics::Canvas::CanvasSpriteFlip flip) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DrawFromSpriteSheet, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasBitmap const&, Windows::Foundation::Numerics::float2 const&, Windows::Foundation::Rect const&, Windows::Foundation::Numerics::float4 const&, Windows::Foundation::Numerics::float2 const&, float, Windows::Foundation::Numerics::float2 const&, Microsoft::Graphics::Canvas::CanvasSpriteFlip const&);
            this->shim().DrawFromSpriteSheet(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasBitmap const*>(&bitmap), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offset), *reinterpret_cast<Windows::Foundation::Rect const*>(&sourceRect), *reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&tint), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&origin), rotation, *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&scale), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSpriteFlip const*>(&flip));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics>
{
    int32_t WINRT_CALL IsSupported(void* device, bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSupported, WINRT_WRAP(bool), Microsoft::Graphics::Canvas::CanvasDevice const&);
            *value = detach_from<bool>(this->shim().IsSupported(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasDevice const*>(&device)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasSwapChain> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasSwapChain>
{
    int32_t WINRT_CALL Present() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Present, WINRT_WRAP(void));
            this->shim().Present();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL PresentWithSyncInterval(int32_t syncInterval) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Present, WINRT_WRAP(void), int32_t);
            this->shim().Present(syncInterval);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ResizeBuffersWithSize(Windows::Foundation::Size newSize) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ResizeBuffers, WINRT_WRAP(void), Windows::Foundation::Size const&);
            this->shim().ResizeBuffers(*reinterpret_cast<Windows::Foundation::Size const*>(&newSize));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ResizeBuffersWithWidthAndHeight(float newWidth, float newHeight) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ResizeBuffers, WINRT_WRAP(void), float, float);
            this->shim().ResizeBuffers(newWidth, newHeight);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ResizeBuffersWithWidthAndHeightAndDpi(float newWidth, float newHeight, float newDpi) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ResizeBuffers, WINRT_WRAP(void), float, float, float);
            this->shim().ResizeBuffers(newWidth, newHeight, newDpi);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ResizeBuffersWithAllOptions(float newWidth, float newHeight, float newDpi, Windows::Graphics::DirectX::DirectXPixelFormat newFormat, int32_t bufferCount) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ResizeBuffers, WINRT_WRAP(void), float, float, float, Windows::Graphics::DirectX::DirectXPixelFormat const&, int32_t);
            this->shim().ResizeBuffers(newWidth, newHeight, newDpi, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&newFormat), bufferCount);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Size(Windows::Foundation::Size* size) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(Windows::Foundation::Size));
            *size = detach_from<Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize* size) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SizeInPixels, WINRT_WRAP(Windows::Graphics::Imaging::BitmapSize));
            *size = detach_from<Windows::Graphics::Imaging::BitmapSize>(this->shim().SizeInPixels());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Format(Windows::Graphics::DirectX::DirectXPixelFormat* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Format, WINRT_WRAP(Windows::Graphics::DirectX::DirectXPixelFormat));
            *value = detach_from<Windows::Graphics::DirectX::DirectXPixelFormat>(this->shim().Format());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BufferCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BufferCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().BufferCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlphaMode(Microsoft::Graphics::Canvas::CanvasAlphaMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlphaMode, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasAlphaMode));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasAlphaMode>(this->shim().AlphaMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Rotation(Microsoft::Graphics::Canvas::CanvasSwapChainRotation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Rotation, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChainRotation));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChainRotation>(this->shim().Rotation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Rotation(Microsoft::Graphics::Canvas::CanvasSwapChainRotation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Rotation, WINRT_WRAP(void), Microsoft::Graphics::Canvas::CanvasSwapChainRotation const&);
            this->shim().Rotation(*reinterpret_cast<Microsoft::Graphics::Canvas::CanvasSwapChainRotation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceSize(Windows::Foundation::Size* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceSize, WINRT_WRAP(Windows::Foundation::Size));
            *value = detach_from<Windows::Foundation::Size>(this->shim().SourceSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SourceSize(Windows::Foundation::Size value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceSize, WINRT_WRAP(void), Windows::Foundation::Size const&);
            this->shim().SourceSize(*reinterpret_cast<Windows::Foundation::Size const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TransformMatrix(Windows::Foundation::Numerics::float3x2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TransformMatrix, WINRT_WRAP(Windows::Foundation::Numerics::float3x2));
            *value = detach_from<Windows::Foundation::Numerics::float3x2>(this->shim().TransformMatrix());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TransformMatrix(Windows::Foundation::Numerics::float3x2 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TransformMatrix, WINRT_WRAP(void), Windows::Foundation::Numerics::float3x2 const&);
            this->shim().TransformMatrix(*reinterpret_cast<Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateDrawingSession(struct struct_Windows_UI_Color clearColor, void** drawingSession) noexcept final
    {
        try
        {
            *drawingSession = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateDrawingSession, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDrawingSession), Windows::UI::Color const&);
            *drawingSession = detach_from<Microsoft::Graphics::Canvas::CanvasDrawingSession>(this->shim().CreateDrawingSession(*reinterpret_cast<Windows::UI::Color const*>(&clearColor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL WaitForVerticalBlank() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WaitForVerticalBlank, WINRT_WRAP(void));
            this->shim().WaitForVerticalBlank();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasSwapChainFactory> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasSwapChainFactory>
{
    int32_t WINRT_CALL CreateWithSize(void* resourceCreator, Windows::Foundation::Size size, void** swapChain) noexcept final
    {
        try
        {
            *swapChain = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithSize, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChain), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, Windows::Foundation::Size const&);
            *swapChain = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().CreateWithSize(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Size const*>(&size)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithWidthAndHeight(void* resourceCreator, float width, float height, void** swapChain) noexcept final
    {
        try
        {
            *swapChain = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithWidthAndHeight, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChain), Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const&, float, float);
            *swapChain = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().CreateWithWidthAndHeight(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const*>(&resourceCreator), width, height));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithWidthAndHeightAndDpi(void* resourceCreator, float width, float height, float dpi, void** swapChain) noexcept final
    {
        try
        {
            *swapChain = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithWidthAndHeightAndDpi, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChain), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, float, float, float);
            *swapChain = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().CreateWithWidthAndHeightAndDpi(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateWithAllOptions(void* resourceCreator, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat format, int32_t bufferCount, Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode, void** swapChain) noexcept final
    {
        try
        {
            *swapChain = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateWithAllOptions, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChain), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, float, float, float, Windows::Graphics::DirectX::DirectXPixelFormat const&, int32_t, Microsoft::Graphics::Canvas::CanvasAlphaMode const&);
            *swapChain = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().CreateWithAllOptions(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), width, height, dpi, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), bufferCount, *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alphaMode)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasSwapChainStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasSwapChainStatics>
{
    int32_t WINRT_CALL CreateForCoreWindowWithDpi(void* resourceCreator, void* coreWindow, float dpi, void** swapChain) noexcept final
    {
        try
        {
            *swapChain = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateForCoreWindow, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChain), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::UI::Core::CoreWindow const&, float);
            *swapChain = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().CreateForCoreWindow(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::UI::Core::CoreWindow const*>(&coreWindow), dpi));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateForCoreWindowWithAllOptions(void* resourceCreator, void* coreWindow, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat format, int32_t bufferCount, void** swapChain) noexcept final
    {
        try
        {
            *swapChain = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateForCoreWindow, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasSwapChain), Microsoft::Graphics::Canvas::ICanvasResourceCreator const&, Windows::UI::Core::CoreWindow const&, float, float, float, Windows::Graphics::DirectX::DirectXPixelFormat const&, int32_t);
            *swapChain = detach_from<Microsoft::Graphics::Canvas::CanvasSwapChain>(this->shim().CreateForCoreWindow(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::UI::Core::CoreWindow const*>(&coreWindow), width, height, dpi, *reinterpret_cast<Windows::Graphics::DirectX::DirectXPixelFormat const*>(&format), bufferCount));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasVirtualBitmap> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasVirtualBitmap>
{
    int32_t WINRT_CALL get_Device(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Device, WINRT_WRAP(Microsoft::Graphics::Canvas::CanvasDevice));
            *value = detach_from<Microsoft::Graphics::Canvas::CanvasDevice>(this->shim().Device());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsCachedOnDemand(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsCachedOnDemand, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsCachedOnDemand());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SizeInPixels(struct struct_Windows_Graphics_Imaging_BitmapSize* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SizeInPixels, WINRT_WRAP(Windows::Graphics::Imaging::BitmapSize));
            *value = detach_from<Windows::Graphics::Imaging::BitmapSize>(this->shim().SizeInPixels());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Size(Windows::Foundation::Size* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(Windows::Foundation::Size));
            *value = detach_from<Windows::Foundation::Size>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Bounds(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Bounds, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().Bounds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics> : produce_base<D, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>
{
    int32_t WINRT_CALL LoadAsyncFromFileName(void* resourceCreator, void* fileName, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, hstring const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&fileName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromFileNameWithOptions(void* resourceCreator, void* fileName, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, hstring const, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&fileName), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromFileNameWithOptionsAndAlpha(void* resourceCreator, void* fileName, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, hstring const, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const, Microsoft::Graphics::Canvas::CanvasAlphaMode const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<hstring const*>(&fileName), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const*>(&options), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromUri(void* resourceCreator, void* uri, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Foundation::Uri const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Uri const*>(&uri)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromUriWithOptions(void* resourceCreator, void* uri, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Foundation::Uri const, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Uri const*>(&uri), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromUriWithOptionsAndAlpha(void* resourceCreator, void* uri, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Foundation::Uri const, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const, Microsoft::Graphics::Canvas::CanvasAlphaMode const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Foundation::Uri const*>(&uri), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const*>(&options), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromStream(void* resourceCreator, void* stream, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromStreamWithOptions(void* resourceCreator, void* stream, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL LoadAsyncFromStreamWithOptionsAndAlpha(void* resourceCreator, void* stream, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options, Microsoft::Graphics::Canvas::CanvasAlphaMode alpha, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LoadAsync, WINRT_WRAP(Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>), Microsoft::Graphics::Canvas::ICanvasResourceCreator const, Windows::Storage::Streams::IRandomAccessStream const, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const, Microsoft::Graphics::Canvas::CanvasAlphaMode const);
            *value = detach_from<Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap>>(this->shim().LoadAsync(*reinterpret_cast<Microsoft::Graphics::Canvas::ICanvasResourceCreator const*>(&resourceCreator), *reinterpret_cast<Windows::Storage::Streams::IRandomAccessStream const*>(&stream), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const*>(&options), *reinterpret_cast<Microsoft::Graphics::Canvas::CanvasAlphaMode const*>(&alpha)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Graphics::Canvas {

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromDirect3D11Surface(resourceCreator, surface); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromDirect3D11Surface(resourceCreator, surface, dpi); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromDirect3D11Surface(resourceCreator, surface, dpi, alpha); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, bytes, widthInPixels, heightInPixels, format); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, bytes, widthInPixels, heightInPixels, format, dpi); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<uint8_t const> bytes, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, bytes, widthInPixels, heightInPixels, format, dpi, alpha); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IBuffer const& buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, buffer, widthInPixels, heightInPixels, format); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IBuffer const& buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, buffer, widthInPixels, heightInPixels, format, dpi); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromBytes(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IBuffer const& buffer, int32_t widthInPixels, int32_t heightInPixels, Windows::Graphics::DirectX::DirectXPixelFormat const& format, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromBytes(resourceCreator, buffer, widthInPixels, heightInPixels, format, dpi, alpha); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t widthInPixels, int32_t heightInPixels)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromColors(resourceCreator, colors, widthInPixels, heightInPixels); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t widthInPixels, int32_t heightInPixels, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromColors(resourceCreator, colors, widthInPixels, heightInPixels, dpi); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromColors(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, array_view<Windows::UI::Color const> colors, int32_t widthInPixels, int32_t heightInPixels, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromColors(resourceCreator, colors, widthInPixels, heightInPixels, dpi, alpha); });
}

inline Microsoft::Graphics::Canvas::CanvasBitmap CanvasBitmap::CreateFromSoftwareBitmap(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::Imaging::SoftwareBitmap const& sourceBitmap)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.CreateFromSoftwareBitmap(resourceCreator, sourceBitmap); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, fileName); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, fileName, dpi); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, fileName, dpi, alpha); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, uri); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, uri, dpi); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, uri, dpi, alpha); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, stream); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, float dpi)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, stream, dpi); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasBitmap> CanvasBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasBitmap, Microsoft::Graphics::Canvas::ICanvasBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, stream, dpi, alpha); });
}

inline CanvasCommandList::CanvasCommandList(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator) :
    CanvasCommandList(impl::call_factory<CanvasCommandList, Microsoft::Graphics::Canvas::ICanvasCommandListFactory>([&](auto&& f) { return f.Create(resourceCreator); }))
{}

inline CanvasDevice::CanvasDevice() :
    CanvasDevice(impl::call_factory<CanvasDevice>([](auto&& f) { return f.template ActivateInstance<CanvasDevice>(); }))
{}

inline CanvasDevice::CanvasDevice(bool forceSoftwareRenderer) :
    CanvasDevice(impl::call_factory<CanvasDevice, Microsoft::Graphics::Canvas::ICanvasDeviceFactory>([&](auto&& f) { return f.CreateWithForceSoftwareRendererOption(forceSoftwareRenderer); }))
{}

inline Microsoft::Graphics::Canvas::CanvasDevice CanvasDevice::CreateFromDirect3D11Device(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const& direct3DDevice)
{
    return impl::call_factory<CanvasDevice, Microsoft::Graphics::Canvas::ICanvasDeviceStatics>([&](auto&& f) { return f.CreateFromDirect3D11Device(direct3DDevice); });
}

inline Microsoft::Graphics::Canvas::CanvasDevice CanvasDevice::GetSharedDevice()
{
    return impl::call_factory<CanvasDevice, Microsoft::Graphics::Canvas::ICanvasDeviceStatics>([&](auto&& f) { return f.GetSharedDevice(); });
}

inline Microsoft::Graphics::Canvas::CanvasDevice CanvasDevice::GetSharedDevice(bool forceSoftwareRenderer)
{
    return impl::call_factory<CanvasDevice, Microsoft::Graphics::Canvas::ICanvasDeviceStatics>([&](auto&& f) { return f.GetSharedDevice(forceSoftwareRenderer); });
}

inline void CanvasDevice::DebugLevel(Microsoft::Graphics::Canvas::CanvasDebugLevel const& value)
{
    impl::call_factory<CanvasDevice, Microsoft::Graphics::Canvas::ICanvasDeviceStatics>([&](auto&& f) { return f.DebugLevel(value); });
}

inline Microsoft::Graphics::Canvas::CanvasDebugLevel CanvasDevice::DebugLevel()
{
    return impl::call_factory<CanvasDevice, Microsoft::Graphics::Canvas::ICanvasDeviceStatics>([&](auto&& f) { return f.DebugLevel(); });
}

inline Windows::Foundation::IAsyncAction CanvasImage::SaveAsync(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, float dpi, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat)
{
    return impl::call_factory<CanvasImage, Microsoft::Graphics::Canvas::ICanvasImageStatics>([&](auto&& f) { return f.SaveAsync(image, sourceRectangle, dpi, resourceCreator, stream, fileFormat); });
}

inline Windows::Foundation::IAsyncAction CanvasImage::SaveAsync(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, float dpi, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat, float quality)
{
    return impl::call_factory<CanvasImage, Microsoft::Graphics::Canvas::ICanvasImageStatics>([&](auto&& f) { return f.SaveAsync(image, sourceRectangle, dpi, resourceCreator, stream, fileFormat, quality); });
}

inline Windows::Foundation::IAsyncAction CanvasImage::SaveAsync(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, float dpi, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasBitmapFileFormat const& fileFormat, float quality, Microsoft::Graphics::Canvas::CanvasBufferPrecision const& bufferPrecision)
{
    return impl::call_factory<CanvasImage, Microsoft::Graphics::Canvas::ICanvasImageStatics>([&](auto&& f) { return f.SaveAsync(image, sourceRectangle, dpi, resourceCreator, stream, fileFormat, quality, bufferPrecision); });
}

inline com_array<float> CanvasImage::ComputeHistogram(Microsoft::Graphics::Canvas::ICanvasImage const& image, Windows::Foundation::Rect const& sourceRectangle, Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Microsoft::Graphics::Canvas::Effects::EffectChannelSelect const& channelSelect, int32_t numberOfBins)
{
    return impl::call_factory<CanvasImage, Microsoft::Graphics::Canvas::ICanvasImageStatics>([&](auto&& f) { return f.ComputeHistogram(image, sourceRectangle, resourceCreator, channelSelect, numberOfBins); });
}

inline bool CanvasImage::IsHistogramSupported(Microsoft::Graphics::Canvas::CanvasDevice const& device)
{
    return impl::call_factory<CanvasImage, Microsoft::Graphics::Canvas::ICanvasImageStatics>([&](auto&& f) { return f.IsHistogramSupported(device); });
}

inline CanvasRenderTarget::CanvasRenderTarget(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, Windows::Foundation::Size const& size) :
    CanvasRenderTarget(impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory>([&](auto&& f) { return f.CreateWithSize(resourceCreator, size); }))
{}

inline CanvasRenderTarget::CanvasRenderTarget(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) :
    CanvasRenderTarget(impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory>([&](auto&& f) { return f.CreateWithWidthAndHeight(resourceCreator, width, height); }))
{}

inline CanvasRenderTarget::CanvasRenderTarget(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) :
    CanvasRenderTarget(impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory>([&](auto&& f) { return f.CreateWithWidthAndHeightAndDpi(resourceCreator, width, height, dpi); }))
{}

inline CanvasRenderTarget::CanvasRenderTarget(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat const& format, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha) :
    CanvasRenderTarget(impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory>([&](auto&& f) { return f.CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(resourceCreator, width, height, dpi, format, alpha); }))
{}

inline Microsoft::Graphics::Canvas::CanvasRenderTarget CanvasRenderTarget::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface)
{
    return impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics>([&](auto&& f) { return f.CreateFromDirect3D11Surface(resourceCreator, surface); });
}

inline Microsoft::Graphics::Canvas::CanvasRenderTarget CanvasRenderTarget::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi)
{
    return impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics>([&](auto&& f) { return f.CreateFromDirect3D11Surface(resourceCreator, surface, dpi); });
}

inline Microsoft::Graphics::Canvas::CanvasRenderTarget CanvasRenderTarget::CreateFromDirect3D11Surface(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& surface, float dpi, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasRenderTarget, Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics>([&](auto&& f) { return f.CreateFromDirect3D11Surface(resourceCreator, surface, dpi, alpha); });
}

inline bool CanvasSpriteBatch::IsSupported(Microsoft::Graphics::Canvas::CanvasDevice const& device)
{
    return impl::call_factory<CanvasSpriteBatch, Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics>([&](auto&& f) { return f.IsSupported(device); });
}

inline CanvasSwapChain::CanvasSwapChain(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, Windows::Foundation::Size const& size) :
    CanvasSwapChain(impl::call_factory<CanvasSwapChain, Microsoft::Graphics::Canvas::ICanvasSwapChainFactory>([&](auto&& f) { return f.CreateWithSize(resourceCreator, size); }))
{}

inline CanvasSwapChain::CanvasSwapChain(Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi const& resourceCreator, float width, float height) :
    CanvasSwapChain(impl::call_factory<CanvasSwapChain, Microsoft::Graphics::Canvas::ICanvasSwapChainFactory>([&](auto&& f) { return f.CreateWithWidthAndHeight(resourceCreator, width, height); }))
{}

inline CanvasSwapChain::CanvasSwapChain(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi) :
    CanvasSwapChain(impl::call_factory<CanvasSwapChain, Microsoft::Graphics::Canvas::ICanvasSwapChainFactory>([&](auto&& f) { return f.CreateWithWidthAndHeightAndDpi(resourceCreator, width, height, dpi); }))
{}

inline CanvasSwapChain::CanvasSwapChain(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat const& format, int32_t bufferCount, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alphaMode) :
    CanvasSwapChain(impl::call_factory<CanvasSwapChain, Microsoft::Graphics::Canvas::ICanvasSwapChainFactory>([&](auto&& f) { return f.CreateWithAllOptions(resourceCreator, width, height, dpi, format, bufferCount, alphaMode); }))
{}

inline Microsoft::Graphics::Canvas::CanvasSwapChain CanvasSwapChain::CreateForCoreWindow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Core::CoreWindow const& coreWindow, float dpi)
{
    return impl::call_factory<CanvasSwapChain, Microsoft::Graphics::Canvas::ICanvasSwapChainStatics>([&](auto&& f) { return f.CreateForCoreWindow(resourceCreator, coreWindow, dpi); });
}

inline Microsoft::Graphics::Canvas::CanvasSwapChain CanvasSwapChain::CreateForCoreWindow(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::UI::Core::CoreWindow const& coreWindow, float width, float height, float dpi, Windows::Graphics::DirectX::DirectXPixelFormat const& format, int32_t bufferCount)
{
    return impl::call_factory<CanvasSwapChain, Microsoft::Graphics::Canvas::ICanvasSwapChainStatics>([&](auto&& f) { return f.CreateForCoreWindow(resourceCreator, coreWindow, width, height, dpi, format, bufferCount); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, fileName); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, fileName, options); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, param::hstring const& fileName, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, fileName, options, alpha); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, uri); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, uri, options); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Foundation::Uri const& uri, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, uri, options, alpha); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, stream); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, stream, options); });
}

inline Windows::Foundation::IAsyncOperation<Microsoft::Graphics::Canvas::CanvasVirtualBitmap> CanvasVirtualBitmap::LoadAsync(Microsoft::Graphics::Canvas::ICanvasResourceCreator const& resourceCreator, Windows::Storage::Streams::IRandomAccessStream const& stream, Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions const& options, Microsoft::Graphics::Canvas::CanvasAlphaMode const& alpha)
{
    return impl::call_factory<CanvasVirtualBitmap, Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics>([&](auto&& f) { return f.LoadAsync(resourceCreator, stream, options, alpha); });
}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasActiveLayer> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasActiveLayer> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasBitmap> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasBitmap> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasBitmapFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasBitmapFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasBitmapStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasBitmapStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasCommandList> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasCommandList> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasCommandListFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasCommandListFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasDevice> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasDevice> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasDeviceFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasDeviceFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasDeviceStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasDeviceStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasDrawingSession> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasDrawingSession> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasImage> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasImage> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasImageStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasImageStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasLock> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasLock> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasRenderTarget> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasRenderTarget> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreator> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasSpriteBatch> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasSpriteBatch> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasSwapChain> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasSwapChain> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasSwapChainFactory> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasSwapChainFactory> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasSwapChainStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasSwapChainStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasActiveLayer> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasActiveLayer> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasBitmap> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasBitmap> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasCommandList> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasCommandList> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasDevice> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasDevice> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasDrawingSession> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasImage> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasImage> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasLock> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasLock> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasRenderTarget> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasRenderTarget> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasSpriteBatch> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasSpriteBatch> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasSwapChain> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasSwapChain> {};
template<> struct hash<winrt::Microsoft::Graphics::Canvas::CanvasVirtualBitmap> : winrt::impl::hash_base<winrt::Microsoft::Graphics::Canvas::CanvasVirtualBitmap> {};

}
